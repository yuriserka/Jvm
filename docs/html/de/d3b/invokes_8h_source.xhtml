<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.16"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>JVM 8 SB 2019/2: include/instructions/instruction_set/invokes.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">JVM 8 SB 2019/2
   </div>
   <div id="projectbrief">projeto que visa fazer uma implementação simples da JVM 8</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.16 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="../../dir_2843b2c750ff6b39dcfe98bf2554dba0.xhtml">instructions</a></li><li class="navelem"><a class="el" href="../../dir_7ef69e660d75507825e3f78a695283fd.xhtml">instruction_set</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">invokes.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../de/d3b/invokes_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#ifndef INCLUDE_INSTRUCTIONS_INSTRUCTION_SET_INVOKES_H_</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#define INCLUDE_INSTRUCTIONS_INSTRUCTION_SET_INVOKES_H_</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d3/d5a/base_8h.xhtml">instructions/instruction_set/base.h</a>&quot;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d3/de6/opcodes_8h.xhtml">instructions/opcodes.h</a>&quot;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../da/d66/string_8h.xhtml">utils/string.h</a>&quot;</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword">namespace </span><a class="code" href="../../da/d11/namespace_instructions.xhtml">Instructions</a> {</div>
<div class="line"><a name="l00012"></a><span class="lineno"><a class="line" href="../../d4/dfa/namespace_instructions_1_1_invokes.xhtml">   12</a></span>&#160;<span class="keyword">namespace </span>Invokes {</div>
<div class="line"><a name="l00013"></a><span class="lineno"><a class="line" href="../../d0/df5/class_instructions_1_1_invokes_1_1_dynamic.xhtml">   13</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d0/df5/class_instructions_1_1_invokes_1_1_dynamic.xhtml">Dynamic</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00015"></a><span class="lineno"><a class="line" href="../../d0/df5/class_instructions_1_1_invokes_1_1_dynamic.xhtml#a708b803f50f0e54f9b7819d4e4ad5413">   15</a></span>&#160;  <a class="code" href="../../d0/df5/class_instructions_1_1_invokes_1_1_dynamic.xhtml#a708b803f50f0e54f9b7819d4e4ad5413">Dynamic</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37aa3c56e9ac44f88bf822d086f63facf2d">kINVOKEDYNAMIC</a>) {}</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="../../d0/df5/class_instructions_1_1_invokes_1_1_dynamic.xhtml#ace8987943f6be5fe07f7b05b1ffbabcd">   17</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d0/df5/class_instructions_1_1_invokes_1_1_dynamic.xhtml#ace8987943f6be5fe07f7b05b1ffbabcd">toBytecode</a>(</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keyword">auto</span> kpool_index = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    *++*code_it;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    *++*code_it;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; #&quot;</span> &lt;&lt; kpool_index &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    *delta_code = 4;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keywordflow">return</span> {kpool_index};</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  }</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="../../d0/df5/class_instructions_1_1_invokes_1_1_dynamic.xhtml#a1adee1a0ccff9a646b6254be03938f1e">   29</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d0/df5/class_instructions_1_1_invokes_1_1_dynamic.xhtml#a1adee1a0ccff9a646b6254be03938f1e">toBytecode_json</a>(</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    *ret = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    *delta_code = 4;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">return</span> {<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(+(*++*code_it)),</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(+(*++*code_it))};</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  }</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d0/df5/class_instructions_1_1_invokes_1_1_dynamic.xhtml#a08aaa6f786070ff3e1440554632841a2">execute</a>(</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;};</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="../../d9/d12/class_instructions_1_1_invokes_1_1_interface.xhtml">   44</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d9/d12/class_instructions_1_1_invokes_1_1_interface.xhtml">Interface</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="../../d9/d12/class_instructions_1_1_invokes_1_1_interface.xhtml#a099caddf06d7c7a5e536e7335c991c10">   46</a></span>&#160;  <a class="code" href="../../d9/d12/class_instructions_1_1_invokes_1_1_interface.xhtml#a099caddf06d7c7a5e536e7335c991c10">Interface</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37aba07f1f5398dd4bdc3141493cb94a329">kINVOKEINTERFACE</a>) {}</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="../../d9/d12/class_instructions_1_1_invokes_1_1_interface.xhtml#abadaca272e87372e9cfd94835cae64e5">   48</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d9/d12/class_instructions_1_1_invokes_1_1_interface.xhtml#abadaca272e87372e9cfd94835cae64e5">toBytecode</a>(</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">auto</span> kpool_index = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> count = *++*code_it;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    *++*code_it;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; #&quot;</span> &lt;&lt; kpool_index &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    *delta_code = 4;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">return</span> {kpool_index, <span class="keywordtype">int</span>{count}};</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="../../d9/d12/class_instructions_1_1_invokes_1_1_interface.xhtml#aa58617014822656335543b375c73797f">   60</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d9/d12/class_instructions_1_1_invokes_1_1_interface.xhtml#aa58617014822656335543b375c73797f">toBytecode_json</a>(</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    *ret = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    *delta_code = 4;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">return</span> {<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(+(*++*code_it)),</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(+(*++*code_it))};</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  }</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d9/d12/class_instructions_1_1_invokes_1_1_interface.xhtml#a8fb47df6909156860cf2aa8e8b1e6439">execute</a>(</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;};</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="../../db/d16/class_instructions_1_1_invokes_1_1_especial.xhtml">   75</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../db/d16/class_instructions_1_1_invokes_1_1_especial.xhtml">Especial</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="../../db/d16/class_instructions_1_1_invokes_1_1_especial.xhtml#a82a2bff379b7f9b91e16c961cabd33ec">   77</a></span>&#160;  <a class="code" href="../../db/d16/class_instructions_1_1_invokes_1_1_especial.xhtml#a82a2bff379b7f9b91e16c961cabd33ec">Especial</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37abafa3f5320a3d944f31c282d0f110224">kINVOKESPECIAL</a>) {}</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="../../db/d16/class_instructions_1_1_invokes_1_1_especial.xhtml#a80e20c4fc459f63d052f36fc0bf1cdc2">   79</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../db/d16/class_instructions_1_1_invokes_1_1_especial.xhtml#a80e20c4fc459f63d052f36fc0bf1cdc2">toBytecode</a>(</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">auto</span> kpool_index = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; #&quot;</span> &lt;&lt; kpool_index &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">return</span> {kpool_index};</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="../../db/d16/class_instructions_1_1_invokes_1_1_especial.xhtml#aa37c6927ee4ebb7490fd47ac8772d25e">   89</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../db/d16/class_instructions_1_1_invokes_1_1_especial.xhtml#aa37c6927ee4ebb7490fd47ac8772d25e">toBytecode_json</a>(</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    *ret = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../db/d16/class_instructions_1_1_invokes_1_1_especial.xhtml#aa28b3e7e2ea39c039fbbfccd74ed6fcb">execute</a>(</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;};</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="../../d0/d7b/class_instructions_1_1_invokes_1_1_static.xhtml">  103</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d0/d7b/class_instructions_1_1_invokes_1_1_static.xhtml">Static</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="../../d0/d7b/class_instructions_1_1_invokes_1_1_static.xhtml#a6b09c62e94ee575eed81a0a9221c7d7c">  105</a></span>&#160;  <a class="code" href="../../d0/d7b/class_instructions_1_1_invokes_1_1_static.xhtml#a6b09c62e94ee575eed81a0a9221c7d7c">Static</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37af5133675e569bff0aa24722963663d4e">kINVOKESTATIC</a>) {}</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="../../d0/d7b/class_instructions_1_1_invokes_1_1_static.xhtml#a23c542aa26c0adeddee90c4884bd6c1c">  107</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d0/d7b/class_instructions_1_1_invokes_1_1_static.xhtml#a23c542aa26c0adeddee90c4884bd6c1c">toBytecode</a>(</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">auto</span> kpool_index = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; #&quot;</span> &lt;&lt; kpool_index &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">return</span> {kpool_index};</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="../../d0/d7b/class_instructions_1_1_invokes_1_1_static.xhtml#aa8b125ce728407a411273dbbb07c5409">  117</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d0/d7b/class_instructions_1_1_invokes_1_1_static.xhtml#aa8b125ce728407a411273dbbb07c5409">toBytecode_json</a>(</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    *ret = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d0/d7b/class_instructions_1_1_invokes_1_1_static.xhtml#acb2c0a5792b527fcedce1702918103ec">execute</a>(</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;};</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="../../d7/df0/class_instructions_1_1_invokes_1_1_virtual.xhtml">  131</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d7/df0/class_instructions_1_1_invokes_1_1_virtual.xhtml">Virtual</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="../../d7/df0/class_instructions_1_1_invokes_1_1_virtual.xhtml#a944adad7fa5de571b29ffd66f84a5b12">  133</a></span>&#160;  <a class="code" href="../../d7/df0/class_instructions_1_1_invokes_1_1_virtual.xhtml#a944adad7fa5de571b29ffd66f84a5b12">Virtual</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37aff91a7a9035c56744e152acd9f140893">kINVOKEVIRTUAL</a>) {}</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="../../d7/df0/class_instructions_1_1_invokes_1_1_virtual.xhtml#a67b4dc9ef382ec47ff7fa26bd7f4d7e1">  135</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d7/df0/class_instructions_1_1_invokes_1_1_virtual.xhtml#a67b4dc9ef382ec47ff7fa26bd7f4d7e1">toBytecode</a>(</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">auto</span> kpool_index = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; #&quot;</span> &lt;&lt; kpool_index &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">return</span> {kpool_index};</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="../../d7/df0/class_instructions_1_1_invokes_1_1_virtual.xhtml#add7732817c7897c374512de48517c918">  145</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d7/df0/class_instructions_1_1_invokes_1_1_virtual.xhtml#add7732817c7897c374512de48517c918">toBytecode_json</a>(</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    *ret = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d7/df0/class_instructions_1_1_invokes_1_1_virtual.xhtml#a039b78764d7782df1d38218e92def689">execute</a>(</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;};</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}  <span class="comment">// namespace Invokes</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;}  <span class="comment">// namespace Instructions</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="preprocessor">#endif  // INCLUDE_INSTRUCTIONS_INSTRUCTION_SET_INVOKES_H_</span></div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_virtual_xhtml_a039b78764d7782df1d38218e92def689"><div class="ttname"><a href="../../d7/df0/class_instructions_1_1_invokes_1_1_virtual.xhtml#a039b78764d7782df1d38218e92def689">Instructions::Invokes::Virtual::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_instruction_xhtml"><div class="ttname"><a href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instructions::Instruction</a></div><div class="ttdef"><b>Definition:</b> base.h:15</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_dynamic_xhtml_ace8987943f6be5fe07f7b05b1ffbabcd"><div class="ttname"><a href="../../d0/df5/class_instructions_1_1_invokes_1_1_dynamic.xhtml#ace8987943f6be5fe07f7b05b1ffbabcd">Instructions::Invokes::Dynamic::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> invokes.h:17</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_static_xhtml_a6b09c62e94ee575eed81a0a9221c7d7c"><div class="ttname"><a href="../../d0/d7b/class_instructions_1_1_invokes_1_1_static.xhtml#a6b09c62e94ee575eed81a0a9221c7d7c">Instructions::Invokes::Static::Static</a></div><div class="ttdeci">Static()</div><div class="ttdef"><b>Definition:</b> invokes.h:105</div></div>
<div class="ttc" id="abase_8h_xhtml"><div class="ttname"><a href="../../d3/d5a/base_8h.xhtml">base.h</a></div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_especial_xhtml"><div class="ttname"><a href="../../db/d16/class_instructions_1_1_invokes_1_1_especial.xhtml">Instructions::Invokes::Especial</a></div><div class="ttdef"><b>Definition:</b> invokes.h:75</div></div>
<div class="ttc" id="astring_8h_xhtml"><div class="ttname"><a href="../../da/d66/string_8h.xhtml">string.h</a></div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_especial_xhtml_aa28b3e7e2ea39c039fbbfccd74ed6fcb"><div class="ttname"><a href="../../db/d16/class_instructions_1_1_invokes_1_1_especial.xhtml#aa28b3e7e2ea39c039fbbfccd74ed6fcb">Instructions::Invokes::Especial::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_dynamic_xhtml_a1adee1a0ccff9a646b6254be03938f1e"><div class="ttname"><a href="../../d0/df5/class_instructions_1_1_invokes_1_1_dynamic.xhtml#a1adee1a0ccff9a646b6254be03938f1e">Instructions::Invokes::Dynamic::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> invokes.h:29</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_ab765ddcb61c4d60f2647154d87f97ae2"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Instructions::Opcodes::getMnemonic</a></div><div class="ttdeci">std::string getMnemonic(const Utils::Types::u1 &amp;opcode)</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37aa3c56e9ac44f88bf822d086f63facf2d"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37aa3c56e9ac44f88bf822d086f63facf2d">Instructions::Opcodes::kINVOKEDYNAMIC</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:143</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_dynamic_xhtml_a708b803f50f0e54f9b7819d4e4ad5413"><div class="ttname"><a href="../../d0/df5/class_instructions_1_1_invokes_1_1_dynamic.xhtml#a708b803f50f0e54f9b7819d4e4ad5413">Instructions::Invokes::Dynamic::Dynamic</a></div><div class="ttdeci">Dynamic()</div><div class="ttdef"><b>Definition:</b> invokes.h:15</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_virtual_xhtml_add7732817c7897c374512de48517c918"><div class="ttname"><a href="../../d7/df0/class_instructions_1_1_invokes_1_1_virtual.xhtml#add7732817c7897c374512de48517c918">Instructions::Invokes::Virtual::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> invokes.h:145</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_static_xhtml_a23c542aa26c0adeddee90c4884bd6c1c"><div class="ttname"><a href="../../d0/d7b/class_instructions_1_1_invokes_1_1_static.xhtml#a23c542aa26c0adeddee90c4884bd6c1c">Instructions::Invokes::Static::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> invokes.h:107</div></div>
<div class="ttc" id="aclass_instructions_1_1_instruction_xhtml_abce4218201520f9ca8880bda8ab78e40"><div class="ttname"><a href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">Instructions::Instruction::opcode</a></div><div class="ttdeci">const Utils::Types::u1 opcode</div><div class="ttdef"><b>Definition:</b> base.h:35</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_interface_xhtml_abadaca272e87372e9cfd94835cae64e5"><div class="ttname"><a href="../../d9/d12/class_instructions_1_1_invokes_1_1_interface.xhtml#abadaca272e87372e9cfd94835cae64e5">Instructions::Invokes::Interface::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> invokes.h:48</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_interface_xhtml_aa58617014822656335543b375c73797f"><div class="ttname"><a href="../../d9/d12/class_instructions_1_1_invokes_1_1_interface.xhtml#aa58617014822656335543b375c73797f">Instructions::Invokes::Interface::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> invokes.h:60</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37abafa3f5320a3d944f31c282d0f110224"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37abafa3f5320a3d944f31c282d0f110224">Instructions::Opcodes::kINVOKESPECIAL</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:145</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37aba07f1f5398dd4bdc3141493cb94a329"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37aba07f1f5398dd4bdc3141493cb94a329">Instructions::Opcodes::kINVOKEINTERFACE</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:144</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_virtual_xhtml_a67b4dc9ef382ec47ff7fa26bd7f4d7e1"><div class="ttname"><a href="../../d7/df0/class_instructions_1_1_invokes_1_1_virtual.xhtml#a67b4dc9ef382ec47ff7fa26bd7f4d7e1">Instructions::Invokes::Virtual::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> invokes.h:135</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_especial_xhtml_aa37c6927ee4ebb7490fd47ac8772d25e"><div class="ttname"><a href="../../db/d16/class_instructions_1_1_invokes_1_1_especial.xhtml#aa37c6927ee4ebb7490fd47ac8772d25e">Instructions::Invokes::Especial::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> invokes.h:89</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_interface_xhtml"><div class="ttname"><a href="../../d9/d12/class_instructions_1_1_invokes_1_1_interface.xhtml">Instructions::Invokes::Interface</a></div><div class="ttdef"><b>Definition:</b> invokes.h:44</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_dynamic_xhtml_a08aaa6f786070ff3e1440554632841a2"><div class="ttname"><a href="../../d0/df5/class_instructions_1_1_invokes_1_1_dynamic.xhtml#a08aaa6f786070ff3e1440554632841a2">Instructions::Invokes::Dynamic::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aopcodes_8h_xhtml"><div class="ttname"><a href="../../d3/de6/opcodes_8h.xhtml">opcodes.h</a></div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_dynamic_xhtml"><div class="ttname"><a href="../../d0/df5/class_instructions_1_1_invokes_1_1_dynamic.xhtml">Instructions::Invokes::Dynamic</a></div><div class="ttdef"><b>Definition:</b> invokes.h:13</div></div>
<div class="ttc" id="anamespace_instructions_xhtml"><div class="ttname"><a href="../../da/d11/namespace_instructions.xhtml">Instructions</a></div><div class="ttdef"><b>Definition:</b> execution_engine.h:12</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_especial_xhtml_a82a2bff379b7f9b91e16c961cabd33ec"><div class="ttname"><a href="../../db/d16/class_instructions_1_1_invokes_1_1_especial.xhtml#a82a2bff379b7f9b91e16c961cabd33ec">Instructions::Invokes::Especial::Especial</a></div><div class="ttdeci">Especial()</div><div class="ttdef"><b>Definition:</b> invokes.h:77</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_especial_xhtml_a80e20c4fc459f63d052f36fc0bf1cdc2"><div class="ttname"><a href="../../db/d16/class_instructions_1_1_invokes_1_1_especial.xhtml#a80e20c4fc459f63d052f36fc0bf1cdc2">Instructions::Invokes::Especial::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> invokes.h:79</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_interface_xhtml_a8fb47df6909156860cf2aa8e8b1e6439"><div class="ttname"><a href="../../d9/d12/class_instructions_1_1_invokes_1_1_interface.xhtml#a8fb47df6909156860cf2aa8e8b1e6439">Instructions::Invokes::Interface::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_virtual_xhtml_a944adad7fa5de571b29ffd66f84a5b12"><div class="ttname"><a href="../../d7/df0/class_instructions_1_1_invokes_1_1_virtual.xhtml#a944adad7fa5de571b29ffd66f84a5b12">Instructions::Invokes::Virtual::Virtual</a></div><div class="ttdeci">Virtual()</div><div class="ttdef"><b>Definition:</b> invokes.h:133</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_virtual_xhtml"><div class="ttname"><a href="../../d7/df0/class_instructions_1_1_invokes_1_1_virtual.xhtml">Instructions::Invokes::Virtual</a></div><div class="ttdef"><b>Definition:</b> invokes.h:131</div></div>
<div class="ttc" id="anamespace_utils_1_1_string_xhtml_aec9a3efb3bd837c1f21fec1ceba1eec9"><div class="ttname"><a href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a></div><div class="ttdeci">std::string toString(const T &amp;num)</div><div class="ttdef"><b>Definition:</b> string.h:21</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_static_xhtml_acb2c0a5792b527fcedce1702918103ec"><div class="ttname"><a href="../../d0/d7b/class_instructions_1_1_invokes_1_1_static.xhtml#acb2c0a5792b527fcedce1702918103ec">Instructions::Invokes::Static::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_static_xhtml"><div class="ttname"><a href="../../d0/d7b/class_instructions_1_1_invokes_1_1_static.xhtml">Instructions::Invokes::Static</a></div><div class="ttdef"><b>Definition:</b> invokes.h:103</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_static_xhtml_aa8b125ce728407a411273dbbb07c5409"><div class="ttname"><a href="../../d0/d7b/class_instructions_1_1_invokes_1_1_static.xhtml#aa8b125ce728407a411273dbbb07c5409">Instructions::Invokes::Static::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> invokes.h:117</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37aff91a7a9035c56744e152acd9f140893"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37aff91a7a9035c56744e152acd9f140893">Instructions::Opcodes::kINVOKEVIRTUAL</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:147</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37af5133675e569bff0aa24722963663d4e"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37af5133675e569bff0aa24722963663d4e">Instructions::Opcodes::kINVOKESTATIC</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:146</div></div>
<div class="ttc" id="aclass_instructions_1_1_invokes_1_1_interface_xhtml_a099caddf06d7c7a5e536e7335c991c10"><div class="ttname"><a href="../../d9/d12/class_instructions_1_1_invokes_1_1_interface.xhtml#a099caddf06d7c7a5e536e7335c991c10">Instructions::Invokes::Interface::Interface</a></div><div class="ttdeci">Interface()</div><div class="ttdef"><b>Definition:</b> invokes.h:46</div></div>
<div class="ttc" id="aclass_memory_areas_1_1_thread_xhtml"><div class="ttname"><a href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a></div><div class="ttdef"><b>Definition:</b> thread.h:11</div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 2 2019 03:56:32 for JVM 8 SB 2019/2 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.16
</small></address>
</body>
</html>
