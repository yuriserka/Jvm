<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.16"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>JVM 8 SB 2019/2: nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::iter_impl&lt; U &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">JVM 8 SB 2019/2
   </div>
   <div id="projectbrief">projeto que visa fazer uma implementação simples da JVM 8</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.16 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../d3/d9b/namespacenlohmann.xhtml">nlohmann</a></li><li class="navelem"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a></li><li class="navelem"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../dc/de1/classnlohmann_1_1basic__json_1_1iter__impl-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::iter_impl&lt; U &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>a template for a random access iterator for the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> class  
 <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d3/dd1/nlohmann__json_8hpp_source.xhtml">nlohmann_json.hpp</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="../../closed.png" alt="+"/> Inheritance diagram for nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::iter_impl&lt; U &gt;:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d6/d03/classnlohmann_1_1basic__json_1_1iter__impl__inherit__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="../../closed.png" alt="+"/> Collaboration diagram for nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::iter_impl&lt; U &gt;:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d8/dcc/classnlohmann_1_1basic__json_1_1iter__impl__coll__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a4d0518f3f2edae9dbaf7ef02f4f20add"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a4d0518f3f2edae9dbaf7ef02f4f20add">value_type</a> = typename <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b3297873b70c080837e8eedc4fec32f">basic_json::value_type</a></td></tr>
<tr class="memdesc:a4d0518f3f2edae9dbaf7ef02f4f20add"><td class="mdescLeft">&#160;</td><td class="mdescRight">the type of the values when the iterator is dereferenced  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a4d0518f3f2edae9dbaf7ef02f4f20add">More...</a><br /></td></tr>
<tr class="separator:a4d0518f3f2edae9dbaf7ef02f4f20add"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3d908ee643e5938d32e5f6d261d7715"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#aa3d908ee643e5938d32e5f6d261d7715">difference_type</a> = typename <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#afe7c1303357e19cea9527af4e9a31d8f">basic_json::difference_type</a></td></tr>
<tr class="memdesc:aa3d908ee643e5938d32e5f6d261d7715"><td class="mdescLeft">&#160;</td><td class="mdescRight">a type to represent differences between iterators  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#aa3d908ee643e5938d32e5f6d261d7715">More...</a><br /></td></tr>
<tr class="separator:aa3d908ee643e5938d32e5f6d261d7715"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3dddd7fa38b36e2531700ceb4a1ce9a8"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a3dddd7fa38b36e2531700ceb4a1ce9a8">pointer</a> = typename std::conditional&lt; std::is_const&lt; U &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a92e849ca687355935c02f492be936b68">value</a>, typename <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aff3d5cd2a75612364b888d8693231b58">basic_json::const_pointer</a>, typename <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aefee1f777198c68724bd127e0c8abbe4">basic_json::pointer</a> &gt;::<a class="el" href="../../db/d0a/classstd_1_1conditional_1_1type.xhtml">type</a></td></tr>
<tr class="memdesc:a3dddd7fa38b36e2531700ceb4a1ce9a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">defines a pointer to the type iterated over (value_type)  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a3dddd7fa38b36e2531700ceb4a1ce9a8">More...</a><br /></td></tr>
<tr class="separator:a3dddd7fa38b36e2531700ceb4a1ce9a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae09599e9cb4a947020a0265c0c4f3d5e"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#ae09599e9cb4a947020a0265c0c4f3d5e">reference</a> = typename std::conditional&lt; std::is_const&lt; U &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a92e849ca687355935c02f492be936b68">value</a>, typename <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">basic_json::const_reference</a>, typename <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">basic_json::reference</a> &gt;::<a class="el" href="../../db/d0a/classstd_1_1conditional_1_1type.xhtml">type</a></td></tr>
<tr class="memdesc:ae09599e9cb4a947020a0265c0c4f3d5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">defines a reference to the type iterated over (value_type)  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#ae09599e9cb4a947020a0265c0c4f3d5e">More...</a><br /></td></tr>
<tr class="separator:ae09599e9cb4a947020a0265c0c4f3d5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbe1b700b9cdc38f6991fc68683a9c2c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#adbe1b700b9cdc38f6991fc68683a9c2c">iterator_category</a> = std::bidirectional_iterator_tag</td></tr>
<tr class="memdesc:adbe1b700b9cdc38f6991fc68683a9c2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">the category of the iterator  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#adbe1b700b9cdc38f6991fc68683a9c2c">More...</a><br /></td></tr>
<tr class="separator:adbe1b700b9cdc38f6991fc68683a9c2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a3e45be67e4384b3eacb72bd6147a6a91"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a3e45be67e4384b3eacb72bd6147a6a91">iter_impl</a> ()=default</td></tr>
<tr class="memdesc:a3e45be67e4384b3eacb72bd6147a6a91"><td class="mdescLeft">&#160;</td><td class="mdescRight">default constructor  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a3e45be67e4384b3eacb72bd6147a6a91">More...</a><br /></td></tr>
<tr class="separator:a3e45be67e4384b3eacb72bd6147a6a91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa496f5348569e75d65592f25e1664770"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#aa496f5348569e75d65592f25e1664770">iter_impl</a> (<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a3dddd7fa38b36e2531700ceb4a1ce9a8">pointer</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9f42ee7d10eee2d5a73fd94ca7f767ca">object</a>) noexcept</td></tr>
<tr class="memdesc:aa496f5348569e75d65592f25e1664770"><td class="mdescLeft">&#160;</td><td class="mdescRight">constructor for a given JSON instance  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#aa496f5348569e75d65592f25e1664770">More...</a><br /></td></tr>
<tr class="separator:aa496f5348569e75d65592f25e1664770"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1963645f99993ac5d0d2f8516e07212"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#af1963645f99993ac5d0d2f8516e07212">operator const_iterator</a> () const</td></tr>
<tr class="separator:af1963645f99993ac5d0d2f8516e07212"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94c010c069b5aed9e064e0579eac9a64"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a94c010c069b5aed9e064e0579eac9a64">iter_impl</a> (const <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> &amp;other) noexcept</td></tr>
<tr class="memdesc:a94c010c069b5aed9e064e0579eac9a64"><td class="mdescLeft">&#160;</td><td class="mdescRight">copy constructor  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a94c010c069b5aed9e064e0579eac9a64">More...</a><br /></td></tr>
<tr class="separator:a94c010c069b5aed9e064e0579eac9a64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a083d9d5465de7ddfb6108f404ce54be3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a083d9d5465de7ddfb6108f404ce54be3">operator=</a> (<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> other) noexcept(std::is_nothrow_move_constructible&lt; <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a3dddd7fa38b36e2531700ceb4a1ce9a8">pointer</a> &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a92e849ca687355935c02f492be936b68">value</a> and std::is_nothrow_move_assignable&lt; <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a3dddd7fa38b36e2531700ceb4a1ce9a8">pointer</a> &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a92e849ca687355935c02f492be936b68">value</a> and std::is_nothrow_move_constructible&lt; internal_iterator &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a92e849ca687355935c02f492be936b68">value</a> and std::is_nothrow_move_assignable&lt; internal_iterator &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a92e849ca687355935c02f492be936b68">value</a>)</td></tr>
<tr class="memdesc:a083d9d5465de7ddfb6108f404ce54be3"><td class="mdescLeft">&#160;</td><td class="mdescRight">copy assignment  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a083d9d5465de7ddfb6108f404ce54be3">More...</a><br /></td></tr>
<tr class="separator:a083d9d5465de7ddfb6108f404ce54be3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0a628811b09b9adea6d68c3a5c4ca2a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#ae09599e9cb4a947020a0265c0c4f3d5e">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#ae0a628811b09b9adea6d68c3a5c4ca2a">operator*</a> () const</td></tr>
<tr class="memdesc:ae0a628811b09b9adea6d68c3a5c4ca2a"><td class="mdescLeft">&#160;</td><td class="mdescRight">return a reference to the value pointed to by the iterator  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#ae0a628811b09b9adea6d68c3a5c4ca2a">More...</a><br /></td></tr>
<tr class="separator:ae0a628811b09b9adea6d68c3a5c4ca2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd0d209ef3a07a8aa3ee46e03538ffa6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a3dddd7fa38b36e2531700ceb4a1ce9a8">pointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#afd0d209ef3a07a8aa3ee46e03538ffa6">operator-&gt;</a> () const</td></tr>
<tr class="memdesc:afd0d209ef3a07a8aa3ee46e03538ffa6"><td class="mdescLeft">&#160;</td><td class="mdescRight">dereference the iterator  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#afd0d209ef3a07a8aa3ee46e03538ffa6">More...</a><br /></td></tr>
<tr class="separator:afd0d209ef3a07a8aa3ee46e03538ffa6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74e26f187519bc7181b825b8f38a4e93"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a74e26f187519bc7181b825b8f38a4e93">operator++</a> (int)</td></tr>
<tr class="memdesc:a74e26f187519bc7181b825b8f38a4e93"><td class="mdescLeft">&#160;</td><td class="mdescRight">post-increment (it++)  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a74e26f187519bc7181b825b8f38a4e93">More...</a><br /></td></tr>
<tr class="separator:a74e26f187519bc7181b825b8f38a4e93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60e2723dae1c6d537fc914c664f1a81c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a60e2723dae1c6d537fc914c664f1a81c">operator++</a> ()</td></tr>
<tr class="memdesc:a60e2723dae1c6d537fc914c664f1a81c"><td class="mdescLeft">&#160;</td><td class="mdescRight">pre-increment (++it)  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a60e2723dae1c6d537fc914c664f1a81c">More...</a><br /></td></tr>
<tr class="separator:a60e2723dae1c6d537fc914c664f1a81c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c3a102ac61d4c6f869fe9a5d065e91e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a0c3a102ac61d4c6f869fe9a5d065e91e">operator--</a> (int)</td></tr>
<tr class="memdesc:a0c3a102ac61d4c6f869fe9a5d065e91e"><td class="mdescLeft">&#160;</td><td class="mdescRight">post-decrement (it&ndash;)  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a0c3a102ac61d4c6f869fe9a5d065e91e">More...</a><br /></td></tr>
<tr class="separator:a0c3a102ac61d4c6f869fe9a5d065e91e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50c5d20f733bfe2b13d67366102ba3fe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a50c5d20f733bfe2b13d67366102ba3fe">operator--</a> ()</td></tr>
<tr class="memdesc:a50c5d20f733bfe2b13d67366102ba3fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">pre-decrement (&ndash;it)  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a50c5d20f733bfe2b13d67366102ba3fe">More...</a><br /></td></tr>
<tr class="separator:a50c5d20f733bfe2b13d67366102ba3fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3beb0d08550188082ea64d8becd12fb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#af3beb0d08550188082ea64d8becd12fb">operator==</a> (const <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> &amp;other) const</td></tr>
<tr class="memdesc:af3beb0d08550188082ea64d8becd12fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">comparison: equal  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#af3beb0d08550188082ea64d8becd12fb">More...</a><br /></td></tr>
<tr class="separator:af3beb0d08550188082ea64d8becd12fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6f10c91f59565b6c6e7205ab6969a89"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#af6f10c91f59565b6c6e7205ab6969a89">operator!=</a> (const <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> &amp;other) const</td></tr>
<tr class="memdesc:af6f10c91f59565b6c6e7205ab6969a89"><td class="mdescLeft">&#160;</td><td class="mdescRight">comparison: not equal  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#af6f10c91f59565b6c6e7205ab6969a89">More...</a><br /></td></tr>
<tr class="separator:af6f10c91f59565b6c6e7205ab6969a89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63c655881b0b7b7499a333ba77a7e4d1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a63c655881b0b7b7499a333ba77a7e4d1">operator&lt;</a> (const <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> &amp;other) const</td></tr>
<tr class="memdesc:a63c655881b0b7b7499a333ba77a7e4d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">comparison: smaller  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a63c655881b0b7b7499a333ba77a7e4d1">More...</a><br /></td></tr>
<tr class="separator:a63c655881b0b7b7499a333ba77a7e4d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ed57d38f57f669f5788cea881772403"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a5ed57d38f57f669f5788cea881772403">operator&lt;=</a> (const <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> &amp;other) const</td></tr>
<tr class="memdesc:a5ed57d38f57f669f5788cea881772403"><td class="mdescLeft">&#160;</td><td class="mdescRight">comparison: less than or equal  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a5ed57d38f57f669f5788cea881772403">More...</a><br /></td></tr>
<tr class="separator:a5ed57d38f57f669f5788cea881772403"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6c8e672ff064e0b92073b4dd939ada6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#ae6c8e672ff064e0b92073b4dd939ada6">operator&gt;</a> (const <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> &amp;other) const</td></tr>
<tr class="memdesc:ae6c8e672ff064e0b92073b4dd939ada6"><td class="mdescLeft">&#160;</td><td class="mdescRight">comparison: greater than  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#ae6c8e672ff064e0b92073b4dd939ada6">More...</a><br /></td></tr>
<tr class="separator:ae6c8e672ff064e0b92073b4dd939ada6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53a239bddcbd557f335d275c806535c1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a53a239bddcbd557f335d275c806535c1">operator&gt;=</a> (const <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> &amp;other) const</td></tr>
<tr class="memdesc:a53a239bddcbd557f335d275c806535c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">comparison: greater than or equal  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a53a239bddcbd557f335d275c806535c1">More...</a><br /></td></tr>
<tr class="separator:a53a239bddcbd557f335d275c806535c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a170970e99b7a6d124da0fffa4cb76dba"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a170970e99b7a6d124da0fffa4cb76dba">operator+=</a> (<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#aa3d908ee643e5938d32e5f6d261d7715">difference_type</a> i)</td></tr>
<tr class="memdesc:a170970e99b7a6d124da0fffa4cb76dba"><td class="mdescLeft">&#160;</td><td class="mdescRight">add to iterator  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a170970e99b7a6d124da0fffa4cb76dba">More...</a><br /></td></tr>
<tr class="separator:a170970e99b7a6d124da0fffa4cb76dba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fd84e884e8474c000dc966d331a4854"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a9fd84e884e8474c000dc966d331a4854">operator-=</a> (<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#aa3d908ee643e5938d32e5f6d261d7715">difference_type</a> i)</td></tr>
<tr class="memdesc:a9fd84e884e8474c000dc966d331a4854"><td class="mdescLeft">&#160;</td><td class="mdescRight">subtract from iterator  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a9fd84e884e8474c000dc966d331a4854">More...</a><br /></td></tr>
<tr class="separator:a9fd84e884e8474c000dc966d331a4854"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b4cd7db9a93609f8e05f1759d38d633"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a3b4cd7db9a93609f8e05f1759d38d633">operator+</a> (<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#aa3d908ee643e5938d32e5f6d261d7715">difference_type</a> i)</td></tr>
<tr class="memdesc:a3b4cd7db9a93609f8e05f1759d38d633"><td class="mdescLeft">&#160;</td><td class="mdescRight">add to iterator  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a3b4cd7db9a93609f8e05f1759d38d633">More...</a><br /></td></tr>
<tr class="separator:a3b4cd7db9a93609f8e05f1759d38d633"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a926f2f9189403e72e4f694a06d4d021a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a926f2f9189403e72e4f694a06d4d021a">operator-</a> (<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#aa3d908ee643e5938d32e5f6d261d7715">difference_type</a> i)</td></tr>
<tr class="memdesc:a926f2f9189403e72e4f694a06d4d021a"><td class="mdescLeft">&#160;</td><td class="mdescRight">subtract from iterator  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a926f2f9189403e72e4f694a06d4d021a">More...</a><br /></td></tr>
<tr class="separator:a926f2f9189403e72e4f694a06d4d021a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bedce4ada748251e86c7924be54e210"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#aa3d908ee643e5938d32e5f6d261d7715">difference_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a3bedce4ada748251e86c7924be54e210">operator-</a> (const <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> &amp;other) const</td></tr>
<tr class="memdesc:a3bedce4ada748251e86c7924be54e210"><td class="mdescLeft">&#160;</td><td class="mdescRight">return difference  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a3bedce4ada748251e86c7924be54e210">More...</a><br /></td></tr>
<tr class="separator:a3bedce4ada748251e86c7924be54e210"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab58eb87c2362183da21c70be74c2b38c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#ae09599e9cb4a947020a0265c0c4f3d5e">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#ab58eb87c2362183da21c70be74c2b38c">operator[]</a> (<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#aa3d908ee643e5938d32e5f6d261d7715">difference_type</a> n) const</td></tr>
<tr class="memdesc:ab58eb87c2362183da21c70be74c2b38c"><td class="mdescLeft">&#160;</td><td class="mdescRight">access to successor  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#ab58eb87c2362183da21c70be74c2b38c">More...</a><br /></td></tr>
<tr class="separator:ab58eb87c2362183da21c70be74c2b38c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a030a45b63b70e12b18ad4f6c1c4f1239"><td class="memItemLeft" align="right" valign="top">object_t::key_type&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a030a45b63b70e12b18ad4f6c1c4f1239">key</a> () const</td></tr>
<tr class="memdesc:a030a45b63b70e12b18ad4f6c1c4f1239"><td class="mdescLeft">&#160;</td><td class="mdescRight">return the key of an object iterator  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a030a45b63b70e12b18ad4f6c1c4f1239">More...</a><br /></td></tr>
<tr class="separator:a030a45b63b70e12b18ad4f6c1c4f1239"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92e849ca687355935c02f492be936b68"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#ae09599e9cb4a947020a0265c0c4f3d5e">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a92e849ca687355935c02f492be936b68">value</a> () const</td></tr>
<tr class="memdesc:a92e849ca687355935c02f492be936b68"><td class="mdescLeft">&#160;</td><td class="mdescRight">return the value of an iterator  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a92e849ca687355935c02f492be936b68">More...</a><br /></td></tr>
<tr class="separator:a92e849ca687355935c02f492be936b68"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:ada3100cdb8700566051828f1355fa745"><td class="memItemLeft" align="right" valign="top">class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#ada3100cdb8700566051828f1355fa745">basic_json</a></td></tr>
<tr class="memdesc:ada3100cdb8700566051828f1355fa745"><td class="mdescLeft">&#160;</td><td class="mdescRight">allow <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a> to access private members  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#ada3100cdb8700566051828f1355fa745">More...</a><br /></td></tr>
<tr class="separator:ada3100cdb8700566051828f1355fa745"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType = std::string, class BooleanType = bool, class NumberIntegerType = std::int64_t, class NumberUnsignedType = std::uint64_t, class NumberFloatType = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt;<br />
template&lt;typename U&gt;<br />
class nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::iter_impl&lt; U &gt;</h3>

<p>a template for a random access iterator for the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> class </p>
<p>This class implements a both iterators (iterator and const_iterator) for the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> class.</p>
<dl class="section note"><dt>Note</dt><dd>An iterator is called <em>initialized</em> when a pointer to a JSON value has been set (e.g., by a constructor or a copy assignment). If the iterator is default-constructed, it is <em>uninitialized</em> and most methods are undefined. <b>The library uses assertions to detect calls on uninitialized iterators.</b></dd></dl>
<p>@requirement The class satisfies the following concept requirements:</p><ul>
<li><a href="http://en.cppreference.com/w/cpp/concept/RandomAccessIterator">RandomAccessIterator</a>: The iterator that can be moved to point (forward and backward) to any element in constant time.</li>
</ul>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0, simplified in version 2.0.9 </dd></dl>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="aa3d908ee643e5938d32e5f6d261d7715"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3d908ee643e5938d32e5f6d261d7715">&#9670;&nbsp;</a></span>difference_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#aa3d908ee643e5938d32e5f6d261d7715">difference_type</a> =  typename <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#afe7c1303357e19cea9527af4e9a31d8f">basic_json::difference_type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>a type to represent differences between iterators </p>

</div>
</div>
<a id="adbe1b700b9cdc38f6991fc68683a9c2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adbe1b700b9cdc38f6991fc68683a9c2c">&#9670;&nbsp;</a></span>iterator_category</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#adbe1b700b9cdc38f6991fc68683a9c2c">iterator_category</a> =  std::bidirectional_iterator_tag</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>the category of the iterator </p>

</div>
</div>
<a id="a3dddd7fa38b36e2531700ceb4a1ce9a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3dddd7fa38b36e2531700ceb4a1ce9a8">&#9670;&nbsp;</a></span>pointer</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a3dddd7fa38b36e2531700ceb4a1ce9a8">pointer</a> =  typename std::conditional&lt;std::is_const&lt;U&gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a92e849ca687355935c02f492be936b68">value</a>, typename <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aff3d5cd2a75612364b888d8693231b58">basic_json::const_pointer</a>, typename <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aefee1f777198c68724bd127e0c8abbe4">basic_json::pointer</a>&gt;::<a class="el" href="../../db/d0a/classstd_1_1conditional_1_1type.xhtml">type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>defines a pointer to the type iterated over (value_type) </p>

</div>
</div>
<a id="ae09599e9cb4a947020a0265c0c4f3d5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae09599e9cb4a947020a0265c0c4f3d5e">&#9670;&nbsp;</a></span>reference</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#ae09599e9cb4a947020a0265c0c4f3d5e">reference</a> =  typename std::conditional&lt;std::is_const&lt;U&gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a92e849ca687355935c02f492be936b68">value</a>, typename <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">basic_json::const_reference</a>, typename <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">basic_json::reference</a>&gt;::<a class="el" href="../../db/d0a/classstd_1_1conditional_1_1type.xhtml">type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>defines a reference to the type iterated over (value_type) </p>

</div>
</div>
<a id="a4d0518f3f2edae9dbaf7ef02f4f20add"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4d0518f3f2edae9dbaf7ef02f4f20add">&#9670;&nbsp;</a></span>value_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a4d0518f3f2edae9dbaf7ef02f4f20add">value_type</a> =  typename <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b3297873b70c080837e8eedc4fec32f">basic_json::value_type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>the type of the values when the iterator is dereferenced </p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a3e45be67e4384b3eacb72bd6147a6a91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e45be67e4384b3eacb72bd6147a6a91">&#9670;&nbsp;</a></span>iter_impl() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>default constructor </p>

</div>
</div>
<a id="aa496f5348569e75d65592f25e1664770"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa496f5348569e75d65592f25e1664770">&#9670;&nbsp;</a></span>iter_impl() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a3dddd7fa38b36e2531700ceb4a1ce9a8">pointer</a>&#160;</td>
          <td class="paramname"><em>object</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>constructor for a given JSON instance </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">object</td><td>pointer to a JSON object for this iterator </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>object != nullptr </dd></dl>
<dl class="section post"><dt>Postcondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>

</div>
</div>
<a id="a94c010c069b5aed9e064e0579eac9a64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94c010c069b5aed9e064e0579eac9a64">&#9670;&nbsp;</a></span>iter_impl() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>copy constructor </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">other</td><td>iterator to copy from </td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>It is not checked whether <em>other</em> is initialized. </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a030a45b63b70e12b18ad4f6c1c4f1239"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a030a45b63b70e12b18ad4f6c1c4f1239">&#9670;&nbsp;</a></span>key()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">object_t::key_type <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::key </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return the key of an object iterator </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>

</div>
</div>
<a id="af1963645f99993ac5d0d2f8516e07212"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1963645f99993ac5d0d2f8516e07212">&#9670;&nbsp;</a></span>operator const_iterator()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af6f10c91f59565b6c6e7205ab6969a89"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6f10c91f59565b6c6e7205ab6969a89">&#9670;&nbsp;</a></span>operator!=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>comparison: not equal </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>
<div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl_af6f10c91f59565b6c6e7205ab6969a89_cgraph.svg" width="358" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ae0a628811b09b9adea6d68c3a5c4ca2a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0a628811b09b9adea6d68c3a5c4ca2a">&#9670;&nbsp;</a></span>operator*()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#ae09599e9cb4a947020a0265c0c4f3d5e">reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator* </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return a reference to the value pointed to by the iterator </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>
<div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl_ae0a628811b09b9adea6d68c3a5c4ca2a_icgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a3b4cd7db9a93609f8e05f1759d38d633"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b4cd7db9a93609f8e05f1759d38d633">&#9670;&nbsp;</a></span>operator+()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator+ </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#aa3d908ee643e5938d32e5f6d261d7715">difference_type</a>&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>add to iterator </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>

</div>
</div>
<a id="a60e2723dae1c6d537fc914c664f1a81c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60e2723dae1c6d537fc914c664f1a81c">&#9670;&nbsp;</a></span>operator++() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&amp; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator++ </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>pre-increment (++it) </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>

</div>
</div>
<a id="a74e26f187519bc7181b825b8f38a4e93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74e26f187519bc7181b825b8f38a4e93">&#9670;&nbsp;</a></span>operator++() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator++ </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>post-increment (it++) </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>

</div>
</div>
<a id="a170970e99b7a6d124da0fffa4cb76dba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a170970e99b7a6d124da0fffa4cb76dba">&#9670;&nbsp;</a></span>operator+=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&amp; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator+= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#aa3d908ee643e5938d32e5f6d261d7715">difference_type</a>&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>add to iterator </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>
<div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl_a170970e99b7a6d124da0fffa4cb76dba_icgraph.svg" width="358" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a3bedce4ada748251e86c7924be54e210"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3bedce4ada748251e86c7924be54e210">&#9670;&nbsp;</a></span>operator-() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#aa3d908ee643e5938d32e5f6d261d7715">difference_type</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return difference </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>

</div>
</div>
<a id="a926f2f9189403e72e4f694a06d4d021a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a926f2f9189403e72e4f694a06d4d021a">&#9670;&nbsp;</a></span>operator-() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator- </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#aa3d908ee643e5938d32e5f6d261d7715">difference_type</a>&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>subtract from iterator </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>

</div>
</div>
<a id="a50c5d20f733bfe2b13d67366102ba3fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50c5d20f733bfe2b13d67366102ba3fe">&#9670;&nbsp;</a></span>operator--() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&amp; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator-- </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>pre-decrement (&ndash;it) </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>

</div>
</div>
<a id="a0c3a102ac61d4c6f869fe9a5d065e91e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c3a102ac61d4c6f869fe9a5d065e91e">&#9670;&nbsp;</a></span>operator--() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator-- </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>post-decrement (it&ndash;) </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>

</div>
</div>
<a id="a9fd84e884e8474c000dc966d331a4854"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fd84e884e8474c000dc966d331a4854">&#9670;&nbsp;</a></span>operator-=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&amp; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator-= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#aa3d908ee643e5938d32e5f6d261d7715">difference_type</a>&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>subtract from iterator </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>
<div id="dynsection-5" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-5-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-5-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-5-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl_a9fd84e884e8474c000dc966d331a4854_cgraph.svg" width="358" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="afd0d209ef3a07a8aa3ee46e03538ffa6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd0d209ef3a07a8aa3ee46e03538ffa6">&#9670;&nbsp;</a></span>operator-&gt;()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a3dddd7fa38b36e2531700ceb4a1ce9a8">pointer</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator-&gt; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>dereference the iterator </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>

</div>
</div>
<a id="a63c655881b0b7b7499a333ba77a7e4d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63c655881b0b7b7499a333ba77a7e4d1">&#9670;&nbsp;</a></span>operator&lt;()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>comparison: smaller </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>
<div id="dynsection-6" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-6-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-6-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-6-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl_a63c655881b0b7b7499a333ba77a7e4d1_icgraph.svg" width="358" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a5ed57d38f57f669f5788cea881772403"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ed57d38f57f669f5788cea881772403">&#9670;&nbsp;</a></span>operator&lt;=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator&lt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>comparison: less than or equal </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>
<div id="dynsection-7" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-7-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-7-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-7-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl_a5ed57d38f57f669f5788cea881772403_icgraph.svg" width="358" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a083d9d5465de7ddfb6108f404ce54be3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a083d9d5465de7ddfb6108f404ce54be3">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&amp; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>copy assignment </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">other</td><td>iterator to copy from </td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>It is not checked whether <em>other</em> is initialized. </dd></dl>
<div id="dynsection-8" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-8-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-8-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-8-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl_a083d9d5465de7ddfb6108f404ce54be3_cgraph.svg" width="286" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="af3beb0d08550188082ea64d8becd12fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3beb0d08550188082ea64d8becd12fb">&#9670;&nbsp;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>comparison: equal </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>
<div id="dynsection-9" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-9-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-9-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-9-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl_af3beb0d08550188082ea64d8becd12fb_icgraph.svg" width="358" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ae6c8e672ff064e0b92073b4dd939ada6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6c8e672ff064e0b92073b4dd939ada6">&#9670;&nbsp;</a></span>operator&gt;()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator&gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>comparison: greater than </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>
<div id="dynsection-10" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-10-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-10-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-10-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl_ae6c8e672ff064e0b92073b4dd939ada6_cgraph.svg" width="358" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a53a239bddcbd557f335d275c806535c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a53a239bddcbd557f335d275c806535c1">&#9670;&nbsp;</a></span>operator&gt;=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator&gt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>comparison: greater than or equal </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>
<div id="dynsection-11" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-11-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-11-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-11-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl_a53a239bddcbd557f335d275c806535c1_cgraph.svg" width="358" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ab58eb87c2362183da21c70be74c2b38c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab58eb87c2362183da21c70be74c2b38c">&#9670;&nbsp;</a></span>operator[]()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#ae09599e9cb4a947020a0265c0c4f3d5e">reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#aa3d908ee643e5938d32e5f6d261d7715">difference_type</a>&#160;</td>
          <td class="paramname"><em>n</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access to successor </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>

</div>
</div>
<a id="a92e849ca687355935c02f492be936b68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92e849ca687355935c02f492be936b68">&#9670;&nbsp;</a></span>value()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#ae09599e9cb4a947020a0265c0c4f3d5e">reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; U &gt;::value </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return the value of an iterator </p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator is initialized; i.e. <code>m_object != nullptr</code>. </dd></dl>
<div id="dynsection-12" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-12-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-12-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-12-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl_a92e849ca687355935c02f492be936b68_cgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a id="ada3100cdb8700566051828f1355fa745"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada3100cdb8700566051828f1355fa745">&#9670;&nbsp;</a></span>basic_json</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">friend class <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>allow <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a> to access private members </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>include/utils/external/<a class="el" href="../../d3/dd1/nlohmann__json_8hpp_source.xhtml">nlohmann_json.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Nov 21 2019 16:46:25 for JVM 8 SB 2019/2 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.16
</small></address>
</body>
</html>
