<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.16"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>JVM 8 SB 2019/2: include/instructions/instruction_set/double.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">JVM 8 SB 2019/2
   </div>
   <div id="projectbrief">projeto que visa fazer uma implementação simples da JVM 8</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.16 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="../../dir_2843b2c750ff6b39dcfe98bf2554dba0.xhtml">instructions</a></li><li class="navelem"><a class="el" href="../../dir_7ef69e660d75507825e3f78a695283fd.xhtml">instruction_set</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">double.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d9/d6e/double_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#ifndef INCLUDE_INSTRUCTIONS_INSTRUCTION_SET_DOUBLE_H_</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#define INCLUDE_INSTRUCTIONS_INSTRUCTION_SET_DOUBLE_H_</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d3/d5a/base_8h.xhtml">instructions/instruction_set/base.h</a>&quot;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d3/de6/opcodes_8h.xhtml">instructions/opcodes.h</a>&quot;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../da/d66/string_8h.xhtml">utils/string.h</a>&quot;</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword">namespace </span><a class="code" href="../../da/d11/namespace_instructions.xhtml">Instructions</a> {</div>
<div class="line"><a name="l00012"></a><span class="lineno"><a class="line" href="../../dc/dc6/namespace_instructions_1_1_double.xhtml">   12</a></span>&#160;<span class="keyword">namespace </span>Double {</div>
<div class="line"><a name="l00013"></a><span class="lineno"><a class="line" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">   13</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00015"></a><span class="lineno"><a class="line" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml#a51c43fae123297a8017873e5923c2f06">   15</a></span>&#160;  <span class="keyword">explicit</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml#a51c43fae123297a8017873e5923c2f06">BaseDouble</a>(<span class="keyword">const</span> <a class="code" href="../../d0/d94/namespace_utils_1_1_types.xhtml#a987afa1d65d5f43c5e379d4cdafacd44">Utils::Types::u1</a> &amp;tag) : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(tag) {}</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml#a5c5928de111d9ca4c77f32a39fed0dea">   17</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml#a5c5928de111d9ca4c77f32a39fed0dea">toBytecode</a>(</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;  }</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml#aaa442a78c1ae4b42a7ba1b1452b142da">   25</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml#aaa442a78c1ae4b42a7ba1b1452b142da">toBytecode_json</a>(</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    ;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  }</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;};</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="../../d3/d91/class_instructions_1_1_double_1_1_to_float.xhtml">   33</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d3/d91/class_instructions_1_1_double_1_1_to_float.xhtml">ToFloat</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="../../d3/d91/class_instructions_1_1_double_1_1_to_float.xhtml#a053d2e1c921c8dffe47063bea05e1fed">   35</a></span>&#160;  <a class="code" href="../../d3/d91/class_instructions_1_1_double_1_1_to_float.xhtml#a053d2e1c921c8dffe47063bea05e1fed">ToFloat</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a576463bcd6995ac79062ce151bd92507">kD2F</a>) {}</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d3/d91/class_instructions_1_1_double_1_1_to_float.xhtml#ab39a9e54c707d5e0baab54a0dc713748">execute</a>(</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;};</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="../../d2/d43/class_instructions_1_1_double_1_1_to_integer.xhtml">   52</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d2/d43/class_instructions_1_1_double_1_1_to_integer.xhtml">ToInteger</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="../../d2/d43/class_instructions_1_1_double_1_1_to_integer.xhtml#a1d66c4748e260e84f6cfa7aebc6e9cad">   54</a></span>&#160;  <a class="code" href="../../d2/d43/class_instructions_1_1_double_1_1_to_integer.xhtml#a1d66c4748e260e84f6cfa7aebc6e9cad">ToInteger</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37adc075a5e67ea9f428d3ce517d4fc7f4b">kD2I</a>) {}</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d2/d43/class_instructions_1_1_double_1_1_to_integer.xhtml#a69d7bf3a3b2f1647c1119d69c8d2e688">execute</a>(</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;};</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="../../d1/da8/class_instructions_1_1_double_1_1_to_long.xhtml">   71</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d1/da8/class_instructions_1_1_double_1_1_to_long.xhtml">ToLong</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="../../d1/da8/class_instructions_1_1_double_1_1_to_long.xhtml#aac758cde1bdbe5b39cf5410955453baf">   73</a></span>&#160;  <a class="code" href="../../d1/da8/class_instructions_1_1_double_1_1_to_long.xhtml#aac758cde1bdbe5b39cf5410955453baf">ToLong</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37add8caac3e988e9bc4a458aba64c9506e">kD2L</a>) {}</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d1/da8/class_instructions_1_1_double_1_1_to_long.xhtml#a26f041882099003c70ba7051f49eaf5d">execute</a>(</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;};</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="../../d0/d41/class_instructions_1_1_double_1_1_add.xhtml">   90</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d0/d41/class_instructions_1_1_double_1_1_add.xhtml">Add</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="../../d0/d41/class_instructions_1_1_double_1_1_add.xhtml#aa0985d0496620d5471529066cde66322">   92</a></span>&#160;  <a class="code" href="../../d0/d41/class_instructions_1_1_double_1_1_add.xhtml#aa0985d0496620d5471529066cde66322">Add</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37ad17528c4289bae7192f478b54d99c6d7">kDADD</a>) {}</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d0/d41/class_instructions_1_1_double_1_1_add.xhtml#a7201b9a49919585f13e8afb11ce8edc0">execute</a>(</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;};</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="../../db/dcc/class_instructions_1_1_double_1_1_load_from_array.xhtml">  109</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../db/dcc/class_instructions_1_1_double_1_1_load_from_array.xhtml">LoadFromArray</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="../../db/dcc/class_instructions_1_1_double_1_1_load_from_array.xhtml#a2835cd8f5af6043dd80932d36234118e">  111</a></span>&#160;  <a class="code" href="../../db/dcc/class_instructions_1_1_double_1_1_load_from_array.xhtml#a2835cd8f5af6043dd80932d36234118e">LoadFromArray</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37ad68e4452b50aec5eef746a1fc99ab049">kDALOAD</a>) {}</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../db/dcc/class_instructions_1_1_double_1_1_load_from_array.xhtml#ac100ebd930b4877fd6d17cddc36a75d2">execute</a>(</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;};</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="../../da/db9/class_instructions_1_1_double_1_1_store_into_array.xhtml">  128</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../da/db9/class_instructions_1_1_double_1_1_store_into_array.xhtml">StoreIntoArray</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="../../da/db9/class_instructions_1_1_double_1_1_store_into_array.xhtml#a6c0ef95782f710d84fabb85290726487">  130</a></span>&#160;  <a class="code" href="../../da/db9/class_instructions_1_1_double_1_1_store_into_array.xhtml#a6c0ef95782f710d84fabb85290726487">StoreIntoArray</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a2130c65eaf7ca0cb0b9fe8e70938321c">kDASTORE</a>) {}</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../da/db9/class_instructions_1_1_double_1_1_store_into_array.xhtml#aca3424bea27f19cf565434304ffb949c">execute</a>(</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;};</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="../../da/dbf/class_instructions_1_1_double_1_1_compare_greater.xhtml">  147</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../da/dbf/class_instructions_1_1_double_1_1_compare_greater.xhtml">CompareGreater</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="../../da/dbf/class_instructions_1_1_double_1_1_compare_greater.xhtml#a9002bff8436073ff8b1dec16f6002335">  149</a></span>&#160;  <a class="code" href="../../da/dbf/class_instructions_1_1_double_1_1_compare_greater.xhtml#a9002bff8436073ff8b1dec16f6002335">CompareGreater</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a6ef14ec69cfed2d95e3280d8804a4bfb">kDCMPG</a>) {}</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../da/dbf/class_instructions_1_1_double_1_1_compare_greater.xhtml#afc024af48d1ebacd8ddcdaef06914e84">execute</a>(</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;};</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno"><a class="line" href="../../da/d92/class_instructions_1_1_double_1_1_compare_less.xhtml">  166</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../da/d92/class_instructions_1_1_double_1_1_compare_less.xhtml">CompareLess</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="../../da/d92/class_instructions_1_1_double_1_1_compare_less.xhtml#a359a7ca456f3a72c6bf46f1be6a6d83c">  168</a></span>&#160;  <a class="code" href="../../da/d92/class_instructions_1_1_double_1_1_compare_less.xhtml#a359a7ca456f3a72c6bf46f1be6a6d83c">CompareLess</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a537428052fbde671183083f303bd139b">kDCMPL</a>) {}</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../da/d92/class_instructions_1_1_double_1_1_compare_less.xhtml#ae703f023c2cd14b930b4544da43a2b48">execute</a>(</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;};</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="../../d1/d22/class_instructions_1_1_double_1_1_const__0.xhtml">  185</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d1/d22/class_instructions_1_1_double_1_1_const__0.xhtml">Const_0</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="../../d1/d22/class_instructions_1_1_double_1_1_const__0.xhtml#aa91ae75e8b11abbd8137c6ba64b3097f">  187</a></span>&#160;  <a class="code" href="../../d1/d22/class_instructions_1_1_double_1_1_const__0.xhtml#aa91ae75e8b11abbd8137c6ba64b3097f">Const_0</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a9facded561e7915556e39520766139e3">kDCONST_0</a>) {}</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d1/d22/class_instructions_1_1_double_1_1_const__0.xhtml#aeb3ca557a68d50bd31758d904af3d21d">execute</a>(</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;};</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno"><a class="line" href="../../d3/d2a/class_instructions_1_1_double_1_1_const__1.xhtml">  204</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d3/d2a/class_instructions_1_1_double_1_1_const__1.xhtml">Const_1</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="../../d3/d2a/class_instructions_1_1_double_1_1_const__1.xhtml#ad3a44d3cd719af749fb60c306098a829">  206</a></span>&#160;  <a class="code" href="../../d3/d2a/class_instructions_1_1_double_1_1_const__1.xhtml#ad3a44d3cd719af749fb60c306098a829">Const_1</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37afa3c31e35c437b759fc9ebee1b5823f4">kDCONST_1</a>) {}</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d3/d2a/class_instructions_1_1_double_1_1_const__1.xhtml#ab5d98779be70e4201e2aac399727f4ee">execute</a>(</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;};</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="../../da/df9/class_instructions_1_1_double_1_1_div.xhtml">  223</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../da/df9/class_instructions_1_1_double_1_1_div.xhtml">Div</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00225"></a><span class="lineno"><a class="line" href="../../da/df9/class_instructions_1_1_double_1_1_div.xhtml#aa8eaa77c934a2be1198198e244f320ae">  225</a></span>&#160;  <a class="code" href="../../da/df9/class_instructions_1_1_double_1_1_div.xhtml#aa8eaa77c934a2be1198198e244f320ae">Div</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a42601e3631492fbf7df09385427be2b1">kDDIV</a>) {}</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../da/df9/class_instructions_1_1_double_1_1_div.xhtml#ae7dfe8140e997670f31970f5511260a2">execute</a>(</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;};</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160; </div>
<div class="line"><a name="l00242"></a><span class="lineno"><a class="line" href="../../d8/d24/class_instructions_1_1_double_1_1_load.xhtml">  242</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d8/d24/class_instructions_1_1_double_1_1_load.xhtml">Load</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00244"></a><span class="lineno"><a class="line" href="../../d8/d24/class_instructions_1_1_double_1_1_load.xhtml#a70b00fd7e76c491cdfa730824737a522">  244</a></span>&#160;  <a class="code" href="../../d8/d24/class_instructions_1_1_double_1_1_load.xhtml#a70b00fd7e76c491cdfa730824737a522">Load</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37af6312f2a5a0e7eb7e4e9453a6121c753">kDLOAD</a>) {}</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160; </div>
<div class="line"><a name="l00246"></a><span class="lineno"><a class="line" href="../../d8/d24/class_instructions_1_1_double_1_1_load.xhtml#acb18445350f21454396f29b5b72c8bec">  246</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d8/d24/class_instructions_1_1_double_1_1_load.xhtml#acb18445350f21454396f29b5b72c8bec">toBytecode</a>(</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordflow">if</span> (wide) {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;      int16_t index = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;      (*ss) &lt;&lt; index;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;      *delta_code = 2;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> index = *++*code_it;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;      (*ss) &lt;&lt; <span class="keywordtype">int</span>{index};</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;      *delta_code = 1;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    (*ss) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  }</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno"><a class="line" href="../../d8/d24/class_instructions_1_1_double_1_1_load.xhtml#a9d9600a7d5ed7033715d92fd5f78ff06">  264</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d8/d24/class_instructions_1_1_double_1_1_load.xhtml#a9d9600a7d5ed7033715d92fd5f78ff06">toBytecode_json</a>(</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keywordflow">if</span> (wide) {</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;      int16_t index = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;      *delta_code = 2;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;      <span class="keywordflow">return</span> {<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(index)};</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    }</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> index = *++*code_it;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    *delta_code = 1;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordflow">return</span> {<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(<span class="keywordtype">int</span>{index})};</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;  }</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d8/d24/class_instructions_1_1_double_1_1_load.xhtml#a02363aa2fd5626e6c724b4101a710944">execute</a>(</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;};</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00292"></a><span class="lineno"><a class="line" href="../../df/d06/class_instructions_1_1_double_1_1_load__0.xhtml">  292</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../df/d06/class_instructions_1_1_double_1_1_load__0.xhtml">Load_0</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00294"></a><span class="lineno"><a class="line" href="../../df/d06/class_instructions_1_1_double_1_1_load__0.xhtml#aebc3e5fcbd264d8ab65c5096865219ad">  294</a></span>&#160;  <a class="code" href="../../df/d06/class_instructions_1_1_double_1_1_load__0.xhtml#aebc3e5fcbd264d8ab65c5096865219ad">Load_0</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37af31f8491e9da27f32ba83bb85ffd7586">kDLOAD_0</a>) {}</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../df/d06/class_instructions_1_1_double_1_1_load__0.xhtml#a8fbc1061d384f94dbef7d0b557c17d46">execute</a>(</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;};</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160; </div>
<div class="line"><a name="l00311"></a><span class="lineno"><a class="line" href="../../d4/d7c/class_instructions_1_1_double_1_1_load__1.xhtml">  311</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d4/d7c/class_instructions_1_1_double_1_1_load__1.xhtml">Load_1</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00313"></a><span class="lineno"><a class="line" href="../../d4/d7c/class_instructions_1_1_double_1_1_load__1.xhtml#ac01a23e55096d03c1c8563bf32e81bb5">  313</a></span>&#160;  <a class="code" href="../../d4/d7c/class_instructions_1_1_double_1_1_load__1.xhtml#ac01a23e55096d03c1c8563bf32e81bb5">Load_1</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37af7fb2b13ee177706888491590b623aa0">kDLOAD_1</a>) {}</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d4/d7c/class_instructions_1_1_double_1_1_load__1.xhtml#ad1f5d6da87b42f6ad18ad9f2aa01dc22">execute</a>(</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;};</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160; </div>
<div class="line"><a name="l00330"></a><span class="lineno"><a class="line" href="../../d1/d79/class_instructions_1_1_double_1_1_load__2.xhtml">  330</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d1/d79/class_instructions_1_1_double_1_1_load__2.xhtml">Load_2</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00332"></a><span class="lineno"><a class="line" href="../../d1/d79/class_instructions_1_1_double_1_1_load__2.xhtml#afa472be1027ef8bc55397067a7ef49a9">  332</a></span>&#160;  <a class="code" href="../../d1/d79/class_instructions_1_1_double_1_1_load__2.xhtml#afa472be1027ef8bc55397067a7ef49a9">Load_2</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37af9edaa152e8798b2e5a44b55d879fced">kDLOAD_2</a>) {}</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d1/d79/class_instructions_1_1_double_1_1_load__2.xhtml#a267e1c07a229735569c54cffb7407500">execute</a>(</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;};</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160; </div>
<div class="line"><a name="l00349"></a><span class="lineno"><a class="line" href="../../de/da5/class_instructions_1_1_double_1_1_load__3.xhtml">  349</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../de/da5/class_instructions_1_1_double_1_1_load__3.xhtml">Load_3</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00351"></a><span class="lineno"><a class="line" href="../../de/da5/class_instructions_1_1_double_1_1_load__3.xhtml#a44b4852cdd78a4a5a8d84e86353375f5">  351</a></span>&#160;  <a class="code" href="../../de/da5/class_instructions_1_1_double_1_1_load__3.xhtml#a44b4852cdd78a4a5a8d84e86353375f5">Load_3</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37af8477611860f4f1d581d4a495108d197">kDLOAD_3</a>) {}</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../de/da5/class_instructions_1_1_double_1_1_load__3.xhtml#ae1956c12b966610c1bb1f97905663d8e">execute</a>(</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;};</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160; </div>
<div class="line"><a name="l00368"></a><span class="lineno"><a class="line" href="../../d5/dc5/class_instructions_1_1_double_1_1_mul.xhtml">  368</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d5/dc5/class_instructions_1_1_double_1_1_mul.xhtml">Mul</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00370"></a><span class="lineno"><a class="line" href="../../d5/dc5/class_instructions_1_1_double_1_1_mul.xhtml#a647128c2cae364331bfd855982b8a1b9">  370</a></span>&#160;  <a class="code" href="../../d5/dc5/class_instructions_1_1_double_1_1_mul.xhtml#a647128c2cae364331bfd855982b8a1b9">Mul</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a49ed9fb2093b6f115f5b94ffaa6cc636">kDMUL</a>) {}</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d5/dc5/class_instructions_1_1_double_1_1_mul.xhtml#a4d36d3701831b2f319060a3f4a123e26">execute</a>(</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;};</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160; </div>
<div class="line"><a name="l00387"></a><span class="lineno"><a class="line" href="../../da/d4a/class_instructions_1_1_double_1_1_neg.xhtml">  387</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../da/d4a/class_instructions_1_1_double_1_1_neg.xhtml">Neg</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00389"></a><span class="lineno"><a class="line" href="../../da/d4a/class_instructions_1_1_double_1_1_neg.xhtml#ab7b2cd3f5bedf8d97a7eb6f5f73c10c1">  389</a></span>&#160;  <a class="code" href="../../da/d4a/class_instructions_1_1_double_1_1_neg.xhtml#ab7b2cd3f5bedf8d97a7eb6f5f73c10c1">Neg</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a6eb46048a720508bba321e92c3bbc215">kDNEG</a>) {}</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../da/d4a/class_instructions_1_1_double_1_1_neg.xhtml#ada70658665e2070f9f0bac23b36a6b5a">execute</a>(</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;};</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160; </div>
<div class="line"><a name="l00406"></a><span class="lineno"><a class="line" href="../../d5/d0f/class_instructions_1_1_double_1_1_rem.xhtml">  406</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d5/d0f/class_instructions_1_1_double_1_1_rem.xhtml">Rem</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00408"></a><span class="lineno"><a class="line" href="../../d5/d0f/class_instructions_1_1_double_1_1_rem.xhtml#ad83169ffec75c8be12aa460e9f108c23">  408</a></span>&#160;  <a class="code" href="../../d5/d0f/class_instructions_1_1_double_1_1_rem.xhtml#ad83169ffec75c8be12aa460e9f108c23">Rem</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37ab75377f50a2a7361c2c39e9295bcf418">kDREM</a>) {}</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d5/d0f/class_instructions_1_1_double_1_1_rem.xhtml#a6b75c5c62c59b82422e71357af15586d">execute</a>(</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;};</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160; </div>
<div class="line"><a name="l00425"></a><span class="lineno"><a class="line" href="../../d3/dd5/class_instructions_1_1_double_1_1_return.xhtml">  425</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d3/dd5/class_instructions_1_1_double_1_1_return.xhtml">Return</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00427"></a><span class="lineno"><a class="line" href="../../d3/dd5/class_instructions_1_1_double_1_1_return.xhtml#a86d269d22ad09ef3cbb7ad0cd2af6f97">  427</a></span>&#160;  <a class="code" href="../../d3/dd5/class_instructions_1_1_double_1_1_return.xhtml#a86d269d22ad09ef3cbb7ad0cd2af6f97">Return</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37ae13be1a479d52a1894e76c2ca6d46558">kDRETURN</a>) {}</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d3/dd5/class_instructions_1_1_double_1_1_return.xhtml#a6e0e6f9471e5a069eed97f8863271d0b">execute</a>(</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;};</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160; </div>
<div class="line"><a name="l00444"></a><span class="lineno"><a class="line" href="../../d3/d3e/class_instructions_1_1_double_1_1_store.xhtml">  444</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d3/d3e/class_instructions_1_1_double_1_1_store.xhtml">Store</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00446"></a><span class="lineno"><a class="line" href="../../d3/d3e/class_instructions_1_1_double_1_1_store.xhtml#a5d69f915ca3da10211aca3dc18a016ab">  446</a></span>&#160;  <a class="code" href="../../d3/d3e/class_instructions_1_1_double_1_1_store.xhtml#a5d69f915ca3da10211aca3dc18a016ab">Store</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37ab67acf419a28fa93bf4a852362b91089">kDSTORE</a>) {}</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160; </div>
<div class="line"><a name="l00448"></a><span class="lineno"><a class="line" href="../../d3/d3e/class_instructions_1_1_double_1_1_store.xhtml#ab8702c93434e8fe36be00a7dfdaa51b5">  448</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d3/d3e/class_instructions_1_1_double_1_1_store.xhtml#ab8702c93434e8fe36be00a7dfdaa51b5">toBytecode</a>(</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="keywordflow">if</span> (wide) {</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;      int16_t index = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;      (*ss) &lt;&lt; index;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;      *delta_code = 2;</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> index = *++*code_it;</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;      (*ss) &lt;&lt; <span class="keywordtype">int</span>{index};</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;      *delta_code = 1;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    }</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    (*ss) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;  }</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160; </div>
<div class="line"><a name="l00466"></a><span class="lineno"><a class="line" href="../../d3/d3e/class_instructions_1_1_double_1_1_store.xhtml#a52498a5224fe484bf9a30b4bb0e82154">  466</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d3/d3e/class_instructions_1_1_double_1_1_store.xhtml#a52498a5224fe484bf9a30b4bb0e82154">toBytecode_json</a>(</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keywordflow">if</span> (wide) {</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;      int16_t index = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;      *delta_code = 2;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;      <span class="keywordflow">return</span> {<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(index)};</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    }</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> index = *++*code_it;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    *delta_code = 1;</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="keywordflow">return</span> {<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(<span class="keywordtype">int</span>{index})};</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;  }</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d3/d3e/class_instructions_1_1_double_1_1_store.xhtml#a85b920eaef622bbade83958d48288c7e">execute</a>(</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;};</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160; </div>
<div class="line"><a name="l00494"></a><span class="lineno"><a class="line" href="../../d8/d92/class_instructions_1_1_double_1_1_store__0.xhtml">  494</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d8/d92/class_instructions_1_1_double_1_1_store__0.xhtml">Store_0</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00496"></a><span class="lineno"><a class="line" href="../../d8/d92/class_instructions_1_1_double_1_1_store__0.xhtml#ac4da430424125ccf306695a79085651b">  496</a></span>&#160;  <a class="code" href="../../d8/d92/class_instructions_1_1_double_1_1_store__0.xhtml#ac4da430424125ccf306695a79085651b">Store_0</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37aca10749428ded814abd9c014ba6de0e1">kDSTORE_0</a>) {}</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d8/d92/class_instructions_1_1_double_1_1_store__0.xhtml#aea197c0b1de0103efa4946b6eab1604c">execute</a>(</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;};</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160; </div>
<div class="line"><a name="l00513"></a><span class="lineno"><a class="line" href="../../df/d7e/class_instructions_1_1_double_1_1_store__1.xhtml">  513</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../df/d7e/class_instructions_1_1_double_1_1_store__1.xhtml">Store_1</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00515"></a><span class="lineno"><a class="line" href="../../df/d7e/class_instructions_1_1_double_1_1_store__1.xhtml#a089e6cfbaa60879fee0a12586e29647f">  515</a></span>&#160;  <a class="code" href="../../df/d7e/class_instructions_1_1_double_1_1_store__1.xhtml#a089e6cfbaa60879fee0a12586e29647f">Store_1</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37af3f4a6fd5be1095fde7e0df4d8a9e8fc">kDSTORE_1</a>) {}</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../df/d7e/class_instructions_1_1_double_1_1_store__1.xhtml#a2725fa5e3d7517df994c5c710a2fb3ba">execute</a>(</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;};</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160; </div>
<div class="line"><a name="l00532"></a><span class="lineno"><a class="line" href="../../d2/d05/class_instructions_1_1_double_1_1_store__2.xhtml">  532</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d2/d05/class_instructions_1_1_double_1_1_store__2.xhtml">Store_2</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00534"></a><span class="lineno"><a class="line" href="../../d2/d05/class_instructions_1_1_double_1_1_store__2.xhtml#af7b574b56fc53696771a065f874f4037">  534</a></span>&#160;  <a class="code" href="../../d2/d05/class_instructions_1_1_double_1_1_store__2.xhtml#af7b574b56fc53696771a065f874f4037">Store_2</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a8c9277ea8e22cab3e1b02081dc74a1a6">kDSTORE_2</a>) {}</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d2/d05/class_instructions_1_1_double_1_1_store__2.xhtml#a703c2ce79cf6b43fd761accae7aae5aa">execute</a>(</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;};</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160; </div>
<div class="line"><a name="l00551"></a><span class="lineno"><a class="line" href="../../dd/d67/class_instructions_1_1_double_1_1_store__3.xhtml">  551</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../dd/d67/class_instructions_1_1_double_1_1_store__3.xhtml">Store_3</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00553"></a><span class="lineno"><a class="line" href="../../dd/d67/class_instructions_1_1_double_1_1_store__3.xhtml#a28a03ff11fcf576e0fcd8e315839303d">  553</a></span>&#160;  <a class="code" href="../../dd/d67/class_instructions_1_1_double_1_1_store__3.xhtml#a28a03ff11fcf576e0fcd8e315839303d">Store_3</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a18fdd415e14393591360ba2b0942f2f2">kDSTORE_3</a>) {}</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../dd/d67/class_instructions_1_1_double_1_1_store__3.xhtml#afb142fc7f3aa7280c982cc303962097d">execute</a>(</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;};</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160; </div>
<div class="line"><a name="l00570"></a><span class="lineno"><a class="line" href="../../d8/d08/class_instructions_1_1_double_1_1_sub.xhtml">  570</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d8/d08/class_instructions_1_1_double_1_1_sub.xhtml">Sub</a> : <span class="keyword">public</span> <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a> {</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00572"></a><span class="lineno"><a class="line" href="../../d8/d08/class_instructions_1_1_double_1_1_sub.xhtml#a93bcb97693d14946727c0f9e0d9a8897">  572</a></span>&#160;  <a class="code" href="../../d8/d08/class_instructions_1_1_double_1_1_sub.xhtml#a93bcb97693d14946727c0f9e0d9a8897">Sub</a>() : <a class="code" href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">BaseDouble</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a06437c33716981e31076dc7877b064a8">kDSUB</a>) {}</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d8/d08/class_instructions_1_1_double_1_1_sub.xhtml#a482dc01393278c948f3abc1d3450db44">execute</a>(</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;};</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;}  <span class="comment">// namespace Double</span></div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;}  <span class="comment">// namespace Instructions</span></div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160; </div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;<span class="preprocessor">#endif  // INCLUDE_INSTRUCTIONS_INSTRUCTION_SET_DOUBLE_H_</span></div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="aclass_instructions_1_1_double_1_1_compare_less_xhtml_ae703f023c2cd14b930b4544da43a2b48"><div class="ttname"><a href="../../da/d92/class_instructions_1_1_double_1_1_compare_less.xhtml#ae703f023c2cd14b930b4544da43a2b48">Instructions::Double::CompareLess::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Compare double (val1 &lt; val2)</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store__0_xhtml_ac4da430424125ccf306695a79085651b"><div class="ttname"><a href="../../d8/d92/class_instructions_1_1_double_1_1_store__0.xhtml#ac4da430424125ccf306695a79085651b">Instructions::Double::Store_0::Store_0</a></div><div class="ttdeci">Store_0()</div><div class="ttdef"><b>Definition:</b> double.h:496</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load_xhtml"><div class="ttname"><a href="../../d8/d24/class_instructions_1_1_double_1_1_load.xhtml">Instructions::Double::Load</a></div><div class="ttdef"><b>Definition:</b> double.h:242</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_sub_xhtml_a482dc01393278c948f3abc1d3450db44"><div class="ttname"><a href="../../d8/d08/class_instructions_1_1_double_1_1_sub.xhtml#a482dc01393278c948f3abc1d3450db44">Instructions::Double::Sub::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Subtract double.</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load__0_xhtml_a8fbc1061d384f94dbef7d0b557c17d46"><div class="ttname"><a href="../../df/d06/class_instructions_1_1_double_1_1_load__0.xhtml#a8fbc1061d384f94dbef7d0b557c17d46">Instructions::Double::Load_0::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Load double from local variable.</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store_xhtml_a85b920eaef622bbade83958d48288c7e"><div class="ttname"><a href="../../d3/d3e/class_instructions_1_1_double_1_1_store.xhtml#a85b920eaef622bbade83958d48288c7e">Instructions::Double::Store::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Store double into local variable.</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_compare_greater_xhtml_afc024af48d1ebacd8ddcdaef06914e84"><div class="ttname"><a href="../../da/dbf/class_instructions_1_1_double_1_1_compare_greater.xhtml#afc024af48d1ebacd8ddcdaef06914e84">Instructions::Double::CompareGreater::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Compare double (val1 &gt; val2)</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_add_xhtml_aa0985d0496620d5471529066cde66322"><div class="ttname"><a href="../../d0/d41/class_instructions_1_1_double_1_1_add.xhtml#aa0985d0496620d5471529066cde66322">Instructions::Double::Add::Add</a></div><div class="ttdeci">Add()</div><div class="ttdef"><b>Definition:</b> double.h:92</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_rem_xhtml"><div class="ttname"><a href="../../d5/d0f/class_instructions_1_1_double_1_1_rem.xhtml">Instructions::Double::Rem</a></div><div class="ttdef"><b>Definition:</b> double.h:406</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store_into_array_xhtml_a6c0ef95782f710d84fabb85290726487"><div class="ttname"><a href="../../da/db9/class_instructions_1_1_double_1_1_store_into_array.xhtml#a6c0ef95782f710d84fabb85290726487">Instructions::Double::StoreIntoArray::StoreIntoArray</a></div><div class="ttdeci">StoreIntoArray()</div><div class="ttdef"><b>Definition:</b> double.h:130</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load__2_xhtml"><div class="ttname"><a href="../../d1/d79/class_instructions_1_1_double_1_1_load__2.xhtml">Instructions::Double::Load_2</a></div><div class="ttdef"><b>Definition:</b> double.h:330</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_return_xhtml_a86d269d22ad09ef3cbb7ad0cd2af6f97"><div class="ttname"><a href="../../d3/dd5/class_instructions_1_1_double_1_1_return.xhtml#a86d269d22ad09ef3cbb7ad0cd2af6f97">Instructions::Double::Return::Return</a></div><div class="ttdeci">Return()</div><div class="ttdef"><b>Definition:</b> double.h:427</div></div>
<div class="ttc" id="aclass_instructions_1_1_instruction_xhtml"><div class="ttname"><a href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instructions::Instruction</a></div><div class="ttdef"><b>Definition:</b> base.h:15</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37ae13be1a479d52a1894e76c2ca6d46558"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37ae13be1a479d52a1894e76c2ca6d46558">Instructions::Opcodes::kDRETURN</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:54</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37af3f4a6fd5be1095fde7e0df4d8a9e8fc"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37af3f4a6fd5be1095fde7e0df4d8a9e8fc">Instructions::Opcodes::kDSTORE_1</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:57</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_mul_xhtml_a4d36d3701831b2f319060a3f4a123e26"><div class="ttname"><a href="../../d5/dc5/class_instructions_1_1_double_1_1_mul.xhtml#a4d36d3701831b2f319060a3f4a123e26">Instructions::Double::Mul::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Multiply double.</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_return_xhtml"><div class="ttname"><a href="../../d3/dd5/class_instructions_1_1_double_1_1_return.xhtml">Instructions::Double::Return</a></div><div class="ttdef"><b>Definition:</b> double.h:425</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store_into_array_xhtml"><div class="ttname"><a href="../../da/db9/class_instructions_1_1_double_1_1_store_into_array.xhtml">Instructions::Double::StoreIntoArray</a></div><div class="ttdef"><b>Definition:</b> double.h:128</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store__2_xhtml"><div class="ttname"><a href="../../d2/d05/class_instructions_1_1_double_1_1_store__2.xhtml">Instructions::Double::Store_2</a></div><div class="ttdef"><b>Definition:</b> double.h:532</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store__3_xhtml_a28a03ff11fcf576e0fcd8e315839303d"><div class="ttname"><a href="../../dd/d67/class_instructions_1_1_double_1_1_store__3.xhtml#a28a03ff11fcf576e0fcd8e315839303d">Instructions::Double::Store_3::Store_3</a></div><div class="ttdeci">Store_3()</div><div class="ttdef"><b>Definition:</b> double.h:553</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a9facded561e7915556e39520766139e3"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a9facded561e7915556e39520766139e3">Instructions::Opcodes::kDCONST_0</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:43</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load__0_xhtml_aebc3e5fcbd264d8ab65c5096865219ad"><div class="ttname"><a href="../../df/d06/class_instructions_1_1_double_1_1_load__0.xhtml#aebc3e5fcbd264d8ab65c5096865219ad">Instructions::Double::Load_0::Load_0</a></div><div class="ttdeci">Load_0()</div><div class="ttdef"><b>Definition:</b> double.h:294</div></div>
<div class="ttc" id="abase_8h_xhtml"><div class="ttname"><a href="../../d3/d5a/base_8h.xhtml">base.h</a></div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load_from_array_xhtml"><div class="ttname"><a href="../../db/dcc/class_instructions_1_1_double_1_1_load_from_array.xhtml">Instructions::Double::LoadFromArray</a></div><div class="ttdef"><b>Definition:</b> double.h:109</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_to_float_xhtml_ab39a9e54c707d5e0baab54a0dc713748"><div class="ttname"><a href="../../d3/d91/class_instructions_1_1_double_1_1_to_float.xhtml#ab39a9e54c707d5e0baab54a0dc713748">Instructions::Double::ToFloat::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Convert double to float.</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load_from_array_xhtml_ac100ebd930b4877fd6d17cddc36a75d2"><div class="ttname"><a href="../../db/dcc/class_instructions_1_1_double_1_1_load_from_array.xhtml#ac100ebd930b4877fd6d17cddc36a75d2">Instructions::Double::LoadFromArray::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Load double from array.</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37afa3c31e35c437b759fc9ebee1b5823f4"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37afa3c31e35c437b759fc9ebee1b5823f4">Instructions::Opcodes::kDCONST_1</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:44</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load_from_array_xhtml_a2835cd8f5af6043dd80932d36234118e"><div class="ttname"><a href="../../db/dcc/class_instructions_1_1_double_1_1_load_from_array.xhtml#a2835cd8f5af6043dd80932d36234118e">Instructions::Double::LoadFromArray::LoadFromArray</a></div><div class="ttdeci">LoadFromArray()</div><div class="ttdef"><b>Definition:</b> double.h:111</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_rem_xhtml_a6b75c5c62c59b82422e71357af15586d"><div class="ttname"><a href="../../d5/d0f/class_instructions_1_1_double_1_1_rem.xhtml#a6b75c5c62c59b82422e71357af15586d">Instructions::Double::Rem::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Remainder double.</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store_xhtml_ab8702c93434e8fe36be00a7dfdaa51b5"><div class="ttname"><a href="../../d3/d3e/class_instructions_1_1_double_1_1_store.xhtml#ab8702c93434e8fe36be00a7dfdaa51b5">Instructions::Double::Store::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> double.h:448</div></div>
<div class="ttc" id="astring_8h_xhtml"><div class="ttname"><a href="../../da/d66/string_8h.xhtml">string.h</a></div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store__0_xhtml"><div class="ttname"><a href="../../d8/d92/class_instructions_1_1_double_1_1_store__0.xhtml">Instructions::Double::Store_0</a></div><div class="ttdef"><b>Definition:</b> double.h:494</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_neg_xhtml_ada70658665e2070f9f0bac23b36a6b5a"><div class="ttname"><a href="../../da/d4a/class_instructions_1_1_double_1_1_neg.xhtml#ada70658665e2070f9f0bac23b36a6b5a">Instructions::Double::Neg::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Negate double.</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_sub_xhtml"><div class="ttname"><a href="../../d8/d08/class_instructions_1_1_double_1_1_sub.xhtml">Instructions::Double::Sub</a></div><div class="ttdef"><b>Definition:</b> double.h:570</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37adc075a5e67ea9f428d3ce517d4fc7f4b"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37adc075a5e67ea9f428d3ce517d4fc7f4b">Instructions::Opcodes::kD2I</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:36</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a576463bcd6995ac79062ce151bd92507"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a576463bcd6995ac79062ce151bd92507">Instructions::Opcodes::kD2F</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:35</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_ab765ddcb61c4d60f2647154d87f97ae2"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Instructions::Opcodes::getMnemonic</a></div><div class="ttdeci">std::string getMnemonic(const Utils::Types::u1 &amp;opcode)</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_const__0_xhtml_aa91ae75e8b11abbd8137c6ba64b3097f"><div class="ttname"><a href="../../d1/d22/class_instructions_1_1_double_1_1_const__0.xhtml#aa91ae75e8b11abbd8137c6ba64b3097f">Instructions::Double::Const_0::Const_0</a></div><div class="ttdeci">Const_0()</div><div class="ttdef"><b>Definition:</b> double.h:187</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store_xhtml"><div class="ttname"><a href="../../d3/d3e/class_instructions_1_1_double_1_1_store.xhtml">Instructions::Double::Store</a></div><div class="ttdef"><b>Definition:</b> double.h:444</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_compare_greater_xhtml"><div class="ttname"><a href="../../da/dbf/class_instructions_1_1_double_1_1_compare_greater.xhtml">Instructions::Double::CompareGreater</a></div><div class="ttdef"><b>Definition:</b> double.h:147</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store_xhtml_a5d69f915ca3da10211aca3dc18a016ab"><div class="ttname"><a href="../../d3/d3e/class_instructions_1_1_double_1_1_store.xhtml#a5d69f915ca3da10211aca3dc18a016ab">Instructions::Double::Store::Store</a></div><div class="ttdeci">Store()</div><div class="ttdef"><b>Definition:</b> double.h:446</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load__3_xhtml_a44b4852cdd78a4a5a8d84e86353375f5"><div class="ttname"><a href="../../de/da5/class_instructions_1_1_double_1_1_load__3.xhtml#a44b4852cdd78a4a5a8d84e86353375f5">Instructions::Double::Load_3::Load_3</a></div><div class="ttdeci">Load_3()</div><div class="ttdef"><b>Definition:</b> double.h:351</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_to_integer_xhtml_a1d66c4748e260e84f6cfa7aebc6e9cad"><div class="ttname"><a href="../../d2/d43/class_instructions_1_1_double_1_1_to_integer.xhtml#a1d66c4748e260e84f6cfa7aebc6e9cad">Instructions::Double::ToInteger::ToInteger</a></div><div class="ttdeci">ToInteger()</div><div class="ttdef"><b>Definition:</b> double.h:54</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_to_integer_xhtml"><div class="ttname"><a href="../../d2/d43/class_instructions_1_1_double_1_1_to_integer.xhtml">Instructions::Double::ToInteger</a></div><div class="ttdef"><b>Definition:</b> double.h:52</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store__0_xhtml_aea197c0b1de0103efa4946b6eab1604c"><div class="ttname"><a href="../../d8/d92/class_instructions_1_1_double_1_1_store__0.xhtml#aea197c0b1de0103efa4946b6eab1604c">Instructions::Double::Store_0::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Store double into local variable.</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37add8caac3e988e9bc4a458aba64c9506e"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37add8caac3e988e9bc4a458aba64c9506e">Instructions::Opcodes::kD2L</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:37</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_base_double_xhtml_a5c5928de111d9ca4c77f32a39fed0dea"><div class="ttname"><a href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml#a5c5928de111d9ca4c77f32a39fed0dea">Instructions::Double::BaseDouble::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> double.h:17</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load_xhtml_acb18445350f21454396f29b5b72c8bec"><div class="ttname"><a href="../../d8/d24/class_instructions_1_1_double_1_1_load.xhtml#acb18445350f21454396f29b5b72c8bec">Instructions::Double::Load::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> double.h:246</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store__1_xhtml_a089e6cfbaa60879fee0a12586e29647f"><div class="ttname"><a href="../../df/d7e/class_instructions_1_1_double_1_1_store__1.xhtml#a089e6cfbaa60879fee0a12586e29647f">Instructions::Double::Store_1::Store_1</a></div><div class="ttdeci">Store_1()</div><div class="ttdef"><b>Definition:</b> double.h:515</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a6eb46048a720508bba321e92c3bbc215"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a6eb46048a720508bba321e92c3bbc215">Instructions::Opcodes::kDNEG</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:52</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_to_integer_xhtml_a69d7bf3a3b2f1647c1119d69c8d2e688"><div class="ttname"><a href="../../d2/d43/class_instructions_1_1_double_1_1_to_integer.xhtml#a69d7bf3a3b2f1647c1119d69c8d2e688">Instructions::Double::ToInteger::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Convert double to integer.</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store_xhtml_a52498a5224fe484bf9a30b4bb0e82154"><div class="ttname"><a href="../../d3/d3e/class_instructions_1_1_double_1_1_store.xhtml#a52498a5224fe484bf9a30b4bb0e82154">Instructions::Double::Store::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> double.h:466</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_const__1_xhtml_ab5d98779be70e4201e2aac399727f4ee"><div class="ttname"><a href="../../d3/d2a/class_instructions_1_1_double_1_1_const__1.xhtml#ab5d98779be70e4201e2aac399727f4ee">Instructions::Double::Const_1::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Push double.</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37af9edaa152e8798b2e5a44b55d879fced"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37af9edaa152e8798b2e5a44b55d879fced">Instructions::Opcodes::kDLOAD_2</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:49</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store_into_array_xhtml_aca3424bea27f19cf565434304ffb949c"><div class="ttname"><a href="../../da/db9/class_instructions_1_1_double_1_1_store_into_array.xhtml#aca3424bea27f19cf565434304ffb949c">Instructions::Double::StoreIntoArray::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Store double into local variable.</div></div>
<div class="ttc" id="aclass_instructions_1_1_instruction_xhtml_abce4218201520f9ca8880bda8ab78e40"><div class="ttname"><a href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">Instructions::Instruction::opcode</a></div><div class="ttdeci">const Utils::Types::u1 opcode</div><div class="ttdef"><b>Definition:</b> base.h:35</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_base_double_xhtml_aaa442a78c1ae4b42a7ba1b1452b142da"><div class="ttname"><a href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml#aaa442a78c1ae4b42a7ba1b1452b142da">Instructions::Double::BaseDouble::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> double.h:25</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load__2_xhtml_a267e1c07a229735569c54cffb7407500"><div class="ttname"><a href="../../d1/d79/class_instructions_1_1_double_1_1_load__2.xhtml#a267e1c07a229735569c54cffb7407500">Instructions::Double::Load_2::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Load double from local variable.</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_const__0_xhtml"><div class="ttname"><a href="../../d1/d22/class_instructions_1_1_double_1_1_const__0.xhtml">Instructions::Double::Const_0</a></div><div class="ttdef"><b>Definition:</b> double.h:185</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37af8477611860f4f1d581d4a495108d197"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37af8477611860f4f1d581d4a495108d197">Instructions::Opcodes::kDLOAD_3</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:50</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load__1_xhtml"><div class="ttname"><a href="../../d4/d7c/class_instructions_1_1_double_1_1_load__1.xhtml">Instructions::Double::Load_1</a></div><div class="ttdef"><b>Definition:</b> double.h:311</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store__3_xhtml_afb142fc7f3aa7280c982cc303962097d"><div class="ttname"><a href="../../dd/d67/class_instructions_1_1_double_1_1_store__3.xhtml#afb142fc7f3aa7280c982cc303962097d">Instructions::Double::Store_3::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Store double into local variable.</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store__1_xhtml"><div class="ttname"><a href="../../df/d7e/class_instructions_1_1_double_1_1_store__1.xhtml">Instructions::Double::Store_1</a></div><div class="ttdef"><b>Definition:</b> double.h:513</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37ad68e4452b50aec5eef746a1fc99ab049"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37ad68e4452b50aec5eef746a1fc99ab049">Instructions::Opcodes::kDALOAD</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:39</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_div_xhtml"><div class="ttname"><a href="../../da/df9/class_instructions_1_1_double_1_1_div.xhtml">Instructions::Double::Div</a></div><div class="ttdef"><b>Definition:</b> double.h:223</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_to_long_xhtml_a26f041882099003c70ba7051f49eaf5d"><div class="ttname"><a href="../../d1/da8/class_instructions_1_1_double_1_1_to_long.xhtml#a26f041882099003c70ba7051f49eaf5d">Instructions::Double::ToLong::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Convert double to long.</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_div_xhtml_aa8eaa77c934a2be1198198e244f320ae"><div class="ttname"><a href="../../da/df9/class_instructions_1_1_double_1_1_div.xhtml#aa8eaa77c934a2be1198198e244f320ae">Instructions::Double::Div::Div</a></div><div class="ttdeci">Div()</div><div class="ttdef"><b>Definition:</b> double.h:225</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store__1_xhtml_a2725fa5e3d7517df994c5c710a2fb3ba"><div class="ttname"><a href="../../df/d7e/class_instructions_1_1_double_1_1_store__1.xhtml#a2725fa5e3d7517df994c5c710a2fb3ba">Instructions::Double::Store_1::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Store double into local variable.</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a18fdd415e14393591360ba2b0942f2f2"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a18fdd415e14393591360ba2b0942f2f2">Instructions::Opcodes::kDSTORE_3</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:59</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_add_xhtml"><div class="ttname"><a href="../../d0/d41/class_instructions_1_1_double_1_1_add.xhtml">Instructions::Double::Add</a></div><div class="ttdef"><b>Definition:</b> double.h:90</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a2130c65eaf7ca0cb0b9fe8e70938321c"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a2130c65eaf7ca0cb0b9fe8e70938321c">Instructions::Opcodes::kDASTORE</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:40</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store__2_xhtml_af7b574b56fc53696771a065f874f4037"><div class="ttname"><a href="../../d2/d05/class_instructions_1_1_double_1_1_store__2.xhtml#af7b574b56fc53696771a065f874f4037">Instructions::Double::Store_2::Store_2</a></div><div class="ttdeci">Store_2()</div><div class="ttdef"><b>Definition:</b> double.h:534</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_compare_less_xhtml_a359a7ca456f3a72c6bf46f1be6a6d83c"><div class="ttname"><a href="../../da/d92/class_instructions_1_1_double_1_1_compare_less.xhtml#a359a7ca456f3a72c6bf46f1be6a6d83c">Instructions::Double::CompareLess::CompareLess</a></div><div class="ttdeci">CompareLess()</div><div class="ttdef"><b>Definition:</b> double.h:168</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load__3_xhtml"><div class="ttname"><a href="../../de/da5/class_instructions_1_1_double_1_1_load__3.xhtml">Instructions::Double::Load_3</a></div><div class="ttdef"><b>Definition:</b> double.h:349</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store__2_xhtml_a703c2ce79cf6b43fd761accae7aae5aa"><div class="ttname"><a href="../../d2/d05/class_instructions_1_1_double_1_1_store__2.xhtml#a703c2ce79cf6b43fd761accae7aae5aa">Instructions::Double::Store_2::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Store double into local variable.</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_neg_xhtml"><div class="ttname"><a href="../../da/d4a/class_instructions_1_1_double_1_1_neg.xhtml">Instructions::Double::Neg</a></div><div class="ttdef"><b>Definition:</b> double.h:387</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a6ef14ec69cfed2d95e3280d8804a4bfb"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a6ef14ec69cfed2d95e3280d8804a4bfb">Instructions::Opcodes::kDCMPG</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:41</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_mul_xhtml_a647128c2cae364331bfd855982b8a1b9"><div class="ttname"><a href="../../d5/dc5/class_instructions_1_1_double_1_1_mul.xhtml#a647128c2cae364331bfd855982b8a1b9">Instructions::Double::Mul::Mul</a></div><div class="ttdeci">Mul()</div><div class="ttdef"><b>Definition:</b> double.h:370</div></div>
<div class="ttc" id="aopcodes_8h_xhtml"><div class="ttname"><a href="../../d3/de6/opcodes_8h.xhtml">opcodes.h</a></div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_return_xhtml_a6e0e6f9471e5a069eed97f8863271d0b"><div class="ttname"><a href="../../d3/dd5/class_instructions_1_1_double_1_1_return.xhtml#a6e0e6f9471e5a069eed97f8863271d0b">Instructions::Double::Return::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Return double from method.</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_mul_xhtml"><div class="ttname"><a href="../../d5/dc5/class_instructions_1_1_double_1_1_mul.xhtml">Instructions::Double::Mul</a></div><div class="ttdef"><b>Definition:</b> double.h:368</div></div>
<div class="ttc" id="anamespace_instructions_xhtml"><div class="ttname"><a href="../../da/d11/namespace_instructions.xhtml">Instructions</a></div><div class="ttdef"><b>Definition:</b> execution_engine.h:12</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_compare_greater_xhtml_a9002bff8436073ff8b1dec16f6002335"><div class="ttname"><a href="../../da/dbf/class_instructions_1_1_double_1_1_compare_greater.xhtml#a9002bff8436073ff8b1dec16f6002335">Instructions::Double::CompareGreater::CompareGreater</a></div><div class="ttdeci">CompareGreater()</div><div class="ttdef"><b>Definition:</b> double.h:149</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37ab67acf419a28fa93bf4a852362b91089"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37ab67acf419a28fa93bf4a852362b91089">Instructions::Opcodes::kDSTORE</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:55</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load__1_xhtml_ad1f5d6da87b42f6ad18ad9f2aa01dc22"><div class="ttname"><a href="../../d4/d7c/class_instructions_1_1_double_1_1_load__1.xhtml#ad1f5d6da87b42f6ad18ad9f2aa01dc22">Instructions::Double::Load_1::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Load double from local variable.</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a49ed9fb2093b6f115f5b94ffaa6cc636"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a49ed9fb2093b6f115f5b94ffaa6cc636">Instructions::Opcodes::kDMUL</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:51</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_const__0_xhtml_aeb3ca557a68d50bd31758d904af3d21d"><div class="ttname"><a href="../../d1/d22/class_instructions_1_1_double_1_1_const__0.xhtml#aeb3ca557a68d50bd31758d904af3d21d">Instructions::Double::Const_0::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Push double.</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a06437c33716981e31076dc7877b064a8"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a06437c33716981e31076dc7877b064a8">Instructions::Opcodes::kDSUB</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:60</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_const__1_xhtml_ad3a44d3cd719af749fb60c306098a829"><div class="ttname"><a href="../../d3/d2a/class_instructions_1_1_double_1_1_const__1.xhtml#ad3a44d3cd719af749fb60c306098a829">Instructions::Double::Const_1::Const_1</a></div><div class="ttdeci">Const_1()</div><div class="ttdef"><b>Definition:</b> double.h:206</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37af6312f2a5a0e7eb7e4e9453a6121c753"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37af6312f2a5a0e7eb7e4e9453a6121c753">Instructions::Opcodes::kDLOAD</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:46</div></div>
<div class="ttc" id="anamespace_utils_1_1_types_xhtml_a987afa1d65d5f43c5e379d4cdafacd44"><div class="ttname"><a href="../../d0/d94/namespace_utils_1_1_types.xhtml#a987afa1d65d5f43c5e379d4cdafacd44">Utils::Types::u1</a></div><div class="ttdeci">std::uint8_t u1</div><div class="ttdef"><b>Definition:</b> types.h:8</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_to_float_xhtml"><div class="ttname"><a href="../../d3/d91/class_instructions_1_1_double_1_1_to_float.xhtml">Instructions::Double::ToFloat</a></div><div class="ttdef"><b>Definition:</b> double.h:33</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37aca10749428ded814abd9c014ba6de0e1"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37aca10749428ded814abd9c014ba6de0e1">Instructions::Opcodes::kDSTORE_0</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:56</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37af7fb2b13ee177706888491590b623aa0"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37af7fb2b13ee177706888491590b623aa0">Instructions::Opcodes::kDLOAD_1</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:48</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a8c9277ea8e22cab3e1b02081dc74a1a6"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a8c9277ea8e22cab3e1b02081dc74a1a6">Instructions::Opcodes::kDSTORE_2</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:58</div></div>
<div class="ttc" id="anamespace_utils_1_1_string_xhtml_aec9a3efb3bd837c1f21fec1ceba1eec9"><div class="ttname"><a href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a></div><div class="ttdeci">std::string toString(const T &amp;num)</div><div class="ttdef"><b>Definition:</b> string.h:21</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37af31f8491e9da27f32ba83bb85ffd7586"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37af31f8491e9da27f32ba83bb85ffd7586">Instructions::Opcodes::kDLOAD_0</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:47</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_rem_xhtml_ad83169ffec75c8be12aa460e9f108c23"><div class="ttname"><a href="../../d5/d0f/class_instructions_1_1_double_1_1_rem.xhtml#ad83169ffec75c8be12aa460e9f108c23">Instructions::Double::Rem::Rem</a></div><div class="ttdeci">Rem()</div><div class="ttdef"><b>Definition:</b> double.h:408</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_compare_less_xhtml"><div class="ttname"><a href="../../da/d92/class_instructions_1_1_double_1_1_compare_less.xhtml">Instructions::Double::CompareLess</a></div><div class="ttdef"><b>Definition:</b> double.h:166</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load__2_xhtml_afa472be1027ef8bc55397067a7ef49a9"><div class="ttname"><a href="../../d1/d79/class_instructions_1_1_double_1_1_load__2.xhtml#afa472be1027ef8bc55397067a7ef49a9">Instructions::Double::Load_2::Load_2</a></div><div class="ttdeci">Load_2()</div><div class="ttdef"><b>Definition:</b> double.h:332</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37ad17528c4289bae7192f478b54d99c6d7"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37ad17528c4289bae7192f478b54d99c6d7">Instructions::Opcodes::kDADD</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:38</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load__3_xhtml_ae1956c12b966610c1bb1f97905663d8e"><div class="ttname"><a href="../../de/da5/class_instructions_1_1_double_1_1_load__3.xhtml#ae1956c12b966610c1bb1f97905663d8e">Instructions::Double::Load_3::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Load double from local variable.</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load_xhtml_a70b00fd7e76c491cdfa730824737a522"><div class="ttname"><a href="../../d8/d24/class_instructions_1_1_double_1_1_load.xhtml#a70b00fd7e76c491cdfa730824737a522">Instructions::Double::Load::Load</a></div><div class="ttdeci">Load()</div><div class="ttdef"><b>Definition:</b> double.h:244</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load_xhtml_a02363aa2fd5626e6c724b4101a710944"><div class="ttname"><a href="../../d8/d24/class_instructions_1_1_double_1_1_load.xhtml#a02363aa2fd5626e6c724b4101a710944">Instructions::Double::Load::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Load double from local variable.</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37ab75377f50a2a7361c2c39e9295bcf418"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37ab75377f50a2a7361c2c39e9295bcf418">Instructions::Opcodes::kDREM</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:53</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_to_long_xhtml"><div class="ttname"><a href="../../d1/da8/class_instructions_1_1_double_1_1_to_long.xhtml">Instructions::Double::ToLong</a></div><div class="ttdef"><b>Definition:</b> double.h:71</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_to_long_xhtml_aac758cde1bdbe5b39cf5410955453baf"><div class="ttname"><a href="../../d1/da8/class_instructions_1_1_double_1_1_to_long.xhtml#aac758cde1bdbe5b39cf5410955453baf">Instructions::Double::ToLong::ToLong</a></div><div class="ttdeci">ToLong()</div><div class="ttdef"><b>Definition:</b> double.h:73</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_store__3_xhtml"><div class="ttname"><a href="../../dd/d67/class_instructions_1_1_double_1_1_store__3.xhtml">Instructions::Double::Store_3</a></div><div class="ttdef"><b>Definition:</b> double.h:551</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_base_double_xhtml"><div class="ttname"><a href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml">Instructions::Double::BaseDouble</a></div><div class="ttdef"><b>Definition:</b> double.h:13</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_sub_xhtml_a93bcb97693d14946727c0f9e0d9a8897"><div class="ttname"><a href="../../d8/d08/class_instructions_1_1_double_1_1_sub.xhtml#a93bcb97693d14946727c0f9e0d9a8897">Instructions::Double::Sub::Sub</a></div><div class="ttdeci">Sub()</div><div class="ttdef"><b>Definition:</b> double.h:572</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_to_float_xhtml_a053d2e1c921c8dffe47063bea05e1fed"><div class="ttname"><a href="../../d3/d91/class_instructions_1_1_double_1_1_to_float.xhtml#a053d2e1c921c8dffe47063bea05e1fed">Instructions::Double::ToFloat::ToFloat</a></div><div class="ttdeci">ToFloat()</div><div class="ttdef"><b>Definition:</b> double.h:35</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_neg_xhtml_ab7b2cd3f5bedf8d97a7eb6f5f73c10c1"><div class="ttname"><a href="../../da/d4a/class_instructions_1_1_double_1_1_neg.xhtml#ab7b2cd3f5bedf8d97a7eb6f5f73c10c1">Instructions::Double::Neg::Neg</a></div><div class="ttdeci">Neg()</div><div class="ttdef"><b>Definition:</b> double.h:389</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_base_double_xhtml_a51c43fae123297a8017873e5923c2f06"><div class="ttname"><a href="../../da/de3/class_instructions_1_1_double_1_1_base_double.xhtml#a51c43fae123297a8017873e5923c2f06">Instructions::Double::BaseDouble::BaseDouble</a></div><div class="ttdeci">BaseDouble(const Utils::Types::u1 &amp;tag)</div><div class="ttdef"><b>Definition:</b> double.h:15</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_add_xhtml_a7201b9a49919585f13e8afb11ce8edc0"><div class="ttname"><a href="../../d0/d41/class_instructions_1_1_double_1_1_add.xhtml#a7201b9a49919585f13e8afb11ce8edc0">Instructions::Double::Add::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Add double.</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_div_xhtml_ae7dfe8140e997670f31970f5511260a2"><div class="ttname"><a href="../../da/df9/class_instructions_1_1_double_1_1_div.xhtml#ae7dfe8140e997670f31970f5511260a2">Instructions::Double::Div::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Divide double.</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_const__1_xhtml"><div class="ttname"><a href="../../d3/d2a/class_instructions_1_1_double_1_1_const__1.xhtml">Instructions::Double::Const_1</a></div><div class="ttdef"><b>Definition:</b> double.h:204</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load__1_xhtml_ac01a23e55096d03c1c8563bf32e81bb5"><div class="ttname"><a href="../../d4/d7c/class_instructions_1_1_double_1_1_load__1.xhtml#ac01a23e55096d03c1c8563bf32e81bb5">Instructions::Double::Load_1::Load_1</a></div><div class="ttdeci">Load_1()</div><div class="ttdef"><b>Definition:</b> double.h:313</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a42601e3631492fbf7df09385427be2b1"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a42601e3631492fbf7df09385427be2b1">Instructions::Opcodes::kDDIV</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:45</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a537428052fbde671183083f303bd139b"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a537428052fbde671183083f303bd139b">Instructions::Opcodes::kDCMPL</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:42</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load__0_xhtml"><div class="ttname"><a href="../../df/d06/class_instructions_1_1_double_1_1_load__0.xhtml">Instructions::Double::Load_0</a></div><div class="ttdef"><b>Definition:</b> double.h:292</div></div>
<div class="ttc" id="aclass_instructions_1_1_double_1_1_load_xhtml_a9d9600a7d5ed7033715d92fd5f78ff06"><div class="ttname"><a href="../../d8/d24/class_instructions_1_1_double_1_1_load.xhtml#a9d9600a7d5ed7033715d92fd5f78ff06">Instructions::Double::Load::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> double.h:264</div></div>
<div class="ttc" id="aclass_memory_areas_1_1_thread_xhtml"><div class="ttname"><a href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a></div><div class="ttdef"><b>Definition:</b> thread.h:9</div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 2 2019 14:03:36 for JVM 8 SB 2019/2 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.16
</small></address>
</body>
</html>
