<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.16"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>JVM 8 SB 2019/2: nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">JVM 8 SB 2019/2
   </div>
   <div id="projectbrief">projeto que visa fazer uma implementação simples da JVM 8</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.16 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../d3/d9b/namespacenlohmann.xhtml">nlohmann</a></li><li class="navelem"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../d7/d87/classnlohmann_1_1basic__json-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>a class to store JSON values  
 <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d3/dd1/nlohmann__json_8hpp_source.xhtml">nlohmann_json.hpp</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="../../closed.png" alt="+"/> Collaboration diagram for nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../de/d90/classnlohmann_1_1basic__json__coll__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">a template for a random access iterator for the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> class  <a href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d60/classnlohmann_1_1basic__json_1_1json__pointer.xhtml">json_pointer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">JSON Pointer.  <a href="../../d4/d60/classnlohmann_1_1basic__json_1_1json__pointer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d8e/classnlohmann_1_1basic__json_1_1json__reverse__iterator.xhtml">json_reverse_iterator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">a template for a reverse iterator class  <a href="../../d1/d8e/classnlohmann_1_1basic__json_1_1json__reverse__iterator.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:aea1c863b719b4ca5b77188c171bbfafe"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1c863b719b4ca5b77188c171bbfafe">parse_event_t</a> : uint8_t { <br />
&#160;&#160;<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1c863b719b4ca5b77188c171bbfafeae73f17027cb0acbb537f29d0a6944b26">parse_event_t::object_start</a>, 
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1c863b719b4ca5b77188c171bbfafeaf63e2a2468a37aa4f394fcc3bcb8249c">parse_event_t::object_end</a>, 
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1c863b719b4ca5b77188c171bbfafeaa4388a3d92419edbb1c6efd4d52461f3">parse_event_t::array_start</a>, 
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1c863b719b4ca5b77188c171bbfafea49642fb732aa2e112188fba1f9d3ef7f">parse_event_t::array_end</a>, 
<br />
&#160;&#160;<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1c863b719b4ca5b77188c171bbfafea3c6e0b8a9c15224a8228b9a98ca1531d">parse_event_t::key</a>, 
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1c863b719b4ca5b77188c171bbfafea2063c1608d6e0baf80249c42e2be5804">parse_event_t::value</a>
<br />
 }</td></tr>
<tr class="memdesc:aea1c863b719b4ca5b77188c171bbfafe"><td class="mdescLeft">&#160;</td><td class="mdescRight">JSON callback events.  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1c863b719b4ca5b77188c171bbfafe">More...</a><br /></td></tr>
<tr class="separator:aea1c863b719b4ca5b77188c171bbfafe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8cbef097f7da18a781fc86587de6b90"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae8cbef097f7da18a781fc86587de6b90">value_t</a> = <a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980f">detail::value_t</a></td></tr>
<tr class="separator:ae8cbef097f7da18a781fc86587de6b90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7768841baaaa7a21098a401c932efaff"><td class="memTemplParams" colspan="2">template&lt;typename T , typename SFINAE &gt; </td></tr>
<tr class="memitem:a7768841baaaa7a21098a401c932efaff"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a7768841baaaa7a21098a401c932efaff">json_serializer</a> = JSONSerializer&lt; T, SFINAE &gt;</td></tr>
<tr class="separator:a7768841baaaa7a21098a401c932efaff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aecae491e175f8767c550ae3c59e180e3"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a> = std::function&lt; bool(int depth, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1c863b719b4ca5b77188c171bbfafe">parse_event_t</a> event, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;parsed)&gt;</td></tr>
<tr class="memdesc:aecae491e175f8767c550ae3c59e180e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">per-element parser callback type  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">More...</a><br /></td></tr>
<tr class="separator:aecae491e175f8767c550ae3c59e180e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a6b75862bdb4d26650616cf9821430755"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a6b75862bdb4d26650616cf9821430755">type_name</a> () const</td></tr>
<tr class="memdesc:a6b75862bdb4d26650616cf9821430755"><td class="mdescLeft">&#160;</td><td class="mdescRight">return the type as string  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a6b75862bdb4d26650616cf9821430755">More...</a><br /></td></tr>
<tr class="separator:a6b75862bdb4d26650616cf9821430755"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:af4ac14224fbdd29d3547fcb11bb55c8f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a86ce930490cf7773b26f5ef49c04a350">allocator_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af4ac14224fbdd29d3547fcb11bb55c8f">get_allocator</a> ()</td></tr>
<tr class="memdesc:af4ac14224fbdd29d3547fcb11bb55c8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the allocator associated with the container  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af4ac14224fbdd29d3547fcb11bb55c8f">More...</a><br /></td></tr>
<tr class="separator:af4ac14224fbdd29d3547fcb11bb55c8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef6d0eeccee7c5c7e1317c2ea1607fab"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aef6d0eeccee7c5c7e1317c2ea1607fab">meta</a> ()</td></tr>
<tr class="memdesc:aef6d0eeccee7c5c7e1317c2ea1607fab"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns version information on the library  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aef6d0eeccee7c5c7e1317c2ea1607fab">More...</a><br /></td></tr>
<tr class="separator:aef6d0eeccee7c5c7e1317c2ea1607fab"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a6275ed57bae6866cdf5db5370a7ad47c"><td class="memTemplParams" colspan="2">template&lt;detail::value_t &gt; </td></tr>
<tr class="memitem:a6275ed57bae6866cdf5db5370a7ad47c"><td class="memTemplItemLeft" align="right" valign="top">struct&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a6275ed57bae6866cdf5db5370a7ad47c">detail::external_constructor</a></td></tr>
<tr class="separator:a6275ed57bae6866cdf5db5370a7ad47c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
container types</h2></td></tr>
<tr><td class="ititle" colspan="2"><p><a class="anchor" id="amgrp6618fa684bc6d5a05e2c88bfff1c0d66"></a>The canonic container types to use <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> like any other STL container. </p>
</td></tr>
<tr class="memitem:a2b3297873b70c080837e8eedc4fec32f"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b3297873b70c080837e8eedc4fec32f">value_type</a> = <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a></td></tr>
<tr class="memdesc:a2b3297873b70c080837e8eedc4fec32f"><td class="mdescLeft">&#160;</td><td class="mdescRight">the type of elements in a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a> container  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b3297873b70c080837e8eedc4fec32f">More...</a><br /></td></tr>
<tr class="separator:a2b3297873b70c080837e8eedc4fec32f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6a5eddd156c776ac75ff54cfe54a5bc"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a> = <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b3297873b70c080837e8eedc4fec32f">value_type</a> &amp;</td></tr>
<tr class="memdesc:ac6a5eddd156c776ac75ff54cfe54a5bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">the type of an element reference  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">More...</a><br /></td></tr>
<tr class="separator:ac6a5eddd156c776ac75ff54cfe54a5bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4057c5425f4faacfe39a8046871786ca"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> = const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b3297873b70c080837e8eedc4fec32f">value_type</a> &amp;</td></tr>
<tr class="memdesc:a4057c5425f4faacfe39a8046871786ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">the type of an element const reference  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">More...</a><br /></td></tr>
<tr class="separator:a4057c5425f4faacfe39a8046871786ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe7c1303357e19cea9527af4e9a31d8f"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#afe7c1303357e19cea9527af4e9a31d8f">difference_type</a> = std::ptrdiff_t</td></tr>
<tr class="memdesc:afe7c1303357e19cea9527af4e9a31d8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">a type to represent differences between iterators  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#afe7c1303357e19cea9527af4e9a31d8f">More...</a><br /></td></tr>
<tr class="separator:afe7c1303357e19cea9527af4e9a31d8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39f2cd0b58106097e0e67bf185cc519b"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a> = std::size_t</td></tr>
<tr class="memdesc:a39f2cd0b58106097e0e67bf185cc519b"><td class="mdescLeft">&#160;</td><td class="mdescRight">a type to represent container sizes  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">More...</a><br /></td></tr>
<tr class="separator:a39f2cd0b58106097e0e67bf185cc519b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86ce930490cf7773b26f5ef49c04a350"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a86ce930490cf7773b26f5ef49c04a350">allocator_type</a> = AllocatorType&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &gt;</td></tr>
<tr class="memdesc:a86ce930490cf7773b26f5ef49c04a350"><td class="mdescLeft">&#160;</td><td class="mdescRight">the allocator type  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a86ce930490cf7773b26f5ef49c04a350">More...</a><br /></td></tr>
<tr class="separator:a86ce930490cf7773b26f5ef49c04a350"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefee1f777198c68724bd127e0c8abbe4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aefee1f777198c68724bd127e0c8abbe4">pointer</a> = typename std::allocator_traits&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a86ce930490cf7773b26f5ef49c04a350">allocator_type</a> &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aefee1f777198c68724bd127e0c8abbe4">pointer</a></td></tr>
<tr class="memdesc:aefee1f777198c68724bd127e0c8abbe4"><td class="mdescLeft">&#160;</td><td class="mdescRight">the type of an element pointer  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aefee1f777198c68724bd127e0c8abbe4">More...</a><br /></td></tr>
<tr class="separator:aefee1f777198c68724bd127e0c8abbe4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff3d5cd2a75612364b888d8693231b58"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aff3d5cd2a75612364b888d8693231b58">const_pointer</a> = typename std::allocator_traits&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a86ce930490cf7773b26f5ef49c04a350">allocator_type</a> &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aff3d5cd2a75612364b888d8693231b58">const_pointer</a></td></tr>
<tr class="memdesc:aff3d5cd2a75612364b888d8693231b58"><td class="mdescLeft">&#160;</td><td class="mdescRight">the type of an element const pointer  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aff3d5cd2a75612364b888d8693231b58">More...</a><br /></td></tr>
<tr class="separator:aff3d5cd2a75612364b888d8693231b58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a099316232c76c034030a38faa6e34dca"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a> = <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &gt;</td></tr>
<tr class="memdesc:a099316232c76c034030a38faa6e34dca"><td class="mdescLeft">&#160;</td><td class="mdescRight">an iterator for a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a> container  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">More...</a><br /></td></tr>
<tr class="separator:a099316232c76c034030a38faa6e34dca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41a70cf9993951836d129bb1c2b3126a"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a> = <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt; const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &gt;</td></tr>
<tr class="memdesc:a41a70cf9993951836d129bb1c2b3126a"><td class="mdescLeft">&#160;</td><td class="mdescRight">a const iterator for a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a> container  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">More...</a><br /></td></tr>
<tr class="separator:a41a70cf9993951836d129bb1c2b3126a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac223d5560c2b05a208c88de67376c5f2"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac223d5560c2b05a208c88de67376c5f2">reverse_iterator</a> = <a class="el" href="../../d1/d8e/classnlohmann_1_1basic__json_1_1json__reverse__iterator.xhtml">json_reverse_iterator</a>&lt; typename <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">basic_json::iterator</a> &gt;</td></tr>
<tr class="memdesc:ac223d5560c2b05a208c88de67376c5f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">a reverse iterator for a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a> container  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac223d5560c2b05a208c88de67376c5f2">More...</a><br /></td></tr>
<tr class="separator:ac223d5560c2b05a208c88de67376c5f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72be3c24bfa24f0993d6c11af03e7404"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a72be3c24bfa24f0993d6c11af03e7404">const_reverse_iterator</a> = <a class="el" href="../../d1/d8e/classnlohmann_1_1basic__json_1_1json__reverse__iterator.xhtml">json_reverse_iterator</a>&lt; typename <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">basic_json::const_iterator</a> &gt;</td></tr>
<tr class="memdesc:a72be3c24bfa24f0993d6c11af03e7404"><td class="mdescLeft">&#160;</td><td class="mdescRight">a const reverse iterator for a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a> container  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a72be3c24bfa24f0993d6c11af03e7404">More...</a><br /></td></tr>
<tr class="separator:a72be3c24bfa24f0993d6c11af03e7404"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
JSON value data types</h2></td></tr>
<tr><td class="ititle" colspan="2"><p><a class="anchor" id="amgrpbddfba6d49869d59bfd397e65b8cba87"></a>The data types to store a JSON value. These types are derived from the template arguments passed to class <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>. </p>
</td></tr>
<tr class="memitem:aa1eb13d5aa86f80cbee6c58e90fbaf49"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa1eb13d5aa86f80cbee6c58e90fbaf49">object_t</a> = ObjectType&lt; StringType, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>, std::less&lt; StringType &gt;, AllocatorType&lt; std::pair&lt; const StringType, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &gt; &gt;&gt;</td></tr>
<tr class="memdesc:aa1eb13d5aa86f80cbee6c58e90fbaf49"><td class="mdescLeft">&#160;</td><td class="mdescRight">a type for an object  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa1eb13d5aa86f80cbee6c58e90fbaf49">More...</a><br /></td></tr>
<tr class="separator:aa1eb13d5aa86f80cbee6c58e90fbaf49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae095578e03df97c5b3991787f1056374"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae095578e03df97c5b3991787f1056374">array_t</a> = ArrayType&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>, AllocatorType&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &gt; &gt;</td></tr>
<tr class="memdesc:ae095578e03df97c5b3991787f1056374"><td class="mdescLeft">&#160;</td><td class="mdescRight">a type for an array  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae095578e03df97c5b3991787f1056374">More...</a><br /></td></tr>
<tr class="separator:ae095578e03df97c5b3991787f1056374"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61f8566a1a85a424c7266fb531dca005"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a> = StringType</td></tr>
<tr class="memdesc:a61f8566a1a85a424c7266fb531dca005"><td class="mdescLeft">&#160;</td><td class="mdescRight">a type for a string  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">More...</a><br /></td></tr>
<tr class="separator:a61f8566a1a85a424c7266fb531dca005"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c919102a9b4fe0d588af64801436082"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4c919102a9b4fe0d588af64801436082">boolean_t</a> = BooleanType</td></tr>
<tr class="memdesc:a4c919102a9b4fe0d588af64801436082"><td class="mdescLeft">&#160;</td><td class="mdescRight">a type for a boolean  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4c919102a9b4fe0d588af64801436082">More...</a><br /></td></tr>
<tr class="separator:a4c919102a9b4fe0d588af64801436082"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98e611d67b7bd75307de99c9358ab2dc"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a98e611d67b7bd75307de99c9358ab2dc">number_integer_t</a> = NumberIntegerType</td></tr>
<tr class="memdesc:a98e611d67b7bd75307de99c9358ab2dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">a type for a number (integer)  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a98e611d67b7bd75307de99c9358ab2dc">More...</a><br /></td></tr>
<tr class="separator:a98e611d67b7bd75307de99c9358ab2dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab906e29b5d83ac162e823ada2156b989"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab906e29b5d83ac162e823ada2156b989">number_unsigned_t</a> = NumberUnsignedType</td></tr>
<tr class="memdesc:ab906e29b5d83ac162e823ada2156b989"><td class="mdescLeft">&#160;</td><td class="mdescRight">a type for a number (unsigned)  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab906e29b5d83ac162e823ada2156b989">More...</a><br /></td></tr>
<tr class="separator:ab906e29b5d83ac162e823ada2156b989"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88d6103cb3620410b35200ee8e313d97"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88d6103cb3620410b35200ee8e313d97">number_float_t</a> = NumberFloatType</td></tr>
<tr class="memdesc:a88d6103cb3620410b35200ee8e313d97"><td class="mdescLeft">&#160;</td><td class="mdescRight">a type for a number (floating-point)  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88d6103cb3620410b35200ee8e313d97">More...</a><br /></td></tr>
<tr class="separator:a88d6103cb3620410b35200ee8e313d97"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
constructors and destructors</h2></td></tr>
<tr><td class="ititle" colspan="2"><p><a class="anchor" id="amgrpd94b4d3d0135946bb7bdf25e48755337"></a>Constructors of class <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>, copy/move constructor, copy assignment, static functions creating objects, and the destructor. </p>
</td></tr>
<tr class="memitem:a4a4ec75e4d2845d9bcf7a9e5458e4949"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4a4ec75e4d2845d9bcf7a9e5458e4949">array</a> (std::initializer_list&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &gt; init=std::initializer_list&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &gt;())</td></tr>
<tr class="memdesc:a4a4ec75e4d2845d9bcf7a9e5458e4949"><td class="mdescLeft">&#160;</td><td class="mdescRight">explicitly create an array from an initializer list  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4a4ec75e4d2845d9bcf7a9e5458e4949">More...</a><br /></td></tr>
<tr class="separator:a4a4ec75e4d2845d9bcf7a9e5458e4949"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f42ee7d10eee2d5a73fd94ca7f767ca"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9f42ee7d10eee2d5a73fd94ca7f767ca">object</a> (std::initializer_list&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &gt; init=std::initializer_list&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &gt;())</td></tr>
<tr class="memdesc:a9f42ee7d10eee2d5a73fd94ca7f767ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">explicitly create an object from an initializer list  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9f42ee7d10eee2d5a73fd94ca7f767ca">More...</a><br /></td></tr>
<tr class="separator:a9f42ee7d10eee2d5a73fd94ca7f767ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32124a16dc80729d964d9caf607c2bc8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a32124a16dc80729d964d9caf607c2bc8">basic_json</a> (const <a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980f">value_t</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b3297873b70c080837e8eedc4fec32f">value_type</a>)</td></tr>
<tr class="memdesc:a32124a16dc80729d964d9caf607c2bc8"><td class="mdescLeft">&#160;</td><td class="mdescRight">create an empty value with a given type  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a32124a16dc80729d964d9caf607c2bc8">More...</a><br /></td></tr>
<tr class="separator:a32124a16dc80729d964d9caf607c2bc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9be9e956bfc4658f35d17c6aa72b063"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae9be9e956bfc4658f35d17c6aa72b063">basic_json</a> (std::nullptr_t=nullptr) noexcept</td></tr>
<tr class="memdesc:ae9be9e956bfc4658f35d17c6aa72b063"><td class="mdescLeft">&#160;</td><td class="mdescRight">create a null object  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae9be9e956bfc4658f35d17c6aa72b063">More...</a><br /></td></tr>
<tr class="separator:ae9be9e956bfc4658f35d17c6aa72b063"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7639e0834df2bc719a04ffea89b31abc"><td class="memTemplParams" colspan="2">template&lt;typename CompatibleType , typename U  = detail::uncvref_t&lt;CompatibleType&gt;, detail::enable_if_t&lt; not std::is_base_of&lt; std::istream, U &gt;::value and not std::is_same&lt; U, basic_json_t &gt;::value and not detail::is_basic_json_nested_type&lt; basic_json_t, U &gt;::value and detail::has_to_json&lt; basic_json, U &gt;::value, int &gt;  = 0&gt; </td></tr>
<tr class="memitem:a7639e0834df2bc719a04ffea89b31abc"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a7639e0834df2bc719a04ffea89b31abc">basic_json</a> (CompatibleType &amp;&amp;val) noexcept(noexcept(JSONSerializer&lt; U &gt;::to_json(std::declval&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json_t</a> &amp; &gt;(), std::forward&lt; CompatibleType &gt;(val))))</td></tr>
<tr class="memdesc:a7639e0834df2bc719a04ffea89b31abc"><td class="mdescLeft">&#160;</td><td class="mdescRight">create a JSON value  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a7639e0834df2bc719a04ffea89b31abc">More...</a><br /></td></tr>
<tr class="separator:a7639e0834df2bc719a04ffea89b31abc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbad48316e7cd37366ba3ac5d7e5859e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#afbad48316e7cd37366ba3ac5d7e5859e">basic_json</a> (std::initializer_list&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &gt; init, bool type_deduction=true, <a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980f">value_t</a> manual_type=<a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980faf1f713c9e000f5d3f280adbd124df4f5">value_t::array</a>)</td></tr>
<tr class="memdesc:afbad48316e7cd37366ba3ac5d7e5859e"><td class="mdescLeft">&#160;</td><td class="mdescRight">create a container (array or object) from an initializer list  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#afbad48316e7cd37366ba3ac5d7e5859e">More...</a><br /></td></tr>
<tr class="separator:afbad48316e7cd37366ba3ac5d7e5859e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6816ae5100409254ed0a8bc21c387bb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab6816ae5100409254ed0a8bc21c387bb">basic_json</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a> cnt, const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;val)</td></tr>
<tr class="memdesc:ab6816ae5100409254ed0a8bc21c387bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">construct an array with count copies of given value  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab6816ae5100409254ed0a8bc21c387bb">More...</a><br /></td></tr>
<tr class="separator:ab6816ae5100409254ed0a8bc21c387bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe197e9f3184487805cfb5bba6fd5938"><td class="memTemplParams" colspan="2">template&lt;class InputIT , typename std::enable_if&lt; std::is_same&lt; InputIT, typename basic_json_t::iterator &gt;::value or std::is_same&lt; InputIT, typename basic_json_t::const_iterator &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:abe197e9f3184487805cfb5bba6fd5938"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abe197e9f3184487805cfb5bba6fd5938">basic_json</a> (InputIT first, InputIT last)</td></tr>
<tr class="memdesc:abe197e9f3184487805cfb5bba6fd5938"><td class="mdescLeft">&#160;</td><td class="mdescRight">construct a JSON container given an iterator range  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abe197e9f3184487805cfb5bba6fd5938">More...</a><br /></td></tr>
<tr class="separator:abe197e9f3184487805cfb5bba6fd5938"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a757e90574a742ae9cc54c97422fb3043"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d3/dd1/nlohmann__json_8hpp.xhtml#a584fd8f49cd7f4ecf5baba15b5b53cdd">JSON_DEPRECATED</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a757e90574a742ae9cc54c97422fb3043">basic_json</a> (std::istream &amp;i, const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a> cb=nullptr)</td></tr>
<tr class="memdesc:a757e90574a742ae9cc54c97422fb3043"><td class="mdescLeft">&#160;</td><td class="mdescRight">construct a JSON value given an input stream  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a757e90574a742ae9cc54c97422fb3043">More...</a><br /></td></tr>
<tr class="separator:a757e90574a742ae9cc54c97422fb3043"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5de621bcf646c332343f9c1e011126c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af5de621bcf646c332343f9c1e011126c">basic_json</a> (const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;other)</td></tr>
<tr class="memdesc:af5de621bcf646c332343f9c1e011126c"><td class="mdescLeft">&#160;</td><td class="mdescRight">copy constructor  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af5de621bcf646c332343f9c1e011126c">More...</a><br /></td></tr>
<tr class="separator:af5de621bcf646c332343f9c1e011126c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a06d1efd50a00f4889f831f851ce124"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9a06d1efd50a00f4889f831f851ce124">basic_json</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;&amp;other) noexcept</td></tr>
<tr class="memdesc:a9a06d1efd50a00f4889f831f851ce124"><td class="mdescLeft">&#160;</td><td class="mdescRight">move constructor  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9a06d1efd50a00f4889f831f851ce124">More...</a><br /></td></tr>
<tr class="separator:a9a06d1efd50a00f4889f831f851ce124"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab256df8c5594ec693035822fa1e2904"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aab256df8c5594ec693035822fa1e2904">operator=</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> other) noexcept(std::is_nothrow_move_constructible&lt; <a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980f">value_t</a> &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a">value</a> and std::is_nothrow_move_assignable&lt; <a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980f">value_t</a> &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a">value</a> and std::is_nothrow_move_constructible&lt; json_value &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a">value</a> and std::is_nothrow_move_assignable&lt; json_value &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a">value</a>)</td></tr>
<tr class="memdesc:aab256df8c5594ec693035822fa1e2904"><td class="mdescLeft">&#160;</td><td class="mdescRight">copy assignment  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aab256df8c5594ec693035822fa1e2904">More...</a><br /></td></tr>
<tr class="separator:aab256df8c5594ec693035822fa1e2904"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42347bbce75ba5571e292a3540af30e0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a42347bbce75ba5571e292a3540af30e0">~basic_json</a> ()</td></tr>
<tr class="memdesc:a42347bbce75ba5571e292a3540af30e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">destructor  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a42347bbce75ba5571e292a3540af30e0">More...</a><br /></td></tr>
<tr class="separator:a42347bbce75ba5571e292a3540af30e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
object inspection</h2></td></tr>
<tr><td class="ititle" colspan="2"><p><a class="anchor" id="amgrpbbb01a37b8f261ae5b5799058dcac1a0"></a>Functions to inspect the type of a JSON value. </p>
</td></tr>
<tr class="memitem:a5319dc1bb9dfe19ce7ff559aaded3422"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5319dc1bb9dfe19ce7ff559aaded3422">dump</a> (const int indent=-1) const</td></tr>
<tr class="memdesc:a5319dc1bb9dfe19ce7ff559aaded3422"><td class="mdescLeft">&#160;</td><td class="mdescRight">serialization  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5319dc1bb9dfe19ce7ff559aaded3422">More...</a><br /></td></tr>
<tr class="separator:a5319dc1bb9dfe19ce7ff559aaded3422"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b2d781d7f2a4ee41bc0016e931cadf7"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980f">value_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b2d781d7f2a4ee41bc0016e931cadf7">type</a> () const noexcept</td></tr>
<tr class="memdesc:a2b2d781d7f2a4ee41bc0016e931cadf7"><td class="mdescLeft">&#160;</td><td class="mdescRight">return the type of the JSON value (explicit)  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b2d781d7f2a4ee41bc0016e931cadf7">More...</a><br /></td></tr>
<tr class="separator:a2b2d781d7f2a4ee41bc0016e931cadf7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6362b88718eb5c6d4fed6a61eed44b95"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a6362b88718eb5c6d4fed6a61eed44b95">is_primitive</a> () const noexcept</td></tr>
<tr class="memdesc:a6362b88718eb5c6d4fed6a61eed44b95"><td class="mdescLeft">&#160;</td><td class="mdescRight">return whether type is primitive  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a6362b88718eb5c6d4fed6a61eed44b95">More...</a><br /></td></tr>
<tr class="separator:a6362b88718eb5c6d4fed6a61eed44b95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f68a0af820c3ced7f9d17851ce4c22d"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9f68a0af820c3ced7f9d17851ce4c22d">is_structured</a> () const noexcept</td></tr>
<tr class="memdesc:a9f68a0af820c3ced7f9d17851ce4c22d"><td class="mdescLeft">&#160;</td><td class="mdescRight">return whether type is structured  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9f68a0af820c3ced7f9d17851ce4c22d">More...</a><br /></td></tr>
<tr class="separator:a9f68a0af820c3ced7f9d17851ce4c22d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8faa039ca82427ed29c486ffd00600c3"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8faa039ca82427ed29c486ffd00600c3">is_null</a> () const noexcept</td></tr>
<tr class="memdesc:a8faa039ca82427ed29c486ffd00600c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">return whether value is null  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8faa039ca82427ed29c486ffd00600c3">More...</a><br /></td></tr>
<tr class="separator:a8faa039ca82427ed29c486ffd00600c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a943e8cb182d0f2365c76d64b42eaa6fd"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a943e8cb182d0f2365c76d64b42eaa6fd">is_boolean</a> () const noexcept</td></tr>
<tr class="memdesc:a943e8cb182d0f2365c76d64b42eaa6fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">return whether value is a boolean  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a943e8cb182d0f2365c76d64b42eaa6fd">More...</a><br /></td></tr>
<tr class="separator:a943e8cb182d0f2365c76d64b42eaa6fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b9852390abb4b1ef5fac6984e2fc0f3"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b9852390abb4b1ef5fac6984e2fc0f3">is_number</a> () const noexcept</td></tr>
<tr class="memdesc:a2b9852390abb4b1ef5fac6984e2fc0f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">return whether value is a number  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b9852390abb4b1ef5fac6984e2fc0f3">More...</a><br /></td></tr>
<tr class="separator:a2b9852390abb4b1ef5fac6984e2fc0f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abac8af76067f1e8fdca9052882c74428"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abac8af76067f1e8fdca9052882c74428">is_number_integer</a> () const noexcept</td></tr>
<tr class="memdesc:abac8af76067f1e8fdca9052882c74428"><td class="mdescLeft">&#160;</td><td class="mdescRight">return whether value is an integer number  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abac8af76067f1e8fdca9052882c74428">More...</a><br /></td></tr>
<tr class="separator:abac8af76067f1e8fdca9052882c74428"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc7378cba0613a78b9aad1c8e7044bb0"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abc7378cba0613a78b9aad1c8e7044bb0">is_number_unsigned</a> () const noexcept</td></tr>
<tr class="memdesc:abc7378cba0613a78b9aad1c8e7044bb0"><td class="mdescLeft">&#160;</td><td class="mdescRight">return whether value is an unsigned integer number  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abc7378cba0613a78b9aad1c8e7044bb0">More...</a><br /></td></tr>
<tr class="separator:abc7378cba0613a78b9aad1c8e7044bb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33b4bf898b857c962e798fc7f6e86e70"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a33b4bf898b857c962e798fc7f6e86e70">is_number_float</a> () const noexcept</td></tr>
<tr class="memdesc:a33b4bf898b857c962e798fc7f6e86e70"><td class="mdescLeft">&#160;</td><td class="mdescRight">return whether value is a floating-point number  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a33b4bf898b857c962e798fc7f6e86e70">More...</a><br /></td></tr>
<tr class="separator:a33b4bf898b857c962e798fc7f6e86e70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8f511af124e82e4579f444b4175787c"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af8f511af124e82e4579f444b4175787c">is_object</a> () const noexcept</td></tr>
<tr class="memdesc:af8f511af124e82e4579f444b4175787c"><td class="mdescLeft">&#160;</td><td class="mdescRight">return whether value is an object  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af8f511af124e82e4579f444b4175787c">More...</a><br /></td></tr>
<tr class="separator:af8f511af124e82e4579f444b4175787c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef9ce5dd2381caee1f8ddcdb5bdd9c65"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aef9ce5dd2381caee1f8ddcdb5bdd9c65">is_array</a> () const noexcept</td></tr>
<tr class="memdesc:aef9ce5dd2381caee1f8ddcdb5bdd9c65"><td class="mdescLeft">&#160;</td><td class="mdescRight">return whether value is an array  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aef9ce5dd2381caee1f8ddcdb5bdd9c65">More...</a><br /></td></tr>
<tr class="separator:aef9ce5dd2381caee1f8ddcdb5bdd9c65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69b596a4a6683b362095c9a139637396"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a69b596a4a6683b362095c9a139637396">is_string</a> () const noexcept</td></tr>
<tr class="memdesc:a69b596a4a6683b362095c9a139637396"><td class="mdescLeft">&#160;</td><td class="mdescRight">return whether value is a string  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a69b596a4a6683b362095c9a139637396">More...</a><br /></td></tr>
<tr class="separator:a69b596a4a6683b362095c9a139637396"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabe623bc8304c2ba92d96d91f390fab4"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aabe623bc8304c2ba92d96d91f390fab4">is_discarded</a> () const noexcept</td></tr>
<tr class="memdesc:aabe623bc8304c2ba92d96d91f390fab4"><td class="mdescLeft">&#160;</td><td class="mdescRight">return whether value is discarded  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aabe623bc8304c2ba92d96d91f390fab4">More...</a><br /></td></tr>
<tr class="separator:aabe623bc8304c2ba92d96d91f390fab4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26ef3058e249f82a04f8ec18f7419027"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a26ef3058e249f82a04f8ec18f7419027">operator value_t</a> () const noexcept</td></tr>
<tr class="memdesc:a26ef3058e249f82a04f8ec18f7419027"><td class="mdescLeft">&#160;</td><td class="mdescRight">return the type of the JSON value (implicit)  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a26ef3058e249f82a04f8ec18f7419027">More...</a><br /></td></tr>
<tr class="separator:a26ef3058e249f82a04f8ec18f7419027"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
value access</h2></td></tr>
<tr><td class="ititle" colspan="2"><p><a class="anchor" id="amgrpd8f53c9caf18314e5b3f758245606995"></a>Direct access to the stored value of a JSON value. </p>
</td></tr>
<tr class="memitem:a6b187a22994c12c8cae0dd5ee99dc85e"><td class="memTemplParams" colspan="2">template&lt;typename BasicJsonType , detail::enable_if_t&lt; std::is_same&lt; typename std::remove_const&lt; BasicJsonType &gt;::type, basic_json_t &gt;::value, int &gt;  = 0&gt; </td></tr>
<tr class="memitem:a6b187a22994c12c8cae0dd5ee99dc85e"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a6b187a22994c12c8cae0dd5ee99dc85e">get</a> () const</td></tr>
<tr class="memdesc:a6b187a22994c12c8cae0dd5ee99dc85e"><td class="mdescLeft">&#160;</td><td class="mdescRight">get special-case overload  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a6b187a22994c12c8cae0dd5ee99dc85e">More...</a><br /></td></tr>
<tr class="separator:a6b187a22994c12c8cae0dd5ee99dc85e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6602bb24022183ab989439e19345d08"><td class="memTemplParams" colspan="2">template&lt;typename ValueTypeCV , typename ValueType  = detail::uncvref_t&lt;ValueTypeCV&gt;, detail::enable_if_t&lt; not std::is_same&lt; basic_json_t, ValueType &gt;::value and detail::has_from_json&lt; basic_json_t, ValueType &gt;::value and not detail::has_non_default_from_json&lt; basic_json_t, ValueType &gt;::value, int &gt;  = 0&gt; </td></tr>
<tr class="memitem:aa6602bb24022183ab989439e19345d08"><td class="memTemplItemLeft" align="right" valign="top">ValueType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa6602bb24022183ab989439e19345d08">get</a> () const noexcept(noexcept(JSONSerializer&lt; ValueType &gt;::from_json(std::declval&lt; const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json_t</a> &amp; &gt;(), std::declval&lt; ValueType &amp; &gt;())))</td></tr>
<tr class="memdesc:aa6602bb24022183ab989439e19345d08"><td class="mdescLeft">&#160;</td><td class="mdescRight">get a value (explicit)  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa6602bb24022183ab989439e19345d08">More...</a><br /></td></tr>
<tr class="separator:aa6602bb24022183ab989439e19345d08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5afa21d477e13fa7a3dcd7ea66c48b52"><td class="memTemplParams" colspan="2">template&lt;typename ValueTypeCV , typename ValueType  = detail::uncvref_t&lt;ValueTypeCV&gt;, detail::enable_if_t&lt; not std::is_same&lt; basic_json_t, ValueType &gt;::value and detail::has_non_default_from_json&lt; basic_json_t, ValueType &gt;::value, int &gt;  = 0&gt; </td></tr>
<tr class="memitem:a5afa21d477e13fa7a3dcd7ea66c48b52"><td class="memTemplItemLeft" align="right" valign="top">ValueType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5afa21d477e13fa7a3dcd7ea66c48b52">get</a> () const noexcept(noexcept(JSONSerializer&lt; ValueTypeCV &gt;::from_json(std::declval&lt; const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json_t</a> &amp; &gt;())))</td></tr>
<tr class="memdesc:a5afa21d477e13fa7a3dcd7ea66c48b52"><td class="mdescLeft">&#160;</td><td class="mdescRight">get a value (explicit); special case  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5afa21d477e13fa7a3dcd7ea66c48b52">More...</a><br /></td></tr>
<tr class="separator:a5afa21d477e13fa7a3dcd7ea66c48b52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64135c19425f00b346d8ed63a23db334"><td class="memTemplParams" colspan="2">template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:a64135c19425f00b346d8ed63a23db334"><td class="memTemplItemLeft" align="right" valign="top">PointerType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a64135c19425f00b346d8ed63a23db334">get</a> () noexcept</td></tr>
<tr class="memdesc:a64135c19425f00b346d8ed63a23db334"><td class="mdescLeft">&#160;</td><td class="mdescRight">get a pointer value (explicit)  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a64135c19425f00b346d8ed63a23db334">More...</a><br /></td></tr>
<tr class="separator:a64135c19425f00b346d8ed63a23db334"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44a090c15a67b9f02e579b6e17ef0e1b"><td class="memTemplParams" colspan="2">template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:a44a090c15a67b9f02e579b6e17ef0e1b"><td class="memTemplItemLeft" align="right" valign="top">constexpr const PointerType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a44a090c15a67b9f02e579b6e17ef0e1b">get</a> () const noexcept</td></tr>
<tr class="memdesc:a44a090c15a67b9f02e579b6e17ef0e1b"><td class="mdescLeft">&#160;</td><td class="mdescRight">get a pointer value (explicit)  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a44a090c15a67b9f02e579b6e17ef0e1b">More...</a><br /></td></tr>
<tr class="separator:a44a090c15a67b9f02e579b6e17ef0e1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefa46bd2d96bb77a38d1c8b431eab44f"><td class="memTemplParams" colspan="2">template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:aefa46bd2d96bb77a38d1c8b431eab44f"><td class="memTemplItemLeft" align="right" valign="top">PointerType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aefa46bd2d96bb77a38d1c8b431eab44f">get_ptr</a> () noexcept</td></tr>
<tr class="memdesc:aefa46bd2d96bb77a38d1c8b431eab44f"><td class="mdescLeft">&#160;</td><td class="mdescRight">get a pointer value (implicit)  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aefa46bd2d96bb77a38d1c8b431eab44f">More...</a><br /></td></tr>
<tr class="separator:aefa46bd2d96bb77a38d1c8b431eab44f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14abd48803a8d5447faf5f583fa8e2a1"><td class="memTemplParams" colspan="2">template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::value and std::is_const&lt; typename std::remove_pointer&lt; PointerType &gt;::type &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:a14abd48803a8d5447faf5f583fa8e2a1"><td class="memTemplItemLeft" align="right" valign="top">constexpr const PointerType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a14abd48803a8d5447faf5f583fa8e2a1">get_ptr</a> () const noexcept</td></tr>
<tr class="memdesc:a14abd48803a8d5447faf5f583fa8e2a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">get a pointer value (implicit)  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a14abd48803a8d5447faf5f583fa8e2a1">More...</a><br /></td></tr>
<tr class="separator:a14abd48803a8d5447faf5f583fa8e2a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbd800010b67619463c0fce6e74f7878"><td class="memTemplParams" colspan="2">template&lt;typename ReferenceType , typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:afbd800010b67619463c0fce6e74f7878"><td class="memTemplItemLeft" align="right" valign="top">ReferenceType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#afbd800010b67619463c0fce6e74f7878">get_ref</a> ()</td></tr>
<tr class="memdesc:afbd800010b67619463c0fce6e74f7878"><td class="mdescLeft">&#160;</td><td class="mdescRight">get a reference value (implicit)  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#afbd800010b67619463c0fce6e74f7878">More...</a><br /></td></tr>
<tr class="separator:afbd800010b67619463c0fce6e74f7878"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac382f3d2bc6a5d52d936e4e40593f03b"><td class="memTemplParams" colspan="2">template&lt;typename ReferenceType , typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;::value and std::is_const&lt; typename std::remove_reference&lt; ReferenceType &gt;::type &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:ac382f3d2bc6a5d52d936e4e40593f03b"><td class="memTemplItemLeft" align="right" valign="top">ReferenceType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac382f3d2bc6a5d52d936e4e40593f03b">get_ref</a> () const</td></tr>
<tr class="memdesc:ac382f3d2bc6a5d52d936e4e40593f03b"><td class="mdescLeft">&#160;</td><td class="mdescRight">get a reference value (implicit)  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac382f3d2bc6a5d52d936e4e40593f03b">More...</a><br /></td></tr>
<tr class="separator:ac382f3d2bc6a5d52d936e4e40593f03b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f1d4bc973c5b866db3d96e14d2c9f3f"><td class="memTemplParams" colspan="2">template&lt;typename ValueType , typename std::enable_if&lt; not std::is_pointer&lt; ValueType &gt;::value and not std::is_same&lt; ValueType, typename string_t::value_type &gt;::value and not std::is_same&lt; ValueType, std::initializer_list&lt; typename string_t::value_type &gt;&gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:a1f1d4bc973c5b866db3d96e14d2c9f3f"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1f1d4bc973c5b866db3d96e14d2c9f3f">operator ValueType</a> () const</td></tr>
<tr class="memdesc:a1f1d4bc973c5b866db3d96e14d2c9f3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">get a value (implicit)  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1f1d4bc973c5b866db3d96e14d2c9f3f">More...</a><br /></td></tr>
<tr class="separator:a1f1d4bc973c5b866db3d96e14d2c9f3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
element access</h2></td></tr>
<tr><td class="ititle" colspan="2"><p><a class="anchor" id="amgrpf68418821a90b03a001117a613b131dd"></a>Access to the JSON value. </p>
</td></tr>
<tr class="memitem:a73ae333487310e3302135189ce8ff5d8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a73ae333487310e3302135189ce8ff5d8">at</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a> idx)</td></tr>
<tr class="memdesc:a73ae333487310e3302135189ce8ff5d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">access specified array element with bounds checking  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a73ae333487310e3302135189ce8ff5d8">More...</a><br /></td></tr>
<tr class="separator:a73ae333487310e3302135189ce8ff5d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab157adb4de8475b452da9ebf04f2de15"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab157adb4de8475b452da9ebf04f2de15">at</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a> idx) const</td></tr>
<tr class="memdesc:ab157adb4de8475b452da9ebf04f2de15"><td class="mdescLeft">&#160;</td><td class="mdescRight">access specified array element with bounds checking  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab157adb4de8475b452da9ebf04f2de15">More...</a><br /></td></tr>
<tr class="separator:ab157adb4de8475b452da9ebf04f2de15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93403e803947b86f4da2d1fb3345cf2c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a93403e803947b86f4da2d1fb3345cf2c">at</a> (const typename object_t::key_type &amp;key)</td></tr>
<tr class="memdesc:a93403e803947b86f4da2d1fb3345cf2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">access specified object element with bounds checking  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a93403e803947b86f4da2d1fb3345cf2c">More...</a><br /></td></tr>
<tr class="separator:a93403e803947b86f4da2d1fb3345cf2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acac9d438c9bb12740dcdb01069293a34"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#acac9d438c9bb12740dcdb01069293a34">at</a> (const typename object_t::key_type &amp;key) const</td></tr>
<tr class="memdesc:acac9d438c9bb12740dcdb01069293a34"><td class="mdescLeft">&#160;</td><td class="mdescRight">access specified object element with bounds checking  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#acac9d438c9bb12740dcdb01069293a34">More...</a><br /></td></tr>
<tr class="separator:acac9d438c9bb12740dcdb01069293a34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac871e3b03fb2eeca9a8de4db2bea760f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac871e3b03fb2eeca9a8de4db2bea760f">operator[]</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a> idx)</td></tr>
<tr class="memdesc:ac871e3b03fb2eeca9a8de4db2bea760f"><td class="mdescLeft">&#160;</td><td class="mdescRight">access specified array element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac871e3b03fb2eeca9a8de4db2bea760f">More...</a><br /></td></tr>
<tr class="separator:ac871e3b03fb2eeca9a8de4db2bea760f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cb592cd85c14f3e845e30d51cf17efb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9cb592cd85c14f3e845e30d51cf17efb">operator[]</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a> idx) const</td></tr>
<tr class="memdesc:a9cb592cd85c14f3e845e30d51cf17efb"><td class="mdescLeft">&#160;</td><td class="mdescRight">access specified array element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9cb592cd85c14f3e845e30d51cf17efb">More...</a><br /></td></tr>
<tr class="separator:a9cb592cd85c14f3e845e30d51cf17efb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a233b02b0839ef798942dd46157cc0fe6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a233b02b0839ef798942dd46157cc0fe6">operator[]</a> (const typename object_t::key_type &amp;key)</td></tr>
<tr class="memdesc:a233b02b0839ef798942dd46157cc0fe6"><td class="mdescLeft">&#160;</td><td class="mdescRight">access specified object element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a233b02b0839ef798942dd46157cc0fe6">More...</a><br /></td></tr>
<tr class="separator:a233b02b0839ef798942dd46157cc0fe6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2318780e5ae692039e816b6ac32c91e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab2318780e5ae692039e816b6ac32c91e">operator[]</a> (const typename object_t::key_type &amp;key) const</td></tr>
<tr class="memdesc:ab2318780e5ae692039e816b6ac32c91e"><td class="mdescLeft">&#160;</td><td class="mdescRight">read-only access specified object element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab2318780e5ae692039e816b6ac32c91e">More...</a><br /></td></tr>
<tr class="separator:ab2318780e5ae692039e816b6ac32c91e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1416bbec9d9a8eeca21c213cf5290868"><td class="memTemplParams" colspan="2">template&lt;typename T , std::size_t n&gt; </td></tr>
<tr class="memitem:a1416bbec9d9a8eeca21c213cf5290868"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1416bbec9d9a8eeca21c213cf5290868">operator[]</a> (T *(&amp;key)[n])</td></tr>
<tr class="memdesc:a1416bbec9d9a8eeca21c213cf5290868"><td class="mdescLeft">&#160;</td><td class="mdescRight">access specified object element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1416bbec9d9a8eeca21c213cf5290868">More...</a><br /></td></tr>
<tr class="separator:a1416bbec9d9a8eeca21c213cf5290868"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab17b18f161ecd014074790e25449094a"><td class="memTemplParams" colspan="2">template&lt;typename T , std::size_t n&gt; </td></tr>
<tr class="memitem:ab17b18f161ecd014074790e25449094a"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab17b18f161ecd014074790e25449094a">operator[]</a> (T *(&amp;key)[n]) const</td></tr>
<tr class="memdesc:ab17b18f161ecd014074790e25449094a"><td class="mdescLeft">&#160;</td><td class="mdescRight">read-only access specified object element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab17b18f161ecd014074790e25449094a">More...</a><br /></td></tr>
<tr class="separator:ab17b18f161ecd014074790e25449094a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb8eaa633584b5aff9c8fcd242f25ca8"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:abb8eaa633584b5aff9c8fcd242f25ca8"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abb8eaa633584b5aff9c8fcd242f25ca8">operator[]</a> (T *key)</td></tr>
<tr class="memdesc:abb8eaa633584b5aff9c8fcd242f25ca8"><td class="mdescLeft">&#160;</td><td class="mdescRight">access specified object element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abb8eaa633584b5aff9c8fcd242f25ca8">More...</a><br /></td></tr>
<tr class="separator:abb8eaa633584b5aff9c8fcd242f25ca8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26554213cbb1722accc460ce348c860a"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a26554213cbb1722accc460ce348c860a"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a26554213cbb1722accc460ce348c860a">operator[]</a> (T *key) const</td></tr>
<tr class="memdesc:a26554213cbb1722accc460ce348c860a"><td class="mdescLeft">&#160;</td><td class="mdescRight">read-only access specified object element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a26554213cbb1722accc460ce348c860a">More...</a><br /></td></tr>
<tr class="separator:a26554213cbb1722accc460ce348c860a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9c51328fbe1da75eca750be3009917a"><td class="memTemplParams" colspan="2">template&lt;class ValueType , typename std::enable_if&lt; std::is_convertible&lt; basic_json_t, ValueType &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:af9c51328fbe1da75eca750be3009917a"><td class="memTemplItemLeft" align="right" valign="top">ValueType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a">value</a> (const typename object_t::key_type &amp;key, ValueType default_value) const</td></tr>
<tr class="memdesc:af9c51328fbe1da75eca750be3009917a"><td class="mdescLeft">&#160;</td><td class="mdescRight">access specified object element with default value  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a">More...</a><br /></td></tr>
<tr class="separator:af9c51328fbe1da75eca750be3009917a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6a18403e7fbac9c4efd06facc71fc88"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ad6a18403e7fbac9c4efd06facc71fc88">value</a> (const typename object_t::key_type &amp;key, const char *default_value) const</td></tr>
<tr class="memdesc:ad6a18403e7fbac9c4efd06facc71fc88"><td class="mdescLeft">&#160;</td><td class="mdescRight">overload for a default value of type const char*  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ad6a18403e7fbac9c4efd06facc71fc88">More...</a><br /></td></tr>
<tr class="separator:ad6a18403e7fbac9c4efd06facc71fc88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7df4291dda0a80d86f74427cc3993ba"><td class="memTemplParams" colspan="2">template&lt;class ValueType , typename std::enable_if&lt; std::is_convertible&lt; basic_json_t, ValueType &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:ab7df4291dda0a80d86f74427cc3993ba"><td class="memTemplItemLeft" align="right" valign="top">ValueType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab7df4291dda0a80d86f74427cc3993ba">value</a> (const <a class="el" href="../../d4/d60/classnlohmann_1_1basic__json_1_1json__pointer.xhtml">json_pointer</a> &amp;ptr, ValueType default_value) const</td></tr>
<tr class="memdesc:ab7df4291dda0a80d86f74427cc3993ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">access specified object element via JSON Pointer with default value  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab7df4291dda0a80d86f74427cc3993ba">More...</a><br /></td></tr>
<tr class="separator:ab7df4291dda0a80d86f74427cc3993ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a869c900ee02cf1a68988dcce3b375424"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a869c900ee02cf1a68988dcce3b375424">value</a> (const <a class="el" href="../../d4/d60/classnlohmann_1_1basic__json_1_1json__pointer.xhtml">json_pointer</a> &amp;ptr, const char *default_value) const</td></tr>
<tr class="memdesc:a869c900ee02cf1a68988dcce3b375424"><td class="mdescLeft">&#160;</td><td class="mdescRight">overload for a default value of type const char*  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a869c900ee02cf1a68988dcce3b375424">More...</a><br /></td></tr>
<tr class="separator:a869c900ee02cf1a68988dcce3b375424"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3acba9c6ceb7214e565fe08c3ba5b352"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a3acba9c6ceb7214e565fe08c3ba5b352">front</a> ()</td></tr>
<tr class="memdesc:a3acba9c6ceb7214e565fe08c3ba5b352"><td class="mdescLeft">&#160;</td><td class="mdescRight">access the first element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a3acba9c6ceb7214e565fe08c3ba5b352">More...</a><br /></td></tr>
<tr class="separator:a3acba9c6ceb7214e565fe08c3ba5b352"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b1fb3671ade9afc8d33b2c9510acbfc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4b1fb3671ade9afc8d33b2c9510acbfc">front</a> () const</td></tr>
<tr class="memdesc:a4b1fb3671ade9afc8d33b2c9510acbfc"><td class="mdescLeft">&#160;</td><td class="mdescRight">access the first element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4b1fb3671ade9afc8d33b2c9510acbfc">More...</a><br /></td></tr>
<tr class="separator:a4b1fb3671ade9afc8d33b2c9510acbfc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a011397134847f36db0ed7d7a93753677"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a011397134847f36db0ed7d7a93753677">back</a> ()</td></tr>
<tr class="memdesc:a011397134847f36db0ed7d7a93753677"><td class="mdescLeft">&#160;</td><td class="mdescRight">access the last element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a011397134847f36db0ed7d7a93753677">More...</a><br /></td></tr>
<tr class="separator:a011397134847f36db0ed7d7a93753677"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83fe4a151b3a591f357527d5d9aa1b9f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a83fe4a151b3a591f357527d5d9aa1b9f">back</a> () const</td></tr>
<tr class="memdesc:a83fe4a151b3a591f357527d5d9aa1b9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">access the last element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a83fe4a151b3a591f357527d5d9aa1b9f">More...</a><br /></td></tr>
<tr class="separator:a83fe4a151b3a591f357527d5d9aa1b9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a068a16e76be178e83da6a192916923ed"><td class="memTemplParams" colspan="2">template&lt;class IteratorType , typename std::enable_if&lt; std::is_same&lt; IteratorType, typename basic_json_t::iterator &gt;::value or std::is_same&lt; IteratorType, typename basic_json_t::const_iterator &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:a068a16e76be178e83da6a192916923ed"><td class="memTemplItemLeft" align="right" valign="top">IteratorType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a068a16e76be178e83da6a192916923ed">erase</a> (IteratorType pos)</td></tr>
<tr class="memdesc:a068a16e76be178e83da6a192916923ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">remove element given an iterator  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a068a16e76be178e83da6a192916923ed">More...</a><br /></td></tr>
<tr class="separator:a068a16e76be178e83da6a192916923ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b3f7eb2d4625d95a51fbbdceb7c5f39"><td class="memTemplParams" colspan="2">template&lt;class IteratorType , typename std::enable_if&lt; std::is_same&lt; IteratorType, typename basic_json_t::iterator &gt;::value or std::is_same&lt; IteratorType, typename basic_json_t::const_iterator &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:a4b3f7eb2d4625d95a51fbbdceb7c5f39"><td class="memTemplItemLeft" align="right" valign="top">IteratorType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4b3f7eb2d4625d95a51fbbdceb7c5f39">erase</a> (IteratorType first, IteratorType last)</td></tr>
<tr class="memdesc:a4b3f7eb2d4625d95a51fbbdceb7c5f39"><td class="mdescLeft">&#160;</td><td class="mdescRight">remove elements given an iterator range  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4b3f7eb2d4625d95a51fbbdceb7c5f39">More...</a><br /></td></tr>
<tr class="separator:a4b3f7eb2d4625d95a51fbbdceb7c5f39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f8484d69c55d8f2a9697a7bec29362a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2f8484d69c55d8f2a9697a7bec29362a">erase</a> (const typename object_t::key_type &amp;key)</td></tr>
<tr class="memdesc:a2f8484d69c55d8f2a9697a7bec29362a"><td class="mdescLeft">&#160;</td><td class="mdescRight">remove element from a JSON object given a key  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2f8484d69c55d8f2a9697a7bec29362a">More...</a><br /></td></tr>
<tr class="separator:a2f8484d69c55d8f2a9697a7bec29362a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88cbcefe9a3f4d294bed0653550a5cb9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88cbcefe9a3f4d294bed0653550a5cb9">erase</a> (const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a> idx)</td></tr>
<tr class="memdesc:a88cbcefe9a3f4d294bed0653550a5cb9"><td class="mdescLeft">&#160;</td><td class="mdescRight">remove element from a JSON array given an index  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88cbcefe9a3f4d294bed0653550a5cb9">More...</a><br /></td></tr>
<tr class="separator:a88cbcefe9a3f4d294bed0653550a5cb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
lookup</h2></td></tr>
<tr class="memitem:aeed33787bd362c7ead59a4ba945392db"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aeed33787bd362c7ead59a4ba945392db">find</a> (typename object_t::key_type key)</td></tr>
<tr class="memdesc:aeed33787bd362c7ead59a4ba945392db"><td class="mdescLeft">&#160;</td><td class="mdescRight">find an element in a JSON object  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aeed33787bd362c7ead59a4ba945392db">More...</a><br /></td></tr>
<tr class="separator:aeed33787bd362c7ead59a4ba945392db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d2f26a0a84787a43c989c88e2b7023b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a6d2f26a0a84787a43c989c88e2b7023b">find</a> (typename object_t::key_type key) const</td></tr>
<tr class="memdesc:a6d2f26a0a84787a43c989c88e2b7023b"><td class="mdescLeft">&#160;</td><td class="mdescRight">find an element in a JSON object  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a6d2f26a0a84787a43c989c88e2b7023b">More...</a><br /></td></tr>
<tr class="separator:a6d2f26a0a84787a43c989c88e2b7023b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5261eba9637f59d17d6cab5f14ce5747"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5261eba9637f59d17d6cab5f14ce5747">count</a> (typename object_t::key_type key) const</td></tr>
<tr class="memdesc:a5261eba9637f59d17d6cab5f14ce5747"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the number of occurrences of a key in a JSON object  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5261eba9637f59d17d6cab5f14ce5747">More...</a><br /></td></tr>
<tr class="separator:a5261eba9637f59d17d6cab5f14ce5747"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
iterators</h2></td></tr>
<tr class="memitem:aea8c06bb8e632f14cd77632519213d75"><td class="memItemLeft" align="right" valign="top">static iteration_proxy&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea8c06bb8e632f14cd77632519213d75">iterator_wrapper</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a> cont)</td></tr>
<tr class="memdesc:aea8c06bb8e632f14cd77632519213d75"><td class="mdescLeft">&#160;</td><td class="mdescRight">wrapper to access iterator member functions in range-based for  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea8c06bb8e632f14cd77632519213d75">More...</a><br /></td></tr>
<tr class="separator:aea8c06bb8e632f14cd77632519213d75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb4db7abbc5ba12c9273f032a7b89198"><td class="memItemLeft" align="right" valign="top">static iteration_proxy&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#adb4db7abbc5ba12c9273f032a7b89198">iterator_wrapper</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> cont)</td></tr>
<tr class="memdesc:adb4db7abbc5ba12c9273f032a7b89198"><td class="mdescLeft">&#160;</td><td class="mdescRight">wrapper to access iterator member functions in range-based for  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#adb4db7abbc5ba12c9273f032a7b89198">More...</a><br /></td></tr>
<tr class="separator:adb4db7abbc5ba12c9273f032a7b89198"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ff28dac23f2bdecee9564d07f51dcdc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0ff28dac23f2bdecee9564d07f51dcdc">begin</a> () noexcept</td></tr>
<tr class="memdesc:a0ff28dac23f2bdecee9564d07f51dcdc"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns an iterator to the first element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0ff28dac23f2bdecee9564d07f51dcdc">More...</a><br /></td></tr>
<tr class="separator:a0ff28dac23f2bdecee9564d07f51dcdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f0f5dd42b2987ff20306ed78bd31d1d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4f0f5dd42b2987ff20306ed78bd31d1d">begin</a> () const noexcept</td></tr>
<tr class="memdesc:a4f0f5dd42b2987ff20306ed78bd31d1d"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns a const iterator to the first element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4f0f5dd42b2987ff20306ed78bd31d1d">More...</a><br /></td></tr>
<tr class="separator:a4f0f5dd42b2987ff20306ed78bd31d1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad865d6c291b237ae508d5cb2146b5877"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ad865d6c291b237ae508d5cb2146b5877">cbegin</a> () const noexcept</td></tr>
<tr class="memdesc:ad865d6c291b237ae508d5cb2146b5877"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns a const iterator to the first element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ad865d6c291b237ae508d5cb2146b5877">More...</a><br /></td></tr>
<tr class="separator:ad865d6c291b237ae508d5cb2146b5877"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13e032a02a7fd8a93fdddc2fcbc4763c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c">end</a> () noexcept</td></tr>
<tr class="memdesc:a13e032a02a7fd8a93fdddc2fcbc4763c"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns an iterator to one past the last element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c">More...</a><br /></td></tr>
<tr class="separator:a13e032a02a7fd8a93fdddc2fcbc4763c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c15707055088cd5436ae91db72cbe67"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1c15707055088cd5436ae91db72cbe67">end</a> () const noexcept</td></tr>
<tr class="memdesc:a1c15707055088cd5436ae91db72cbe67"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns a const iterator to one past the last element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1c15707055088cd5436ae91db72cbe67">More...</a><br /></td></tr>
<tr class="separator:a1c15707055088cd5436ae91db72cbe67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dba7b7d2f38e6b0c614030aa43983f6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8dba7b7d2f38e6b0c614030aa43983f6">cend</a> () const noexcept</td></tr>
<tr class="memdesc:a8dba7b7d2f38e6b0c614030aa43983f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns a const iterator to one past the last element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8dba7b7d2f38e6b0c614030aa43983f6">More...</a><br /></td></tr>
<tr class="separator:a8dba7b7d2f38e6b0c614030aa43983f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ef93e2006dbe52667294f5ef38b0b10"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac223d5560c2b05a208c88de67376c5f2">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1ef93e2006dbe52667294f5ef38b0b10">rbegin</a> () noexcept</td></tr>
<tr class="memdesc:a1ef93e2006dbe52667294f5ef38b0b10"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns an iterator to the reverse-beginning  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1ef93e2006dbe52667294f5ef38b0b10">More...</a><br /></td></tr>
<tr class="separator:a1ef93e2006dbe52667294f5ef38b0b10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a515e7618392317dbf4b72d3e18bf2ab2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a72be3c24bfa24f0993d6c11af03e7404">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a515e7618392317dbf4b72d3e18bf2ab2">rbegin</a> () const noexcept</td></tr>
<tr class="memdesc:a515e7618392317dbf4b72d3e18bf2ab2"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns a const reverse iterator to the last element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a515e7618392317dbf4b72d3e18bf2ab2">More...</a><br /></td></tr>
<tr class="separator:a515e7618392317dbf4b72d3e18bf2ab2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac77aed0925d447744676725ab0b6d535"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac223d5560c2b05a208c88de67376c5f2">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac77aed0925d447744676725ab0b6d535">rend</a> () noexcept</td></tr>
<tr class="memdesc:ac77aed0925d447744676725ab0b6d535"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns an iterator to the reverse-end  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac77aed0925d447744676725ab0b6d535">More...</a><br /></td></tr>
<tr class="separator:ac77aed0925d447744676725ab0b6d535"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f73d4cee67ea328d785979c22af0ae1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a72be3c24bfa24f0993d6c11af03e7404">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4f73d4cee67ea328d785979c22af0ae1">rend</a> () const noexcept</td></tr>
<tr class="memdesc:a4f73d4cee67ea328d785979c22af0ae1"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns a const reverse iterator to one before the first  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4f73d4cee67ea328d785979c22af0ae1">More...</a><br /></td></tr>
<tr class="separator:a4f73d4cee67ea328d785979c22af0ae1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e0769d22d54573f294da0e5c6abc9de"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a72be3c24bfa24f0993d6c11af03e7404">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1e0769d22d54573f294da0e5c6abc9de">crbegin</a> () const noexcept</td></tr>
<tr class="memdesc:a1e0769d22d54573f294da0e5c6abc9de"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns a const reverse iterator to the last element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1e0769d22d54573f294da0e5c6abc9de">More...</a><br /></td></tr>
<tr class="separator:a1e0769d22d54573f294da0e5c6abc9de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5795b029dbf28e0cb2c7a439ec5d0a88"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a72be3c24bfa24f0993d6c11af03e7404">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5795b029dbf28e0cb2c7a439ec5d0a88">crend</a> () const noexcept</td></tr>
<tr class="memdesc:a5795b029dbf28e0cb2c7a439ec5d0a88"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns a const reverse iterator to one before the first  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5795b029dbf28e0cb2c7a439ec5d0a88">More...</a><br /></td></tr>
<tr class="separator:a5795b029dbf28e0cb2c7a439ec5d0a88"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
capacity</h2></td></tr>
<tr class="memitem:a1a86d444bfeaa9518d2421aedd74444a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1a86d444bfeaa9518d2421aedd74444a">empty</a> () const noexcept</td></tr>
<tr class="memdesc:a1a86d444bfeaa9518d2421aedd74444a"><td class="mdescLeft">&#160;</td><td class="mdescRight">checks whether the container is empty  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1a86d444bfeaa9518d2421aedd74444a">More...</a><br /></td></tr>
<tr class="separator:a1a86d444bfeaa9518d2421aedd74444a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25e27ad0c6d53c01871c5485e1f75b96"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a25e27ad0c6d53c01871c5485e1f75b96">size</a> () const noexcept</td></tr>
<tr class="memdesc:a25e27ad0c6d53c01871c5485e1f75b96"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the number of elements  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a25e27ad0c6d53c01871c5485e1f75b96">More...</a><br /></td></tr>
<tr class="separator:a25e27ad0c6d53c01871c5485e1f75b96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f47d3c6a441c57dd2be00449fbb88e1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2f47d3c6a441c57dd2be00449fbb88e1">max_size</a> () const noexcept</td></tr>
<tr class="memdesc:a2f47d3c6a441c57dd2be00449fbb88e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the maximum possible number of elements  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2f47d3c6a441c57dd2be00449fbb88e1">More...</a><br /></td></tr>
<tr class="separator:a2f47d3c6a441c57dd2be00449fbb88e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
modifiers</h2></td></tr>
<tr class="memitem:abfeba47810ca72f2176419942c4e1952"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abfeba47810ca72f2176419942c4e1952">clear</a> () noexcept</td></tr>
<tr class="memdesc:abfeba47810ca72f2176419942c4e1952"><td class="mdescLeft">&#160;</td><td class="mdescRight">clears the contents  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abfeba47810ca72f2176419942c4e1952">More...</a><br /></td></tr>
<tr class="separator:abfeba47810ca72f2176419942c4e1952"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8e523ddc8c2dd7e5d2daf0d49a9c0d7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac8e523ddc8c2dd7e5d2daf0d49a9c0d7">push_back</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;&amp;val)</td></tr>
<tr class="memdesc:ac8e523ddc8c2dd7e5d2daf0d49a9c0d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">add an object to an array  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac8e523ddc8c2dd7e5d2daf0d49a9c0d7">More...</a><br /></td></tr>
<tr class="separator:ac8e523ddc8c2dd7e5d2daf0d49a9c0d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea1085f2d35cc0e1ce119cf0110119e6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1085f2d35cc0e1ce119cf0110119e6">operator+=</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;&amp;val)</td></tr>
<tr class="memdesc:aea1085f2d35cc0e1ce119cf0110119e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">add an object to an array  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1085f2d35cc0e1ce119cf0110119e6">More...</a><br /></td></tr>
<tr class="separator:aea1085f2d35cc0e1ce119cf0110119e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4384af330b79de0e5f279576803a2c7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab4384af330b79de0e5f279576803a2c7">push_back</a> (const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;val)</td></tr>
<tr class="memdesc:ab4384af330b79de0e5f279576803a2c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">add an object to an array  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab4384af330b79de0e5f279576803a2c7">More...</a><br /></td></tr>
<tr class="separator:ab4384af330b79de0e5f279576803a2c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc29dd6358ff7a9062d7e168c24e7484"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#adc29dd6358ff7a9062d7e168c24e7484">operator+=</a> (const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;val)</td></tr>
<tr class="memdesc:adc29dd6358ff7a9062d7e168c24e7484"><td class="mdescLeft">&#160;</td><td class="mdescRight">add an object to an array  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#adc29dd6358ff7a9062d7e168c24e7484">More...</a><br /></td></tr>
<tr class="separator:adc29dd6358ff7a9062d7e168c24e7484"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae11a3a51782c058fff2f6550cdfb9b3c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae11a3a51782c058fff2f6550cdfb9b3c">push_back</a> (const typename object_t::value_type &amp;val)</td></tr>
<tr class="memdesc:ae11a3a51782c058fff2f6550cdfb9b3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">add an object to an object  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae11a3a51782c058fff2f6550cdfb9b3c">More...</a><br /></td></tr>
<tr class="separator:ae11a3a51782c058fff2f6550cdfb9b3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf04978d85a2d5c4754f4806d42f46fd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abf04978d85a2d5c4754f4806d42f46fd">operator+=</a> (const typename object_t::value_type &amp;val)</td></tr>
<tr class="memdesc:abf04978d85a2d5c4754f4806d42f46fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">add an object to an object  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abf04978d85a2d5c4754f4806d42f46fd">More...</a><br /></td></tr>
<tr class="separator:abf04978d85a2d5c4754f4806d42f46fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2716cbe2e997ab8309926b87f044434"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab2716cbe2e997ab8309926b87f044434">push_back</a> (std::initializer_list&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &gt; init)</td></tr>
<tr class="memdesc:ab2716cbe2e997ab8309926b87f044434"><td class="mdescLeft">&#160;</td><td class="mdescRight">add an object to an object  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab2716cbe2e997ab8309926b87f044434">More...</a><br /></td></tr>
<tr class="separator:ab2716cbe2e997ab8309926b87f044434"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cf23e7d44e78bb9014484971af2f40f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0cf23e7d44e78bb9014484971af2f40f">operator+=</a> (std::initializer_list&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &gt; init)</td></tr>
<tr class="memdesc:a0cf23e7d44e78bb9014484971af2f40f"><td class="mdescLeft">&#160;</td><td class="mdescRight">add an object to an object  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0cf23e7d44e78bb9014484971af2f40f">More...</a><br /></td></tr>
<tr class="separator:a0cf23e7d44e78bb9014484971af2f40f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacf5eed15a8b66fb1e88910707a5e229"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:aacf5eed15a8b66fb1e88910707a5e229"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aacf5eed15a8b66fb1e88910707a5e229">emplace_back</a> (Args &amp;&amp;... args)</td></tr>
<tr class="memdesc:aacf5eed15a8b66fb1e88910707a5e229"><td class="mdescLeft">&#160;</td><td class="mdescRight">add an object to an array  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aacf5eed15a8b66fb1e88910707a5e229">More...</a><br /></td></tr>
<tr class="separator:aacf5eed15a8b66fb1e88910707a5e229"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5338e282d1d02bed389d852dd670d98d"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:a5338e282d1d02bed389d852dd670d98d"><td class="memTemplItemLeft" align="right" valign="top">std::pair&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a>, bool &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5338e282d1d02bed389d852dd670d98d">emplace</a> (Args &amp;&amp;... args)</td></tr>
<tr class="memdesc:a5338e282d1d02bed389d852dd670d98d"><td class="mdescLeft">&#160;</td><td class="mdescRight">add an object to an object if key does not exist  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5338e282d1d02bed389d852dd670d98d">More...</a><br /></td></tr>
<tr class="separator:a5338e282d1d02bed389d852dd670d98d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0136728f5db69d4051c77b94307abd6c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0136728f5db69d4051c77b94307abd6c">insert</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a> pos, const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;val)</td></tr>
<tr class="memdesc:a0136728f5db69d4051c77b94307abd6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">inserts element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0136728f5db69d4051c77b94307abd6c">More...</a><br /></td></tr>
<tr class="separator:a0136728f5db69d4051c77b94307abd6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ecce113ff11dd294689ee4d45cbb855"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1ecce113ff11dd294689ee4d45cbb855">insert</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a> pos, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;&amp;val)</td></tr>
<tr class="memdesc:a1ecce113ff11dd294689ee4d45cbb855"><td class="mdescLeft">&#160;</td><td class="mdescRight">inserts element  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1ecce113ff11dd294689ee4d45cbb855">More...</a><br /></td></tr>
<tr class="separator:a1ecce113ff11dd294689ee4d45cbb855"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30a7cc24f2931c20ecae37ec4a5e901f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a30a7cc24f2931c20ecae37ec4a5e901f">insert</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a> pos, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a> cnt, const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;val)</td></tr>
<tr class="memdesc:a30a7cc24f2931c20ecae37ec4a5e901f"><td class="mdescLeft">&#160;</td><td class="mdescRight">inserts elements  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a30a7cc24f2931c20ecae37ec4a5e901f">More...</a><br /></td></tr>
<tr class="separator:a30a7cc24f2931c20ecae37ec4a5e901f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a404cfe1bdbf1dc6b229627fcf2afb95f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a404cfe1bdbf1dc6b229627fcf2afb95f">insert</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a> pos, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a> first, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a> last)</td></tr>
<tr class="memdesc:a404cfe1bdbf1dc6b229627fcf2afb95f"><td class="mdescLeft">&#160;</td><td class="mdescRight">inserts elements  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a404cfe1bdbf1dc6b229627fcf2afb95f">More...</a><br /></td></tr>
<tr class="separator:a404cfe1bdbf1dc6b229627fcf2afb95f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad154c4228e4867c67b25a6601ced89bd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ad154c4228e4867c67b25a6601ced89bd">insert</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a> pos, std::initializer_list&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &gt; ilist)</td></tr>
<tr class="memdesc:ad154c4228e4867c67b25a6601ced89bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">inserts elements  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ad154c4228e4867c67b25a6601ced89bd">More...</a><br /></td></tr>
<tr class="separator:ad154c4228e4867c67b25a6601ced89bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c9d932353e1ab98a7dc2fc27e002031"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8c9d932353e1ab98a7dc2fc27e002031">swap</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a> other) noexcept(std::is_nothrow_move_constructible&lt; <a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980f">value_t</a> &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a">value</a> and std::is_nothrow_move_assignable&lt; <a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980f">value_t</a> &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a">value</a> and std::is_nothrow_move_constructible&lt; json_value &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a">value</a> and std::is_nothrow_move_assignable&lt; json_value &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a">value</a>)</td></tr>
<tr class="memdesc:a8c9d932353e1ab98a7dc2fc27e002031"><td class="mdescLeft">&#160;</td><td class="mdescRight">exchanges the values  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8c9d932353e1ab98a7dc2fc27e002031">More...</a><br /></td></tr>
<tr class="separator:a8c9d932353e1ab98a7dc2fc27e002031"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65b0a24e1361a030ad0a661de22f6c8e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a65b0a24e1361a030ad0a661de22f6c8e">swap</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae095578e03df97c5b3991787f1056374">array_t</a> &amp;other)</td></tr>
<tr class="memdesc:a65b0a24e1361a030ad0a661de22f6c8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">exchanges the values  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a65b0a24e1361a030ad0a661de22f6c8e">More...</a><br /></td></tr>
<tr class="separator:a65b0a24e1361a030ad0a661de22f6c8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac31f12587d2f1a3be5ffc394aa9d72a4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac31f12587d2f1a3be5ffc394aa9d72a4">swap</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa1eb13d5aa86f80cbee6c58e90fbaf49">object_t</a> &amp;other)</td></tr>
<tr class="memdesc:ac31f12587d2f1a3be5ffc394aa9d72a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">exchanges the values  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac31f12587d2f1a3be5ffc394aa9d72a4">More...</a><br /></td></tr>
<tr class="separator:ac31f12587d2f1a3be5ffc394aa9d72a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adaa1ed0a889d86c8e0216a3d66980f76"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#adaa1ed0a889d86c8e0216a3d66980f76">swap</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a> &amp;other)</td></tr>
<tr class="memdesc:adaa1ed0a889d86c8e0216a3d66980f76"><td class="mdescLeft">&#160;</td><td class="mdescRight">exchanges the values  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#adaa1ed0a889d86c8e0216a3d66980f76">More...</a><br /></td></tr>
<tr class="separator:adaa1ed0a889d86c8e0216a3d66980f76"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
lexicographical comparison operators</h2></td></tr>
<tr class="memitem:a122640e7e2db1814fc7bbb3c122ec76e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a122640e7e2db1814fc7bbb3c122ec76e">operator==</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> lhs, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> rhs) noexcept</td></tr>
<tr class="memdesc:a122640e7e2db1814fc7bbb3c122ec76e"><td class="mdescLeft">&#160;</td><td class="mdescRight">comparison: equal  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a122640e7e2db1814fc7bbb3c122ec76e">More...</a><br /></td></tr>
<tr class="separator:a122640e7e2db1814fc7bbb3c122ec76e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba21440ea1aff44f718285ed7d6d20d9"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:aba21440ea1aff44f718285ed7d6d20d9"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aba21440ea1aff44f718285ed7d6d20d9">operator==</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> lhs, const ScalarType rhs) noexcept</td></tr>
<tr class="memdesc:aba21440ea1aff44f718285ed7d6d20d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">comparison: equal  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aba21440ea1aff44f718285ed7d6d20d9">More...</a><br /></td></tr>
<tr class="separator:aba21440ea1aff44f718285ed7d6d20d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef302e3ae215e46e5035d0e4fdf47235"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:aef302e3ae215e46e5035d0e4fdf47235"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aef302e3ae215e46e5035d0e4fdf47235">operator==</a> (const ScalarType lhs, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> rhs) noexcept</td></tr>
<tr class="memdesc:aef302e3ae215e46e5035d0e4fdf47235"><td class="mdescLeft">&#160;</td><td class="mdescRight">comparison: equal  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aef302e3ae215e46e5035d0e4fdf47235">More...</a><br /></td></tr>
<tr class="separator:aef302e3ae215e46e5035d0e4fdf47235"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e2e21da48f5d9471716cd868a068327"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a6e2e21da48f5d9471716cd868a068327">operator!=</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> lhs, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> rhs) noexcept</td></tr>
<tr class="memdesc:a6e2e21da48f5d9471716cd868a068327"><td class="mdescLeft">&#160;</td><td class="mdescRight">comparison: not equal  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a6e2e21da48f5d9471716cd868a068327">More...</a><br /></td></tr>
<tr class="separator:a6e2e21da48f5d9471716cd868a068327"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afefc38fc08bdb7a9a7474b5ab4a1140f"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:afefc38fc08bdb7a9a7474b5ab4a1140f"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#afefc38fc08bdb7a9a7474b5ab4a1140f">operator!=</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> lhs, const ScalarType rhs) noexcept</td></tr>
<tr class="memdesc:afefc38fc08bdb7a9a7474b5ab4a1140f"><td class="mdescLeft">&#160;</td><td class="mdescRight">comparison: not equal  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#afefc38fc08bdb7a9a7474b5ab4a1140f">More...</a><br /></td></tr>
<tr class="separator:afefc38fc08bdb7a9a7474b5ab4a1140f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0e886db6e9fa91ff9fd853333fed05b"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:ab0e886db6e9fa91ff9fd853333fed05b"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab0e886db6e9fa91ff9fd853333fed05b">operator!=</a> (const ScalarType lhs, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> rhs) noexcept</td></tr>
<tr class="memdesc:ab0e886db6e9fa91ff9fd853333fed05b"><td class="mdescLeft">&#160;</td><td class="mdescRight">comparison: not equal  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab0e886db6e9fa91ff9fd853333fed05b">More...</a><br /></td></tr>
<tr class="separator:ab0e886db6e9fa91ff9fd853333fed05b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacd442b66140c764c594ac8ad7dfd5b3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aacd442b66140c764c594ac8ad7dfd5b3">operator&lt;</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> lhs, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> rhs) noexcept</td></tr>
<tr class="memdesc:aacd442b66140c764c594ac8ad7dfd5b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">comparison: less than  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aacd442b66140c764c594ac8ad7dfd5b3">More...</a><br /></td></tr>
<tr class="separator:aacd442b66140c764c594ac8ad7dfd5b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c8bb5200f5eac10d31e26be46e5b1ac"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5c8bb5200f5eac10d31e26be46e5b1ac">operator&lt;=</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> lhs, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> rhs) noexcept</td></tr>
<tr class="memdesc:a5c8bb5200f5eac10d31e26be46e5b1ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">comparison: less than or equal  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5c8bb5200f5eac10d31e26be46e5b1ac">More...</a><br /></td></tr>
<tr class="separator:a5c8bb5200f5eac10d31e26be46e5b1ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87db51b6b936fb2ea293cdbc8702dcb8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a87db51b6b936fb2ea293cdbc8702dcb8">operator&gt;</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> lhs, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> rhs) noexcept</td></tr>
<tr class="memdesc:a87db51b6b936fb2ea293cdbc8702dcb8"><td class="mdescLeft">&#160;</td><td class="mdescRight">comparison: greater than  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a87db51b6b936fb2ea293cdbc8702dcb8">More...</a><br /></td></tr>
<tr class="separator:a87db51b6b936fb2ea293cdbc8702dcb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74a943800c7f103d0990d7eef82c6453"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a74a943800c7f103d0990d7eef82c6453">operator&gt;=</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> lhs, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> rhs) noexcept</td></tr>
<tr class="memdesc:a74a943800c7f103d0990d7eef82c6453"><td class="mdescLeft">&#160;</td><td class="mdescRight">comparison: greater than or equal  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a74a943800c7f103d0990d7eef82c6453">More...</a><br /></td></tr>
<tr class="separator:a74a943800c7f103d0990d7eef82c6453"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
serialization</h2></td></tr>
<tr class="memitem:a5e34c5435e557d0bf666bd7311211405"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5e34c5435e557d0bf666bd7311211405">operator&lt;&lt;</a> (std::ostream &amp;o, const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;j)</td></tr>
<tr class="memdesc:a5e34c5435e557d0bf666bd7311211405"><td class="mdescLeft">&#160;</td><td class="mdescRight">serialize to stream  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5e34c5435e557d0bf666bd7311211405">More...</a><br /></td></tr>
<tr class="separator:a5e34c5435e557d0bf666bd7311211405"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34d6a60dd99e9f33b8273a1c8db5669b"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a34d6a60dd99e9f33b8273a1c8db5669b">operator&gt;&gt;</a> (const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;j, std::ostream &amp;o)</td></tr>
<tr class="memdesc:a34d6a60dd99e9f33b8273a1c8db5669b"><td class="mdescLeft">&#160;</td><td class="mdescRight">serialize to stream  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a34d6a60dd99e9f33b8273a1c8db5669b">More...</a><br /></td></tr>
<tr class="separator:a34d6a60dd99e9f33b8273a1c8db5669b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
deserialization</h2></td></tr>
<tr class="memitem:a60ca396028b8d9714c6e10efbf475af6"><td class="memItemLeft" align="right" valign="top">std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a60ca396028b8d9714c6e10efbf475af6">operator&lt;&lt;</a> (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;j, std::istream &amp;i)</td></tr>
<tr class="memdesc:a60ca396028b8d9714c6e10efbf475af6"><td class="mdescLeft">&#160;</td><td class="mdescRight">deserialize from stream  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a60ca396028b8d9714c6e10efbf475af6">More...</a><br /></td></tr>
<tr class="separator:a60ca396028b8d9714c6e10efbf475af6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf363408931d76472ded14017e59c9e8"><td class="memItemLeft" align="right" valign="top">std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aaf363408931d76472ded14017e59c9e8">operator&gt;&gt;</a> (std::istream &amp;i, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;j)</td></tr>
<tr class="memdesc:aaf363408931d76472ded14017e59c9e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">deserialize from stream  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aaf363408931d76472ded14017e59c9e8">More...</a><br /></td></tr>
<tr class="separator:aaf363408931d76472ded14017e59c9e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86f339e8449cce96b89e86635a7d389e"><td class="memTemplParams" colspan="2">template&lt;class T , std::size_t N&gt; </td></tr>
<tr class="memitem:a86f339e8449cce96b89e86635a7d389e"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a86f339e8449cce96b89e86635a7d389e">parse</a> (T(&amp;<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4a4ec75e4d2845d9bcf7a9e5458e4949">array</a>)[N], const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a> cb=nullptr)</td></tr>
<tr class="memdesc:a86f339e8449cce96b89e86635a7d389e"><td class="mdescLeft">&#160;</td><td class="mdescRight">deserialize from an array  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a86f339e8449cce96b89e86635a7d389e">More...</a><br /></td></tr>
<tr class="separator:a86f339e8449cce96b89e86635a7d389e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab275a3e00a40189e96d244de6c8f311a"><td class="memTemplParams" colspan="2">template&lt;typename CharT , typename std::enable_if&lt; std::is_pointer&lt; CharT &gt;::value and std::is_integral&lt; typename std::remove_pointer&lt; CharT &gt;::type &gt;::value and sizeof(typename std::remove_pointer&lt; CharT &gt;::type &gt; </td></tr>
<tr class="memitem:ab275a3e00a40189e96d244de6c8f311a"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab275a3e00a40189e96d244de6c8f311a">parse</a> (const CharT s, const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a> cb=nullptr)</td></tr>
<tr class="memdesc:ab275a3e00a40189e96d244de6c8f311a"><td class="mdescLeft">&#160;</td><td class="mdescRight">deserialize from string literal  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab275a3e00a40189e96d244de6c8f311a">More...</a><br /></td></tr>
<tr class="separator:ab275a3e00a40189e96d244de6c8f311a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cd30efe5c33a7cf73a0c6495bb16054"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4cd30efe5c33a7cf73a0c6495bb16054">parse</a> (std::istream &amp;i, const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a> cb=nullptr)</td></tr>
<tr class="memdesc:a4cd30efe5c33a7cf73a0c6495bb16054"><td class="mdescLeft">&#160;</td><td class="mdescRight">deserialize from stream  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4cd30efe5c33a7cf73a0c6495bb16054">More...</a><br /></td></tr>
<tr class="separator:a4cd30efe5c33a7cf73a0c6495bb16054"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bd712a1351ba28e5440fac2359da1cb"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a3bd712a1351ba28e5440fac2359da1cb">parse</a> (std::istream &amp;&amp;i, const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a> cb=nullptr)</td></tr>
<tr class="memdesc:a3bd712a1351ba28e5440fac2359da1cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">deserialize from stream  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a3bd712a1351ba28e5440fac2359da1cb">More...</a><br /></td></tr>
<tr class="separator:a3bd712a1351ba28e5440fac2359da1cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a360d37260add46be89881db2366fe343"><td class="memTemplParams" colspan="2">template&lt;class IteratorType , typename std::enable_if&lt; std::is_base_of&lt; std::random_access_iterator_tag, typename std::iterator_traits&lt; IteratorType &gt;::iterator_category &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:a360d37260add46be89881db2366fe343"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a360d37260add46be89881db2366fe343">parse</a> (IteratorType first, IteratorType last, const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a> cb=nullptr)</td></tr>
<tr class="memdesc:a360d37260add46be89881db2366fe343"><td class="mdescLeft">&#160;</td><td class="mdescRight">deserialize from an iterator range with contiguous storage  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a360d37260add46be89881db2366fe343">More...</a><br /></td></tr>
<tr class="separator:a360d37260add46be89881db2366fe343"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00795fca3388571ba4a56a1ea6e0466b"><td class="memTemplParams" colspan="2">template&lt;class ContiguousContainer , typename std::enable_if&lt; not std::is_pointer&lt; ContiguousContainer &gt;::value and std::is_base_of&lt; std::random_access_iterator_tag, typename std::iterator_traits&lt;  decltype&gt; </td></tr>
<tr class="memitem:a00795fca3388571ba4a56a1ea6e0466b"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a00795fca3388571ba4a56a1ea6e0466b">parse</a> (const ContiguousContainer &amp;c, const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a> cb=nullptr)</td></tr>
<tr class="memdesc:a00795fca3388571ba4a56a1ea6e0466b"><td class="mdescLeft">&#160;</td><td class="mdescRight">deserialize from a container with contiguous storage  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a00795fca3388571ba4a56a1ea6e0466b">More...</a><br /></td></tr>
<tr class="separator:a00795fca3388571ba4a56a1ea6e0466b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
binary serialization/deserialization support</h2></td></tr>
<tr class="memitem:a09ca1dc273d226afe0ca83a9d7438d9c"><td class="memItemLeft" align="right" valign="top">static std::vector&lt; uint8_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a09ca1dc273d226afe0ca83a9d7438d9c">to_msgpack</a> (const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;j)</td></tr>
<tr class="memdesc:a09ca1dc273d226afe0ca83a9d7438d9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">create a MessagePack serialization of a given JSON value  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a09ca1dc273d226afe0ca83a9d7438d9c">More...</a><br /></td></tr>
<tr class="separator:a09ca1dc273d226afe0ca83a9d7438d9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3eafe0b1fb2f2c443f1b3fea55c8a470"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a3eafe0b1fb2f2c443f1b3fea55c8a470">from_msgpack</a> (const std::vector&lt; uint8_t &gt; &amp;v, const size_t start_index=0)</td></tr>
<tr class="memdesc:a3eafe0b1fb2f2c443f1b3fea55c8a470"><td class="mdescLeft">&#160;</td><td class="mdescRight">create a JSON value from a byte vector in MessagePack format  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a3eafe0b1fb2f2c443f1b3fea55c8a470">More...</a><br /></td></tr>
<tr class="separator:a3eafe0b1fb2f2c443f1b3fea55c8a470"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2566783e190dec524bf3445b322873b8"><td class="memItemLeft" align="right" valign="top">static std::vector&lt; uint8_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2566783e190dec524bf3445b322873b8">to_cbor</a> (const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;j)</td></tr>
<tr class="memdesc:a2566783e190dec524bf3445b322873b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">create a MessagePack serialization of a given JSON value  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2566783e190dec524bf3445b322873b8">More...</a><br /></td></tr>
<tr class="separator:a2566783e190dec524bf3445b322873b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5e3e1758c1a52ffe89b1d379ef7fbe1"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab5e3e1758c1a52ffe89b1d379ef7fbe1">from_cbor</a> (const std::vector&lt; uint8_t &gt; &amp;v, const size_t start_index=0)</td></tr>
<tr class="memdesc:ab5e3e1758c1a52ffe89b1d379ef7fbe1"><td class="mdescLeft">&#160;</td><td class="mdescRight">create a JSON value from a byte vector in CBOR format  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab5e3e1758c1a52ffe89b1d379ef7fbe1">More...</a><br /></td></tr>
<tr class="separator:ab5e3e1758c1a52ffe89b1d379ef7fbe1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
JSON Pointer functions</h2></td></tr>
<tr class="memitem:ac6946dffeb3be5aa173645f0467a44b3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6946dffeb3be5aa173645f0467a44b3">operator[]</a> (const <a class="el" href="../../d4/d60/classnlohmann_1_1basic__json_1_1json__pointer.xhtml">json_pointer</a> &amp;ptr)</td></tr>
<tr class="memdesc:ac6946dffeb3be5aa173645f0467a44b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">access specified element via JSON Pointer  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6946dffeb3be5aa173645f0467a44b3">More...</a><br /></td></tr>
<tr class="separator:ac6946dffeb3be5aa173645f0467a44b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d55e3e63b05e03a2b70cea3761f84cb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9d55e3e63b05e03a2b70cea3761f84cb">operator[]</a> (const <a class="el" href="../../d4/d60/classnlohmann_1_1basic__json_1_1json__pointer.xhtml">json_pointer</a> &amp;ptr) const</td></tr>
<tr class="memdesc:a9d55e3e63b05e03a2b70cea3761f84cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">access specified element via JSON Pointer  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9d55e3e63b05e03a2b70cea3761f84cb">More...</a><br /></td></tr>
<tr class="separator:a9d55e3e63b05e03a2b70cea3761f84cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ab61397c10f18b305520da7073b2b45"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8ab61397c10f18b305520da7073b2b45">at</a> (const <a class="el" href="../../d4/d60/classnlohmann_1_1basic__json_1_1json__pointer.xhtml">json_pointer</a> &amp;ptr)</td></tr>
<tr class="memdesc:a8ab61397c10f18b305520da7073b2b45"><td class="mdescLeft">&#160;</td><td class="mdescRight">access specified element via JSON Pointer  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8ab61397c10f18b305520da7073b2b45">More...</a><br /></td></tr>
<tr class="separator:a8ab61397c10f18b305520da7073b2b45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7479d686148c26e252781bb32aa5d5c9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a7479d686148c26e252781bb32aa5d5c9">at</a> (const <a class="el" href="../../d4/d60/classnlohmann_1_1basic__json_1_1json__pointer.xhtml">json_pointer</a> &amp;ptr) const</td></tr>
<tr class="memdesc:a7479d686148c26e252781bb32aa5d5c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">access specified element via JSON Pointer  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a7479d686148c26e252781bb32aa5d5c9">More...</a><br /></td></tr>
<tr class="separator:a7479d686148c26e252781bb32aa5d5c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab838f000d76662917ffd6ec529569e03"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab838f000d76662917ffd6ec529569e03">flatten</a> () const</td></tr>
<tr class="memdesc:ab838f000d76662917ffd6ec529569e03"><td class="mdescLeft">&#160;</td><td class="mdescRight">return flattened JSON value  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab838f000d76662917ffd6ec529569e03">More...</a><br /></td></tr>
<tr class="separator:ab838f000d76662917ffd6ec529569e03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74fa3ab2003f2f6f2b69deaafed9126d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a74fa3ab2003f2f6f2b69deaafed9126d">unflatten</a> () const</td></tr>
<tr class="memdesc:a74fa3ab2003f2f6f2b69deaafed9126d"><td class="mdescLeft">&#160;</td><td class="mdescRight">unflatten a previously flattened JSON value  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a74fa3ab2003f2f6f2b69deaafed9126d">More...</a><br /></td></tr>
<tr class="separator:a74fa3ab2003f2f6f2b69deaafed9126d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
JSON Patch functions</h2></td></tr>
<tr class="memitem:a543bd5f7490de54c875b2c0912dc9a49"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a543bd5f7490de54c875b2c0912dc9a49">diff</a> (const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;source, const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;target, const std::string &amp;path=&quot;&quot;)</td></tr>
<tr class="memdesc:a543bd5f7490de54c875b2c0912dc9a49"><td class="mdescLeft">&#160;</td><td class="mdescRight">creates a diff as a JSON patch  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a543bd5f7490de54c875b2c0912dc9a49">More...</a><br /></td></tr>
<tr class="separator:a543bd5f7490de54c875b2c0912dc9a49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81e0c41a4a9dff4df2f6973f7f8b2a83"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a81e0c41a4a9dff4df2f6973f7f8b2a83">patch</a> (const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> &amp;json_patch) const</td></tr>
<tr class="memdesc:a81e0c41a4a9dff4df2f6973f7f8b2a83"><td class="mdescLeft">&#160;</td><td class="mdescRight">applies a JSON patch  <a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a81e0c41a4a9dff4df2f6973f7f8b2a83">More...</a><br /></td></tr>
<tr class="separator:a81e0c41a4a9dff4df2f6973f7f8b2a83"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType = std::string, class BooleanType = bool, class NumberIntegerType = std::int64_t, class NumberUnsignedType = std::uint64_t, class NumberFloatType = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt;<br />
class nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;</h3>

<p>a class to store JSON values </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ObjectType</td><td>type for JSON objects (<code>std::map</code> by default; will be used in <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa1eb13d5aa86f80cbee6c58e90fbaf49">object_t</a>) </td></tr>
    <tr><td class="paramname">ArrayType</td><td>type for JSON arrays (<code>std::vector</code> by default; will be used in <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae095578e03df97c5b3991787f1056374">array_t</a>) </td></tr>
    <tr><td class="paramname">StringType</td><td>type for JSON strings and object keys (<code>std::string</code> by default; will be used in <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a>) </td></tr>
    <tr><td class="paramname">BooleanType</td><td>type for JSON booleans (<code>bool</code> by default; will be used in <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4c919102a9b4fe0d588af64801436082">boolean_t</a>) </td></tr>
    <tr><td class="paramname">NumberIntegerType</td><td>type for JSON integer numbers (<code>int64_t</code> by default; will be used in <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a98e611d67b7bd75307de99c9358ab2dc">number_integer_t</a>) </td></tr>
    <tr><td class="paramname">NumberUnsignedType</td><td>type for JSON unsigned integer numbers (<code><code>uint64_t</code></code> by default; will be used in <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab906e29b5d83ac162e823ada2156b989">number_unsigned_t</a>) </td></tr>
    <tr><td class="paramname">NumberFloatType</td><td>type for JSON floating-point numbers (<code>double</code> by default; will be used in <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88d6103cb3620410b35200ee8e313d97">number_float_t</a>) </td></tr>
    <tr><td class="paramname">AllocatorType</td><td>type of the allocator to use (<code>std::allocator</code> by default) </td></tr>
    <tr><td class="paramname">JSONSerializer</td><td>the serializer to resolve internal calls to <code><a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a6fa2f784014bfc0b62d7a35d51e676c9">to_json()</a></code> and <code><a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a839b0ab50d2c9bce669068f56bc41202">from_json()</a></code> (<a class="el" href="../../dc/dc7/structnlohmann_1_1adl__serializer.xhtml">adl_serializer</a> by default)</td></tr>
  </table>
  </dd>
</dl>
<p>@requirement The class satisfies the following concept requirements:</p><ul>
<li>Basic<ul>
<li><a href="http://en.cppreference.com/w/cpp/concept/DefaultConstructible">DefaultConstructible</a>: JSON values can be default constructed. The result will be a JSON null value.</li>
<li><a href="http://en.cppreference.com/w/cpp/concept/MoveConstructible">MoveConstructible</a>: A JSON value can be constructed from an rvalue argument.</li>
<li><a href="http://en.cppreference.com/w/cpp/concept/CopyConstructible">CopyConstructible</a>: A JSON value can be copy-constructed from an lvalue expression.</li>
<li><a href="http://en.cppreference.com/w/cpp/concept/MoveAssignable">MoveAssignable</a>: A JSON value van be assigned from an rvalue argument.</li>
<li><a href="http://en.cppreference.com/w/cpp/concept/CopyAssignable">CopyAssignable</a>: A JSON value can be copy-assigned from an lvalue expression.</li>
<li><a href="http://en.cppreference.com/w/cpp/concept/Destructible">Destructible</a>: JSON values can be destructed.</li>
</ul>
</li>
<li>Layout<ul>
<li><a href="http://en.cppreference.com/w/cpp/concept/StandardLayoutType">StandardLayoutType</a>: JSON values have <a href="http://en.cppreference.com/w/cpp/language/data_members#Standard_layout">standard layout</a>: All non-static data members are private and standard layout types, the class has no virtual functions or (virtual) base classes.</li>
</ul>
</li>
<li>Library-wide<ul>
<li><a href="http://en.cppreference.com/w/cpp/concept/EqualityComparable">EqualityComparable</a>: JSON values can be compared with <code>==</code>, see <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a122640e7e2db1814fc7bbb3c122ec76e">operator==(const_reference,const_reference)</a>.</li>
<li><a href="http://en.cppreference.com/w/cpp/concept/LessThanComparable">LessThanComparable</a>: JSON values can be compared with <code>&lt;</code>, see <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aacd442b66140c764c594ac8ad7dfd5b3">operator&lt;(const_reference,const_reference)</a>.</li>
<li><a href="http://en.cppreference.com/w/cpp/concept/Swappable">Swappable</a>: <a class="el" href="../../db/da7/struct_any.xhtml">Any</a> JSON lvalue or rvalue of can be swapped with any lvalue or rvalue of other compatible types, using unqualified function call <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8c9d932353e1ab98a7dc2fc27e002031">swap()</a>.</li>
<li><a href="http://en.cppreference.com/w/cpp/concept/NullablePointer">NullablePointer</a>: JSON values can be compared against <code>std::nullptr_t</code> objects which are used to model the <code>null</code> value.</li>
</ul>
</li>
<li>Container<ul>
<li><a href="http://en.cppreference.com/w/cpp/concept/Container">Container</a>: JSON values can be used like STL containers and provide iterator access.</li>
<li><a href="http://en.cppreference.com/w/cpp/concept/ReversibleContainer">ReversibleContainer</a>; JSON values can be used like STL containers and provide reverse iterator access.</li>
</ul>
</li>
</ul>
<dl class="section invariant"><dt>Invariant</dt><dd>The member variables <em>m_value</em> and <em>m_type</em> have the following relationship:<ul>
<li>If <code>m_type == <a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980faa8cfde6331bd59eb2ac96f8911c4b666" title="object (unordered set of name/value pairs)">value_t::object</a></code>, then <code>m_value.object != nullptr</code>.</li>
<li>If <code>m_type == <a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980faf1f713c9e000f5d3f280adbd124df4f5" title="array (ordered collection of values)">value_t::array</a></code>, then <code>m_value.array != nullptr</code>.</li>
<li>If <code>m_type == <a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980fab45cffe084dd3d20d928bee85e7b0f21" title="string value">value_t::string</a></code>, then <code>m_value.string != nullptr</code>. The invariants are checked by member function assert_invariant().</li>
</ul>
</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a href="http://rfc7159.net/rfc7159">RFC 7159: The JavaScript Object Notation (JSON) Data Interchange Format</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a86ce930490cf7773b26f5ef49c04a350"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86ce930490cf7773b26f5ef49c04a350">&#9670;&nbsp;</a></span>allocator_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a86ce930490cf7773b26f5ef49c04a350">allocator_type</a> =  AllocatorType&lt;<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>the allocator type </p>

</div>
</div>
<a id="ae095578e03df97c5b3991787f1056374"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae095578e03df97c5b3991787f1056374">&#9670;&nbsp;</a></span>array_t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae095578e03df97c5b3991787f1056374">array_t</a> =  ArrayType&lt;<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>, AllocatorType&lt;<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>a type for an array </p>
<p><a href="http://rfc7159.net/rfc7159">RFC 7159</a> describes JSON arrays as follows: </p><blockquote class="doxtable">
<p>An array is an ordered sequence of zero or more values. </p>
</blockquote>
<p>To store objects in C++, a type is defined by the template parameters explained below.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ArrayType</td><td>container type to store arrays (e.g., <code>std::vector</code> or <code>std::list</code>) </td></tr>
    <tr><td class="paramname">AllocatorType</td><td>allocator to use for arrays (e.g., <code>std::allocator</code>)</td></tr>
  </table>
  </dd>
</dl>
<h4><a class="anchor" id="autotoc_md4"></a>
Default type</h4>
<p>With the default values for <em>ArrayType</em> (<code>std::vector</code>) and <em>AllocatorType</em> (<code>std::allocator</code>), the default value for <em>array_t</em> is:</p>
<div class="fragment"><div class="line">std::vector&lt;</div>
<div class="line">  <a class="code" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a32124a16dc80729d964d9caf607c2bc8">basic_json</a>, <span class="comment">// value_type</span></div>
<div class="line">  std::allocator&lt;basic_json&gt; <span class="comment">// allocator_type</span></div>
<div class="line">&gt;</div>
</div><!-- fragment --><h4><a class="anchor" id="autotoc_md5"></a>
Limits</h4>
<p><a href="http://rfc7159.net/rfc7159">RFC 7159</a> specifies: </p><blockquote class="doxtable">
<p>An implementation may set limits on the maximum depth of nesting. </p>
</blockquote>
<p>In this class, the array's limit of nesting is not constraint explicitly. However, a maximum depth of nesting may be introduced by the compiler or runtime environment. A theoretical limit can be queried by calling the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2f47d3c6a441c57dd2be00449fbb88e1">max_size</a> function of a JSON array.</p>
<h4><a class="anchor" id="autotoc_md6"></a>
Storage</h4>
<p>Arrays are stored as pointers in a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> type. That is, for any access to array values, a pointer of type <code>array_t*</code> must be dereferenced.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa1eb13d5aa86f80cbee6c58e90fbaf49">object_t</a> &ndash; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b2d781d7f2a4ee41bc0016e931cadf7" title="return the type of the JSON value (explicit)">type</a> for an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9f42ee7d10eee2d5a73fd94ca7f767ca" title="explicitly create an object from an initializer list">object</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="a4c919102a9b4fe0d588af64801436082"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c919102a9b4fe0d588af64801436082">&#9670;&nbsp;</a></span>boolean_t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4c919102a9b4fe0d588af64801436082">boolean_t</a> =  BooleanType</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>a type for a boolean </p>
<p><a href="http://rfc7159.net/rfc7159">RFC 7159</a> implicitly describes a boolean as a type which differentiates the two literals <code>true</code> and <code>false</code>.</p>
<p>To store objects in C++, a type is defined by the template parameter <em>BooleanType</em> which chooses the type to use.</p>
<h4><a class="anchor" id="autotoc_md11"></a>
Default type</h4>
<p>With the default values for <em>BooleanType</em> (<code>bool</code>), the default value for <em>boolean_t</em> is:</p>
<div class="fragment"><div class="line"><span class="keywordtype">bool</span></div>
</div><!-- fragment --><h4><a class="anchor" id="autotoc_md12"></a>
Storage</h4>
<p>Boolean values are stored directly inside a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> type.</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="a41a70cf9993951836d129bb1c2b3126a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41a70cf9993951836d129bb1c2b3126a">&#9670;&nbsp;</a></span>const_iterator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a> =  <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt;const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>a const iterator for a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a> container </p>

</div>
</div>
<a id="aff3d5cd2a75612364b888d8693231b58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff3d5cd2a75612364b888d8693231b58">&#9670;&nbsp;</a></span>const_pointer</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aff3d5cd2a75612364b888d8693231b58">const_pointer</a> =  typename std::allocator_traits&lt;<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a86ce930490cf7773b26f5ef49c04a350">allocator_type</a>&gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aff3d5cd2a75612364b888d8693231b58">const_pointer</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>the type of an element const pointer </p>

</div>
</div>
<a id="a4057c5425f4faacfe39a8046871786ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4057c5425f4faacfe39a8046871786ca">&#9670;&nbsp;</a></span>const_reference</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> =  const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b3297873b70c080837e8eedc4fec32f">value_type</a>&amp;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>the type of an element const reference </p>

</div>
</div>
<a id="a72be3c24bfa24f0993d6c11af03e7404"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72be3c24bfa24f0993d6c11af03e7404">&#9670;&nbsp;</a></span>const_reverse_iterator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a72be3c24bfa24f0993d6c11af03e7404">const_reverse_iterator</a> =  <a class="el" href="../../d1/d8e/classnlohmann_1_1basic__json_1_1json__reverse__iterator.xhtml">json_reverse_iterator</a>&lt;typename <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">basic_json::const_iterator</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>a const reverse iterator for a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a> container </p>

</div>
</div>
<a id="afe7c1303357e19cea9527af4e9a31d8f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe7c1303357e19cea9527af4e9a31d8f">&#9670;&nbsp;</a></span>difference_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#afe7c1303357e19cea9527af4e9a31d8f">difference_type</a> =  std::ptrdiff_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>a type to represent differences between iterators </p>

</div>
</div>
<a id="a099316232c76c034030a38faa6e34dca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a099316232c76c034030a38faa6e34dca">&#9670;&nbsp;</a></span>iterator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a> =  <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml">iter_impl</a>&lt;<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>an iterator for a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a> container </p>

</div>
</div>
<a id="a7768841baaaa7a21098a401c932efaff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7768841baaaa7a21098a401c932efaff">&#9670;&nbsp;</a></span>json_serializer</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename T , typename SFINAE &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a7768841baaaa7a21098a401c932efaff">json_serializer</a> =  JSONSerializer&lt;T, SFINAE&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a88d6103cb3620410b35200ee8e313d97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88d6103cb3620410b35200ee8e313d97">&#9670;&nbsp;</a></span>number_float_t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88d6103cb3620410b35200ee8e313d97">number_float_t</a> =  NumberFloatType</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>a type for a number (floating-point) </p>
<p><a href="http://rfc7159.net/rfc7159">RFC 7159</a> describes numbers as follows: </p><blockquote class="doxtable">
<p>The representation of numbers is similar to that used in most programming languages. A number is represented in base 10 using decimal digits. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part. Leading zeros are not allowed. (...) Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted. </p>
</blockquote>
<p>This description includes both integer and floating-point numbers. However, C++ allows more precise storage if it is known whether the number is a signed integer, an unsigned integer or a floating-point number. Therefore, three different types, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a98e611d67b7bd75307de99c9358ab2dc">number_integer_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab906e29b5d83ac162e823ada2156b989">number_unsigned_t</a> and <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88d6103cb3620410b35200ee8e313d97">number_float_t</a> are used.</p>
<p>To store floating-point numbers in C++, a type is defined by the template parameter <em>NumberFloatType</em> which chooses the type to use.</p>
<h4><a class="anchor" id="autotoc_md21"></a>
Default type</h4>
<p>With the default values for <em>NumberFloatType</em> (<code>double</code>), the default value for <em>number_float_t</em> is:</p>
<div class="fragment"><div class="line"><span class="keywordtype">double</span></div>
</div><!-- fragment --><h4><a class="anchor" id="autotoc_md22"></a>
Default behavior</h4>
<ul>
<li>The restrictions about leading zeros is not enforced in C++. Instead, leading zeros in floating-point literals will be ignored. Internally, the value will be stored as decimal number. For instance, the C++ floating-point literal <code>01.2</code> will be serialized to <code>1.2</code>. During deserialization, leading zeros yield an error.</li>
<li>Not-a-number (NaN) values will be serialized to <code>null</code>.</li>
</ul>
<h4><a class="anchor" id="autotoc_md23"></a>
Limits</h4>
<p><a href="http://rfc7159.net/rfc7159">RFC 7159</a> states: </p><blockquote class="doxtable">
<p>This specification allows implementations to set limits on the range and precision of numbers accepted. Since software that implements IEEE 754-2008 binary64 (double precision) numbers is generally available and widely used, good interoperability can be achieved by implementations that expect no more precision or range than these provide, in the sense that implementations will approximate JSON numbers within the expected precision. </p>
</blockquote>
<p>This implementation does exactly follow this approach, as it uses double precision floating-point numbers. Note values smaller than <code>-1.79769313486232e+308</code> and values greater than <code>1.79769313486232e+308</code> will be stored as NaN internally and be serialized to <code>null</code>.</p>
<h4><a class="anchor" id="autotoc_md24"></a>
Storage</h4>
<p>Floating-point number values are stored directly inside a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> type.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a98e611d67b7bd75307de99c9358ab2dc">number_integer_t</a> &ndash; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b2d781d7f2a4ee41bc0016e931cadf7" title="return the type of the JSON value (explicit)">type</a> for number values (integer)</dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab906e29b5d83ac162e823ada2156b989">number_unsigned_t</a> &ndash; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b2d781d7f2a4ee41bc0016e931cadf7" title="return the type of the JSON value (explicit)">type</a> for number values (unsigned integer)</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="a98e611d67b7bd75307de99c9358ab2dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98e611d67b7bd75307de99c9358ab2dc">&#9670;&nbsp;</a></span>number_integer_t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a98e611d67b7bd75307de99c9358ab2dc">number_integer_t</a> =  NumberIntegerType</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>a type for a number (integer) </p>
<p><a href="http://rfc7159.net/rfc7159">RFC 7159</a> describes numbers as follows: </p><blockquote class="doxtable">
<p>The representation of numbers is similar to that used in most programming languages. A number is represented in base 10 using decimal digits. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part. Leading zeros are not allowed. (...) Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted. </p>
</blockquote>
<p>This description includes both integer and floating-point numbers. However, C++ allows more precise storage if it is known whether the number is a signed integer, an unsigned integer or a floating-point number. Therefore, three different types, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a98e611d67b7bd75307de99c9358ab2dc">number_integer_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab906e29b5d83ac162e823ada2156b989">number_unsigned_t</a> and <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88d6103cb3620410b35200ee8e313d97">number_float_t</a> are used.</p>
<p>To store integer numbers in C++, a type is defined by the template parameter <em>NumberIntegerType</em> which chooses the type to use.</p>
<h4><a class="anchor" id="autotoc_md13"></a>
Default type</h4>
<p>With the default values for <em>NumberIntegerType</em> (<code>int64_t</code>), the default value for <em>number_integer_t</em> is:</p>
<div class="fragment"><div class="line">int64_t</div>
</div><!-- fragment --><h4><a class="anchor" id="autotoc_md14"></a>
Default behavior</h4>
<ul>
<li>The restrictions about leading zeros is not enforced in C++. Instead, leading zeros in integer literals lead to an interpretation as octal number. Internally, the value will be stored as decimal number. For instance, the C++ integer literal <code>010</code> will be serialized to <code>8</code>. During deserialization, leading zeros yield an error.</li>
<li>Not-a-number (NaN) values will be serialized to <code>null</code>.</li>
</ul>
<h4><a class="anchor" id="autotoc_md15"></a>
Limits</h4>
<p><a href="http://rfc7159.net/rfc7159">RFC 7159</a> specifies: </p><blockquote class="doxtable">
<p>An implementation may set limits on the range and precision of numbers. </p>
</blockquote>
<p>When the default type is used, the maximal integer number that can be stored is <code>9223372036854775807</code> (INT64_MAX) and the minimal integer number that can be stored is <code>-9223372036854775808</code> (INT64_MIN). Integer numbers that are out of range will yield over/underflow when used in a constructor. During deserialization, too large or small integer numbers will be automatically be stored as <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab906e29b5d83ac162e823ada2156b989">number_unsigned_t</a> or <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88d6103cb3620410b35200ee8e313d97">number_float_t</a>.</p>
<p><a href="http://rfc7159.net/rfc7159">RFC 7159</a> further states: </p><blockquote class="doxtable">
<p>Note that when such software is used, numbers that are integers and are in the range <img class="formulaInl" alt="$[-2^{53}+1, 2^{53}-1]$" src="../../form_0.png"/> are interoperable in the sense that implementations will agree exactly on their numeric values. </p>
</blockquote>
<p>As this range is a subrange of the exactly supported range [INT64_MIN, INT64_MAX], this class's integer type is interoperable.</p>
<h4><a class="anchor" id="autotoc_md16"></a>
Storage</h4>
<p>Integer number values are stored directly inside a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> type.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88d6103cb3620410b35200ee8e313d97">number_float_t</a> &ndash; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b2d781d7f2a4ee41bc0016e931cadf7" title="return the type of the JSON value (explicit)">type</a> for number values (floating-point)</dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab906e29b5d83ac162e823ada2156b989">number_unsigned_t</a> &ndash; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b2d781d7f2a4ee41bc0016e931cadf7" title="return the type of the JSON value (explicit)">type</a> for number values (unsigned integer)</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="ab906e29b5d83ac162e823ada2156b989"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab906e29b5d83ac162e823ada2156b989">&#9670;&nbsp;</a></span>number_unsigned_t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab906e29b5d83ac162e823ada2156b989">number_unsigned_t</a> =  NumberUnsignedType</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>a type for a number (unsigned) </p>
<p><a href="http://rfc7159.net/rfc7159">RFC 7159</a> describes numbers as follows: </p><blockquote class="doxtable">
<p>The representation of numbers is similar to that used in most programming languages. A number is represented in base 10 using decimal digits. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part. Leading zeros are not allowed. (...) Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted. </p>
</blockquote>
<p>This description includes both integer and floating-point numbers. However, C++ allows more precise storage if it is known whether the number is a signed integer, an unsigned integer or a floating-point number. Therefore, three different types, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a98e611d67b7bd75307de99c9358ab2dc">number_integer_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab906e29b5d83ac162e823ada2156b989">number_unsigned_t</a> and <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88d6103cb3620410b35200ee8e313d97">number_float_t</a> are used.</p>
<p>To store unsigned integer numbers in C++, a type is defined by the template parameter <em>NumberUnsignedType</em> which chooses the type to use.</p>
<h4><a class="anchor" id="autotoc_md17"></a>
Default type</h4>
<p>With the default values for <em>NumberUnsignedType</em> (<code>uint64_t</code>), the default value for <em>number_unsigned_t</em> is:</p>
<div class="fragment"><div class="line">uint64_t</div>
</div><!-- fragment --><h4><a class="anchor" id="autotoc_md18"></a>
Default behavior</h4>
<ul>
<li>The restrictions about leading zeros is not enforced in C++. Instead, leading zeros in integer literals lead to an interpretation as octal number. Internally, the value will be stored as decimal number. For instance, the C++ integer literal <code>010</code> will be serialized to <code>8</code>. During deserialization, leading zeros yield an error.</li>
<li>Not-a-number (NaN) values will be serialized to <code>null</code>.</li>
</ul>
<h4><a class="anchor" id="autotoc_md19"></a>
Limits</h4>
<p><a href="http://rfc7159.net/rfc7159">RFC 7159</a> specifies: </p><blockquote class="doxtable">
<p>An implementation may set limits on the range and precision of numbers. </p>
</blockquote>
<p>When the default type is used, the maximal integer number that can be stored is <code>18446744073709551615</code> (UINT64_MAX) and the minimal integer number that can be stored is <code>0</code>. Integer numbers that are out of range will yield over/underflow when used in a constructor. During deserialization, too large or small integer numbers will be automatically be stored as <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a98e611d67b7bd75307de99c9358ab2dc">number_integer_t</a> or <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88d6103cb3620410b35200ee8e313d97">number_float_t</a>.</p>
<p><a href="http://rfc7159.net/rfc7159">RFC 7159</a> further states: </p><blockquote class="doxtable">
<p>Note that when such software is used, numbers that are integers and are in the range <img class="formulaInl" alt="$[-2^{53}+1, 2^{53}-1]$" src="../../form_0.png"/> are interoperable in the sense that implementations will agree exactly on their numeric values. </p>
</blockquote>
<p>As this range is a subrange (when considered in conjunction with the number_integer_t type) of the exactly supported range [0, UINT64_MAX], this class's integer type is interoperable.</p>
<h4><a class="anchor" id="autotoc_md20"></a>
Storage</h4>
<p>Integer number values are stored directly inside a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> type.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88d6103cb3620410b35200ee8e313d97">number_float_t</a> &ndash; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b2d781d7f2a4ee41bc0016e931cadf7" title="return the type of the JSON value (explicit)">type</a> for number values (floating-point) </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a98e611d67b7bd75307de99c9358ab2dc">number_integer_t</a> &ndash; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b2d781d7f2a4ee41bc0016e931cadf7" title="return the type of the JSON value (explicit)">type</a> for number values (integer)</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.0.0 </dd></dl>

</div>
</div>
<a id="aa1eb13d5aa86f80cbee6c58e90fbaf49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa1eb13d5aa86f80cbee6c58e90fbaf49">&#9670;&nbsp;</a></span>object_t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa1eb13d5aa86f80cbee6c58e90fbaf49">object_t</a> =  ObjectType&lt;StringType, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>, std::less&lt;StringType&gt;, AllocatorType&lt;std::pair&lt;const StringType, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&gt; &gt;&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>a type for an object </p>
<p><a href="http://rfc7159.net/rfc7159">RFC 7159</a> describes JSON objects as follows: </p><blockquote class="doxtable">
<p>An object is an unordered collection of zero or more name/value pairs, where a name is a string and a value is a string, number, boolean, null, object, or array. </p>
</blockquote>
<p>To store objects in C++, a type is defined by the template parameters described below.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ObjectType</td><td>the container to store objects (e.g., <code>std::map</code> or <code>std::unordered_map</code>) </td></tr>
    <tr><td class="paramname">StringType</td><td>the type of the keys or names (e.g., <code>std::string</code>). The comparison function <code>std::less&lt;StringType&gt;</code> is used to order elements inside the container. </td></tr>
    <tr><td class="paramname">AllocatorType</td><td>the allocator to use for objects (e.g., <code>std::allocator</code>)</td></tr>
  </table>
  </dd>
</dl>
<h4><a class="anchor" id="autotoc_md0"></a>
Default type</h4>
<p>With the default values for <em>ObjectType</em> (<code>std::map</code>), <em>StringType</em> (<code>std::string</code>), and <em>AllocatorType</em> (<code>std::allocator</code>), the default value for <em>object_t</em> is:</p>
<div class="fragment"><div class="line">std::map&lt;</div>
<div class="line">  std::string, <span class="comment">// key_type</span></div>
<div class="line">  <a class="code" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a32124a16dc80729d964d9caf607c2bc8">basic_json</a>, <span class="comment">// value_type</span></div>
<div class="line">  std::less&lt;std::string&gt;, <span class="comment">// key_compare</span></div>
<div class="line">  std::allocator&lt;std::pair&lt;const std::string, basic_json&gt;&gt; <span class="comment">// allocator_type</span></div>
<div class="line">&gt;</div>
</div><!-- fragment --><h4><a class="anchor" id="autotoc_md1"></a>
Behavior</h4>
<p>The choice of <em>object_t</em> influences the behavior of the JSON class. With the default type, objects have the following behavior:</p>
<ul>
<li>When all names are unique, objects will be interoperable in the sense that all software implementations receiving that object will agree on the name-value mappings.</li>
<li>When the names within an object are not unique, later stored name/value pairs overwrite previously stored name/value pairs, leaving the used names unique. For instance, <code>{"key": 1}</code> and <code>{"key": 2, "key": 1}</code> will be treated as equal and both stored as <code>{"key": 1}</code>.</li>
<li>Internally, name/value pairs are stored in lexicographical order of the names. Objects will also be serialized (see <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5319dc1bb9dfe19ce7ff559aaded3422">dump</a>) in this order. For instance, <code>{"b": 1, "a": 2}</code> and <code>{"a": 2, "b": 1}</code> will be stored and serialized as <code>{"a": 2, "b": 1}</code>.</li>
<li>When comparing objects, the order of the name/value pairs is irrelevant. This makes objects interoperable in the sense that they will not be affected by these differences. For instance, <code>{"b": 1, "a": 2}</code> and <code>{"a": 2, "b": 1}</code> will be treated as equal.</li>
</ul>
<h4><a class="anchor" id="autotoc_md2"></a>
Limits</h4>
<p><a href="http://rfc7159.net/rfc7159">RFC 7159</a> specifies: </p><blockquote class="doxtable">
<p>An implementation may set limits on the maximum depth of nesting. </p>
</blockquote>
<p>In this class, the object's limit of nesting is not constraint explicitly. However, a maximum depth of nesting may be introduced by the compiler or runtime environment. A theoretical limit can be queried by calling the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2f47d3c6a441c57dd2be00449fbb88e1">max_size</a> function of a JSON object.</p>
<h4><a class="anchor" id="autotoc_md3"></a>
Storage</h4>
<p>Objects are stored as pointers in a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> type. That is, for any access to object values, a pointer of type <code>object_t*</code> must be dereferenced.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae095578e03df97c5b3991787f1056374">array_t</a> &ndash; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b2d781d7f2a4ee41bc0016e931cadf7" title="return the type of the JSON value (explicit)">type</a> for an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4a4ec75e4d2845d9bcf7a9e5458e4949" title="explicitly create an array from an initializer list">array</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0</dd></dl>
<dl class="section note"><dt>Note</dt><dd>The order name/value pairs are added to the object is <em>not</em> preserved by the library. Therefore, iterating an object may return name/value pairs in a different order than they were originally stored. In fact, keys will be traversed in alphabetical order as <code>std::map</code> with <code>std::less</code> is used by default. Please note this behavior conforms to <a href="http://rfc7159.net/rfc7159">RFC 7159</a>, because any order implements the specified "unordered" nature of JSON objects. </dd></dl>

</div>
</div>
<a id="aecae491e175f8767c550ae3c59e180e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aecae491e175f8767c550ae3c59e180e3">&#9670;&nbsp;</a></span>parser_callback_t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a> =  std::function&lt;bool(int depth, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1c863b719b4ca5b77188c171bbfafe">parse_event_t</a> event, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&amp; parsed)&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>per-element parser callback type </p>
<p>With a parser callback function, the result of parsing a JSON text can be influenced. When passed to <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a86f339e8449cce96b89e86635a7d389e">parse</a>(std::istream&amp;, const parser_callback_t) or <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab275a3e00a40189e96d244de6c8f311a">parse(const CharT, const parser_callback_t)</a>, it is called on certain events (passed as <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1c863b719b4ca5b77188c171bbfafe">parse_event_t</a> via parameter <em>event</em>) with a set recursion depth <em>depth</em> and context JSON value <em>parsed</em>. The return value of the callback function is a boolean indicating whether the element that emitted the callback shall be kept or not.</p>
<p>We distinguish six scenarios (determined by the event type) in which the callback function can be called. The following table describes the values of the parameters <em>depth</em>, <em>event</em>, and <em>parsed</em>.</p>
<p>parameter <em>event</em> | description | parameter <em>depth</em> | parameter <em>parsed</em> ---------------&mdash; | --------&mdash; | ---------------&mdash; | ----------------&mdash; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1c863b719b4ca5b77188c171bbfafeae73f17027cb0acbb537f29d0a6944b26" title="the parser read { and started to process a JSON object">parse_event_t::object_start</a> | the parser read <code>{</code> and started to process a JSON object | depth of the parent of the JSON object | a JSON value with type discarded <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1c863b719b4ca5b77188c171bbfafea3c6e0b8a9c15224a8228b9a98ca1531d" title="the parser read a key of a value in an object">parse_event_t::key</a> | the parser read a key of a value in an object | depth of the currently parsed JSON object | a JSON string containing the key <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1c863b719b4ca5b77188c171bbfafeaf63e2a2468a37aa4f394fcc3bcb8249c" title="the parser read } and finished processing a JSON object">parse_event_t::object_end</a> | the parser read <code>}</code> and finished processing a JSON object | depth of the parent of the JSON object | the parsed JSON object <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1c863b719b4ca5b77188c171bbfafeaa4388a3d92419edbb1c6efd4d52461f3" title="the parser read [ and started to process a JSON array">parse_event_t::array_start</a> | the parser read <code>[</code> and started to process a JSON array | depth of the parent of the JSON array | a JSON value with type discarded <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1c863b719b4ca5b77188c171bbfafea49642fb732aa2e112188fba1f9d3ef7f" title="the parser read ] and finished processing a JSON array">parse_event_t::array_end</a> | the parser read <code>]</code> and finished processing a JSON array | depth of the parent of the JSON array | the parsed JSON array <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1c863b719b4ca5b77188c171bbfafea2063c1608d6e0baf80249c42e2be5804" title="the parser finished reading a JSON value">parse_event_t::value</a> | the parser finished reading a JSON value | depth of the value | the parsed JSON value</p>
<div class="image">
<img src="../../callback_events.png" alt=""/>
<div class="caption">
Example when certain parse events are</div></div>
<p> triggered"</p>
<p>Discarding a value (i.e., returning <code>false</code>) has different effects depending on the context in which function was called:</p>
<ul>
<li>Discarded values in structured types are skipped. That is, the parser will behave as if the discarded value was never read.</li>
<li>In case a value outside a structured type is skipped, it is replaced with <code>null</code>. This case happens if the top-level element is skipped.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">depth</td><td>the depth of the recursion during parsing</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">event</td><td>an event of type parse_event_t indicating the context in the callback function has been called</td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">parsed</td><td>the current intermediate parse result; note that writing to this value has no effect for <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1c863b719b4ca5b77188c171bbfafea3c6e0b8a9c15224a8228b9a98ca1531d" title="the parser read a key of a value in an object">parse_event_t::key</a> events</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Whether the JSON value which called the function during parsing should be kept (<code>true</code>) or not (<code>false</code>). In the latter case, it is either skipped completely or replaced by an empty discarded object.</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4cd30efe5c33a7cf73a0c6495bb16054">parse(std::istream&amp;, parser_callback_t)</a> or <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab275a3e00a40189e96d244de6c8f311a">parse(const CharT, const parser_callback_t)</a> for examples</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="aefee1f777198c68724bd127e0c8abbe4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aefee1f777198c68724bd127e0c8abbe4">&#9670;&nbsp;</a></span>pointer</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aefee1f777198c68724bd127e0c8abbe4">pointer</a> =  typename std::allocator_traits&lt;<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a86ce930490cf7773b26f5ef49c04a350">allocator_type</a>&gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aefee1f777198c68724bd127e0c8abbe4">pointer</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>the type of an element pointer </p>

</div>
</div>
<a id="ac6a5eddd156c776ac75ff54cfe54a5bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6a5eddd156c776ac75ff54cfe54a5bc">&#9670;&nbsp;</a></span>reference</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a> =  <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b3297873b70c080837e8eedc4fec32f">value_type</a>&amp;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>the type of an element reference </p>

</div>
</div>
<a id="ac223d5560c2b05a208c88de67376c5f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac223d5560c2b05a208c88de67376c5f2">&#9670;&nbsp;</a></span>reverse_iterator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac223d5560c2b05a208c88de67376c5f2">reverse_iterator</a> =  <a class="el" href="../../d1/d8e/classnlohmann_1_1basic__json_1_1json__reverse__iterator.xhtml">json_reverse_iterator</a>&lt;typename <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">basic_json::iterator</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>a reverse iterator for a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a> container </p>

</div>
</div>
<a id="a39f2cd0b58106097e0e67bf185cc519b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39f2cd0b58106097e0e67bf185cc519b">&#9670;&nbsp;</a></span>size_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a> =  std::size_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>a type to represent container sizes </p>

</div>
</div>
<a id="a61f8566a1a85a424c7266fb531dca005"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61f8566a1a85a424c7266fb531dca005">&#9670;&nbsp;</a></span>string_t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a> =  StringType</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>a type for a string </p>
<p><a href="http://rfc7159.net/rfc7159">RFC 7159</a> describes JSON strings as follows: </p><blockquote class="doxtable">
<p>A string is a sequence of zero or more Unicode characters. </p>
</blockquote>
<p>To store objects in C++, a type is defined by the template parameter described below. Unicode values are split by the JSON class into byte-sized characters during deserialization.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">StringType</td><td>the container to store strings (e.g., <code>std::string</code>). Note this container is used for keys/names in objects, see <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa1eb13d5aa86f80cbee6c58e90fbaf49">object_t</a>.</td></tr>
  </table>
  </dd>
</dl>
<h4><a class="anchor" id="autotoc_md7"></a>
Default type</h4>
<p>With the default values for <em>StringType</em> (<code>std::string</code>), the default value for <em>string_t</em> is:</p>
<div class="fragment"><div class="line">std::string</div>
</div><!-- fragment --><h4><a class="anchor" id="autotoc_md8"></a>
Encoding</h4>
<p>Strings are stored in UTF-8 encoding. Therefore, functions like <code>std::string::size()</code> or <code>std::string::length()</code> return the number of bytes in the string rather than the number of characters or glyphs.</p>
<h4><a class="anchor" id="autotoc_md9"></a>
String comparison</h4>
<p><a href="http://rfc7159.net/rfc7159">RFC 7159</a> states: </p><blockquote class="doxtable">
<p>Software implementations are typically required to test names of object members for equality. Implementations that transform the textual representation into sequences of Unicode code units and then perform the comparison numerically, code unit by code unit, are interoperable in the sense that implementations will agree in all cases on equality or inequality of two strings. For example, implementations that compare strings with escaped characters unconverted may incorrectly find that <code>"a\\b"</code> and <code>"a\u005Cb"</code> are not equal. </p>
</blockquote>
<p>This implementation is interoperable as it does compare strings code unit by code unit.</p>
<h4><a class="anchor" id="autotoc_md10"></a>
Storage</h4>
<p>String values are stored as pointers in a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> type. That is, for any access to string values, a pointer of type <code>string_t*</code> must be dereferenced.</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="ae8cbef097f7da18a781fc86587de6b90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae8cbef097f7da18a781fc86587de6b90">&#9670;&nbsp;</a></span>value_t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980f">value_t</a> =  <a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980f">detail::value_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2b3297873b70c080837e8eedc4fec32f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b3297873b70c080837e8eedc4fec32f">&#9670;&nbsp;</a></span>value_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b3297873b70c080837e8eedc4fec32f">value_type</a> =  <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>the type of elements in a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a> container </p>

</div>
</div>
<h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="aea1c863b719b4ca5b77188c171bbfafe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea1c863b719b4ca5b77188c171bbfafe">&#9670;&nbsp;</a></span>parse_event_t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aea1c863b719b4ca5b77188c171bbfafe">nlohmann::basic_json::parse_event_t</a> : uint8_t</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>JSON callback events. </p>
<p>This enumeration lists the parser events that can trigger calling a callback function of type <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a> during parsing.</p>
<div class="image">
<img src="../../callback_events.png" alt=""/>
<div class="caption">
Example when certain parse events are</div></div>
<p> triggered"</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="aea1c863b719b4ca5b77188c171bbfafeae73f17027cb0acbb537f29d0a6944b26"></a>object_start&#160;</td><td class="fielddoc"><p>the parser read <code>{</code> and started to process a JSON object </p>
</td></tr>
<tr><td class="fieldname"><a id="aea1c863b719b4ca5b77188c171bbfafeaf63e2a2468a37aa4f394fcc3bcb8249c"></a>object_end&#160;</td><td class="fielddoc"><p>the parser read <code>}</code> and finished processing a JSON object </p>
</td></tr>
<tr><td class="fieldname"><a id="aea1c863b719b4ca5b77188c171bbfafeaa4388a3d92419edbb1c6efd4d52461f3"></a>array_start&#160;</td><td class="fielddoc"><p>the parser read <code>[</code> and started to process a JSON array </p>
</td></tr>
<tr><td class="fieldname"><a id="aea1c863b719b4ca5b77188c171bbfafea49642fb732aa2e112188fba1f9d3ef7f"></a>array_end&#160;</td><td class="fielddoc"><p>the parser read <code>]</code> and finished processing a JSON array </p>
</td></tr>
<tr><td class="fieldname"><a id="aea1c863b719b4ca5b77188c171bbfafea3c6e0b8a9c15224a8228b9a98ca1531d"></a>key&#160;</td><td class="fielddoc"><p>the parser read a key of a value in an object </p>
</td></tr>
<tr><td class="fieldname"><a id="aea1c863b719b4ca5b77188c171bbfafea2063c1608d6e0baf80249c42e2be5804"></a>value&#160;</td><td class="fielddoc"><p>the parser finished reading a JSON value </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a32124a16dc80729d964d9caf607c2bc8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32124a16dc80729d964d9caf607c2bc8">&#9670;&nbsp;</a></span>basic_json() <span class="overload">[1/9]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980f">value_t</a>&#160;</td>
          <td class="paramname"><em>value_type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>create an empty value with a given type </p>
<p>Create an empty JSON value with a given type. The value will be default initialized with an empty value which depends on the type:</p>
<table class="markdownTable">
<tr class="markdownTableHead">
<th class="markdownTableHeadNone">Value type  </th><th class="markdownTableHeadNone">initial value   </th></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">null  </td><td class="markdownTableBodyNone"><code>null</code>   </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">boolean  </td><td class="markdownTableBodyNone"><code>false</code>   </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">string  </td><td class="markdownTableBodyNone"><code>""</code>   </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">number  </td><td class="markdownTableBodyNone"><code>0</code>   </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">object  </td><td class="markdownTableBodyNone"><code>{}</code>   </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">array  </td><td class="markdownTableBodyNone"><code>[]</code>   </td></tr>
</table>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value_type</td><td>the type of the value to create</td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Constant.</p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if allocation for object, array, or string value fails</td></tr>
  </table>
  </dd>
</dl>
<p>@liveexample{The following code shows the constructor for different <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae8cbef097f7da18a781fc86587de6b90">value_t</a> values,basic_json__value_t}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a32124a16dc80729d964d9caf607c2bc8_icgraph.svg" width="100%" height="503"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="ae9be9e956bfc4658f35d17c6aa72b063"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9be9e956bfc4658f35d17c6aa72b063">&#9670;&nbsp;</a></span>basic_json() <span class="overload">[2/9]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> </td>
          <td>(</td>
          <td class="paramtype">std::nullptr_t&#160;</td>
          <td class="paramname"> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>create a null object </p>
<p>Create a <code>null</code> JSON value. It either takes a null pointer as parameter (explicitly creating <code>null</code>) or no parameter (implicitly creating <code>null</code>). The passed null pointer itself is not read &ndash; it is only used to choose the right constructor.</p>
<p>@complexity Constant.</p>
<p>@exceptionsafety No-throw guarantee: this constructor never throws exceptions.</p>
<p>@liveexample{The following code shows the constructor with and without a null pointer parameter.,basic_json__nullptr_t}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="a7639e0834df2bc719a04ffea89b31abc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7639e0834df2bc719a04ffea89b31abc">&#9670;&nbsp;</a></span>basic_json() <span class="overload">[3/9]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename CompatibleType , typename U  = detail::uncvref_t&lt;CompatibleType&gt;, detail::enable_if_t&lt; not std::is_base_of&lt; std::istream, U &gt;::value and not std::is_same&lt; U, basic_json_t &gt;::value and not detail::is_basic_json_nested_type&lt; basic_json_t, U &gt;::value and detail::has_to_json&lt; basic_json, U &gt;::value, int &gt;  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> </td>
          <td>(</td>
          <td class="paramtype">CompatibleType &amp;&amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>create a JSON value </p>
<p>This is a "catch all" constructor for all compatible JSON types; that is, types for which a <code><a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a6fa2f784014bfc0b62d7a35d51e676c9">to_json()</a></code> method exsits. The constructor forwards the parameter <em>val</em> to that method (to <code>json_serializer&lt;U&gt;::to_json</code> method with <code>U = uncvref_t&lt;CompatibleType&gt;</code>, to be exact).</p>
<p>Template type <em>CompatibleType</em> includes, but is not limited to, the following types:</p><ul>
<li><b>arrays</b>: <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae095578e03df97c5b3991787f1056374">array_t</a> and all kinds of compatible containers such as <code>std::vector</code>, <code>std::deque</code>, <code>std::list</code>, <code>std::forward_list</code>, <code>std::array</code>, <code>std::set</code>, <code>std::unordered_set</code>, <code>std::multiset</code>, and <code>unordered_multiset</code> with a <code>value_type</code> from which a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> value can be constructed.</li>
<li><b>objects</b>: <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa1eb13d5aa86f80cbee6c58e90fbaf49">object_t</a> and all kinds of compatible associative containers such as <code>std::map</code>, <code>std::unordered_map</code>, <code>std::multimap</code>, and <code>std::unordered_multimap</code> with a <code>key_type</code> compatible to <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a> and a <code>value_type</code> from which a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> value can be constructed.</li>
<li><b>strings</b>: <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a>, string literals, and all compatible string containers can be used.</li>
<li><b>numbers</b>: <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a98e611d67b7bd75307de99c9358ab2dc">number_integer_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab906e29b5d83ac162e823ada2156b989">number_unsigned_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88d6103cb3620410b35200ee8e313d97">number_float_t</a>, and all convertible number types such as <code>int</code>, <code>size_t</code>, <code>int64_t</code>, <code>float</code> or <code>double</code> can be used.</li>
<li><b>boolean</b>: <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4c919102a9b4fe0d588af64801436082">boolean_t</a> / <code>bool</code> can be used.</li>
</ul>
<p>See the examples below.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">CompatibleType</td><td>a type such that:<ul>
<li><em>CompatibleType</em> is not derived from <code>std::istream</code>,</li>
<li><em>CompatibleType</em> is not <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> (to avoid hijacking copy/move constructors),</li>
<li><em>CompatibleType</em> is not a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> nested type (e.g., <a class="el" href="../../d4/d60/classnlohmann_1_1basic__json_1_1json__pointer.xhtml">json_pointer</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a>, etc ...)</li>
<li>@ref json_serializer<u> has a <code>to_json(basic_json_t&amp;, CompatibleType&amp;&amp;)</code> method</u></li>
</ul>
</td></tr>
    <tr><td class="paramname">U</td><td><u>= <code>uncvref_t&lt;CompatibleType&gt;</code></u></td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td><u>the value to be forwarded</u></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Usually linear in the size of the passed <em>val</em>, also depending on the implementation of the called <code><a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a6fa2f784014bfc0b62d7a35d51e676c9">to_json()</a></code> method.</p>
<p><u></p><dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">what</td><td><code>json_serializer&lt;U&gt;<a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a6fa2f784014bfc0b62d7a35d51e676c9">to_json()</a></code> throws</td></tr>
  </table>
  </dd>
</dl>
<p>@liveexample{The following code shows the constructor with several compatible types.,basic_json__CompatibleType}</u></p>
<p><u></p><dl class="section since"><dt>Since</dt><dd>version 2.1.0 </dd></dl>
<p></u></p>
<div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a7639e0834df2bc719a04ffea89b31abc_cgraph.svg" width="374" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="afbad48316e7cd37366ba3ac5d7e5859e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afbad48316e7cd37366ba3ac5d7e5859e">&#9670;&nbsp;</a></span>basic_json() <span class="overload">[4/9]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &gt;&#160;</td>
          <td class="paramname"><em>init</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>type_deduction</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980f">value_t</a>&#160;</td>
          <td class="paramname"><em>manual_type</em> = <code><a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980faf1f713c9e000f5d3f280adbd124df4f5">value_t::array</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>create a container (array or object) from an initializer list </p>
<p>Creates a JSON value of type array or object from the passed initializer list <em>init</em>. In case <em>type_deduction</em> is <code>true</code> (default), the type of the JSON value to be created is deducted from the initializer list <em>init</em> according to the following rules:</p>
<ol type="1">
<li>If the list is empty, an empty JSON object value <code>{}</code> is created.</li>
<li>If the list consists of pairs whose first element is a string, a JSON object value is created where the first elements of the pairs are treated as keys and the second elements are as values.</li>
<li>In all other cases, an array is created.</li>
</ol>
<p>The rules aim to create the best fit between a C++ initializer list and JSON values. The rationale is as follows:</p>
<ol type="1">
<li>The empty initializer list is written as <code>{}</code> which is exactly an empty JSON object.</li>
<li>C++ has now way of describing mapped types other than to list a list of pairs. As JSON requires that keys must be of type string, rule 2 is the weakest constraint one can pose on initializer lists to interpret them as an object.</li>
<li>In all other cases, the initializer list could not be interpreted as JSON object type, so interpreting it as JSON array type is safe.</li>
</ol>
<p>With the rules described above, the following JSON values cannot be expressed by an initializer list:</p>
<ul>
<li>the empty array (<code>[]</code>): use <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4a4ec75e4d2845d9bcf7a9e5458e4949">array(std::initializer_list&lt;basic_json&gt;)</a> with an empty initializer list in this case</li>
<li>arrays whose elements satisfy rule 2: use <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4a4ec75e4d2845d9bcf7a9e5458e4949">array(std::initializer_list&lt;basic_json&gt;)</a> with the same initializer list in this case</li>
</ul>
<dl class="section note"><dt>Note</dt><dd>When used without parentheses around an empty initializer list, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a32124a16dc80729d964d9caf607c2bc8">basic_json()</a> is called instead of this function, yielding the JSON null value.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">init</td><td>initializer list with JSON values</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">type_deduction</td><td>internal parameter; when set to <code>true</code>, the type of the JSON value is deducted from the initializer list <em>init</em>; when set to <code>false</code>, the type provided via <em>manual_type</em> is forced. This mode is used by the functions <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4a4ec75e4d2845d9bcf7a9e5458e4949">array(std::initializer_list&lt;basic_json&gt;)</a> and <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9f42ee7d10eee2d5a73fd94ca7f767ca">object(std::initializer_list&lt;basic_json&gt;)</a>.</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">manual_type</td><td>internal parameter; when <em>type_deduction</em> is set to <code>false</code>, the created JSON value will use the provided type (only <a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980faf1f713c9e000f5d3f280adbd124df4f5">value_t::array</a> and <a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980faa8cfde6331bd59eb2ac96f8911c4b666">value_t::object</a> are valid); when <em>type_deduction</em> is set to <code>true</code>, this parameter has no effect</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if <em>type_deduction</em> is <code>false</code>, <em>manual_type</em> is <code><a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980faa8cfde6331bd59eb2ac96f8911c4b666" title="object (unordered set of name/value pairs)">value_t::object</a></code>, but <em>init</em> contains an element which is not a pair whose first element is a string; example: <code>"cannot create object from
initializer list"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Linear in the size of the initializer list <em>init</em>.</p>
<p>@liveexample{The example below shows how JSON values are created from initializer lists.,basic_json__list_init_t}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4a4ec75e4d2845d9bcf7a9e5458e4949">array(std::initializer_list&lt;basic_json&gt;)</a> &ndash; create a JSON <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4a4ec75e4d2845d9bcf7a9e5458e4949" title="explicitly create an array from an initializer list">array</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> from an initializer list </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9f42ee7d10eee2d5a73fd94ca7f767ca">object(std::initializer_list&lt;basic_json&gt;)</a> &ndash; create a JSON <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9f42ee7d10eee2d5a73fd94ca7f767ca" title="explicitly create an object from an initializer list">object</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> from an initializer list</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="ab6816ae5100409254ed0a8bc21c387bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab6816ae5100409254ed0a8bc21c387bb">&#9670;&nbsp;</a></span>basic_json() <span class="overload">[5/9]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a>&#160;</td>
          <td class="paramname"><em>cnt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &amp;&#160;</td>
          <td class="paramname"><em>val</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>construct an array with count copies of given value </p>
<p>Constructs a JSON array value by creating <em>cnt</em> copies of a passed value. In case <em>cnt</em> is <code>0</code>, an empty array is created. As postcondition, <code>std::distance(<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0ff28dac23f2bdecee9564d07f51dcdc" title="returns an iterator to the first element">begin()</a>,<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a>) == cnt</code> holds.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">cnt</td><td>the number of JSON copies of <em>val</em> to create </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>the JSON value to copy</td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Linear in <em>cnt</em>.</p>
<p>@liveexample{The following code shows examples for the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>(size_type\, const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a>&amp;) constructor.,basic_json__size_type_basic_json}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="abe197e9f3184487805cfb5bba6fd5938"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe197e9f3184487805cfb5bba6fd5938">&#9670;&nbsp;</a></span>basic_json() <span class="overload">[6/9]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;class InputIT , typename std::enable_if&lt; std::is_same&lt; InputIT, typename basic_json_t::iterator &gt;::value or std::is_same&lt; InputIT, typename basic_json_t::const_iterator &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> </td>
          <td>(</td>
          <td class="paramtype">InputIT&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIT&#160;</td>
          <td class="paramname"><em>last</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>construct a JSON container given an iterator range </p>
<p>Constructs the JSON value with the contents of the range <code>[first, last)</code>. The semantics depends on the different types a JSON value can have:</p><ul>
<li>In case of primitive types (number, boolean, or string), <em>first</em> must be <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0ff28dac23f2bdecee9564d07f51dcdc" title="returns an iterator to the first element">begin()</a></code> and <em>last</em> must be <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a></code>. In this case, the value is copied. Otherwise, std::out_of_range is thrown.</li>
<li>In case of structured types (array, object), the constructor behaves as similar versions for <code>std::vector</code>.</li>
<li>In case of a null type, std::domain_error is thrown.</li>
</ul>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">InputIT</td><td>an input iterator type (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a> or <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a>)</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">first</td><td>begin of the range to copy from (included) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">last</td><td>end of the range to copy from (excluded)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>Iterators <em>first</em> and <em>last</em> must be initialized. <b>This precondition is enforced with an assertion.</b></dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if iterators are not compatible; that is, do not belong to the same JSON value; example: <code>"iterators are not compatible"</code> </td></tr>
    <tr><td class="paramname">std::out_of_range</td><td>if iterators are for a primitive type (number, boolean, or string) where an out of range error can be detected easily; example: <code>"iterators out of range"</code> </td></tr>
    <tr><td class="paramname">std::bad_alloc</td><td>if allocation for object, array, or string fails </td></tr>
    <tr><td class="paramname">std::domain_error</td><td>if called with a null value; example: <code>"cannot
use construct with iterators from null"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Linear in distance between <em>first</em> and <em>last</em>.</p>
<p>@liveexample{The example below shows several ways to create JSON values by specifying a subrange with iterators.,basic_json__InputIt_InputIt}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="a757e90574a742ae9cc54c97422fb3043"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a757e90574a742ae9cc54c97422fb3043">&#9670;&nbsp;</a></span>basic_json() <span class="overload">[7/9]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d3/dd1/nlohmann__json_8hpp.xhtml#a584fd8f49cd7f4ecf5baba15b5b53cdd">JSON_DEPRECATED</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a>&#160;</td>
          <td class="paramname"><em>cb</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>construct a JSON value given an input stream </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">i</td><td>stream to read a serialized JSON value from </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cb</td><td>a parser callback function of type <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a> which is used to control the deserialization by filtering unwanted values (optional)</td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Linear in the length of the input. The parser is a predictive LL(1) parser. The complexity can be higher if the parser callback function <em>cb</em> has a super-linear complexity.</p>
<dl class="section note"><dt>Note</dt><dd>A UTF-8 byte order mark is silently ignored.</dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="../../da/d58/deprecated.xhtml#_deprecated000001">Deprecated:</a></b></dt><dd>This constructor is deprecated and will be removed in version 3.0.0 to unify the interface of the library. Deserialization will be done by stream operators or by calling one of the <code>parse</code> functions, e.g. <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4cd30efe5c33a7cf73a0c6495bb16054">parse(std::istream&amp;, const parser_callback_t)</a>. That is, calls like <code>json j(i);</code> for an input stream <em>i</em> need to be replaced by <code>json j = json::parse(i);</code>. See the example below.</dd></dl>
<p>@liveexample{The example below demonstrates constructing a JSON value from a <code>std::stringstream</code> with and without callback function.,basic_json__istream}</p>
<dl class="section since"><dt>Since</dt><dd>version 2.0.0, deprecated in version 2.0.3, to be removed in version 3.0.0 </dd></dl>

</div>
</div>
<a id="af5de621bcf646c332343f9c1e011126c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5de621bcf646c332343f9c1e011126c">&#9670;&nbsp;</a></span>basic_json() <span class="overload">[8/9]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>copy constructor </p>
<p>Creates a copy of a given JSON value.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">other</td><td>the JSON value to copy</td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Linear in the size of <em>other</em>.</p>
<p>@requirement This function helps <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a></code> satisfying the <a href="http://en.cppreference.com/w/cpp/concept/Container">Container</a> requirements:</p><ul>
<li>The complexity is linear.</li>
<li>As postcondition, it holds: <code>other == basic_json(other)</code>.</li>
</ul>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::bad_alloc</td><td>if allocation for object, array, or string fails.</td></tr>
  </table>
  </dd>
</dl>
<p>@liveexample{The following code shows an example for the copy constructor.,basic_json__basic_json}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="a9a06d1efd50a00f4889f831f851ce124"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a06d1efd50a00f4889f831f851ce124">&#9670;&nbsp;</a></span>basic_json() <span class="overload">[9/9]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>move constructor </p>
<p>Move constructor. Constructs a JSON value with the contents of the given value <em>other</em> using move semantics. It "steals" the resources from <em>other</em> and leaves it as JSON null value.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">other</td><td>value to move to this object</td></tr>
  </table>
  </dd>
</dl>
<dl class="section post"><dt>Postcondition</dt><dd><em>other</em> is a JSON null value</dd></dl>
<p>@complexity Constant.</p>
<p>@liveexample{The code below shows the move constructor explicitly called via std::move.,basic_json__moveconstructor}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="a42347bbce75ba5571e292a3540af30e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a42347bbce75ba5571e292a3540af30e0">&#9670;&nbsp;</a></span>~basic_json()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::~<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>destructor </p>
<p>Destroys the JSON value and frees all allocated memory.</p>
<p>@complexity Linear.</p>
<p>@requirement This function helps <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a></code> satisfying the <a href="http://en.cppreference.com/w/cpp/concept/Container">Container</a> requirements:</p><ul>
<li>The complexity is linear.</li>
<li>All stored elements are destroyed and all memory is freed.</li>
</ul>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a4a4ec75e4d2845d9bcf7a9e5458e4949"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a4ec75e4d2845d9bcf7a9e5458e4949">&#9670;&nbsp;</a></span>array()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::array </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &gt;&#160;</td>
          <td class="paramname"><em>init</em> = <code>std::initializer_list&lt;<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt;&#160;ObjectType,&#160;ArrayType,&#160;StringType,&#160;BooleanType,&#160;NumberIntegerType,&#160;NumberUnsignedType,&#160;NumberFloatType,&#160;AllocatorType,&#160;JSONSerializer&#160;&gt;&gt;()</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>explicitly create an array from an initializer list </p>
<p>Creates a JSON array value from a given initializer list. That is, given a list of values <code>a, b, c</code>, creates the JSON value <code>[a, b, c]</code>. If the initializer list is empty, the empty array <code>[]</code> is created.</p>
<dl class="section note"><dt>Note</dt><dd>This function is only needed to express two edge cases that cannot be realized with the initializer list constructor (<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#afbad48316e7cd37366ba3ac5d7e5859e">basic_json(std::initializer_list&lt;basic_json&gt;, bool, value_t)</a>). These cases are:<ol type="1">
<li>creating an array whose elements are all pairs whose first element is a string &ndash; in this case, the initializer list constructor would create an object, taking the first elements as keys</li>
<li>creating an empty array &ndash; passing the empty initializer list to the initializer list constructor yields an empty object</li>
</ol>
</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">init</td><td>initializer list with JSON values to create an array from (optional)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>JSON array value</dd></dl>
<p>@complexity Linear in the size of <em>init</em>.</p>
<p>@liveexample{The following code shows an example for the <code>array</code> function.,array}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#afbad48316e7cd37366ba3ac5d7e5859e">basic_json(std::initializer_list&lt;basic_json&gt;, bool, value_t)</a> &ndash; create a JSON <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> from an initializer list </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9f42ee7d10eee2d5a73fd94ca7f767ca">object(std::initializer_list&lt;basic_json&gt;)</a> &ndash; create a JSON <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9f42ee7d10eee2d5a73fd94ca7f767ca" title="explicitly create an object from an initializer list">object</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> from an initializer list</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a4a4ec75e4d2845d9bcf7a9e5458e4949_cgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a4a4ec75e4d2845d9bcf7a9e5458e4949_icgraph.svg" width="551" height="104"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a8ab61397c10f18b305520da7073b2b45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ab61397c10f18b305520da7073b2b45">&#9670;&nbsp;</a></span>at() <span class="overload">[1/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::at </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/d60/classnlohmann_1_1basic__json_1_1json__pointer.xhtml">json_pointer</a> &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access specified element via JSON Pointer </p>
<p>Returns a reference to the element at with specified JSON pointer <em>ptr</em>, with bounds checking.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ptr</td><td>JSON pointer to the desired element</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to the element pointed to by <em>ptr</em> </dd></dl>
<p>@complexity Constant.</p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::out_of_range</td><td>if the JSON pointer can not be resolved </td></tr>
    <tr><td class="paramname">std::domain_error</td><td>if an array index begins with '0' </td></tr>
    <tr><td class="paramname">std::invalid_argument</td><td>if an array index was not a number</td></tr>
  </table>
  </dd>
</dl>
<p>@liveexample{The behavior is shown in the example.,at_json_pointer}</p>
<dl class="section since"><dt>Since</dt><dd>version 2.0.0 </dd></dl>

</div>
</div>
<a id="a7479d686148c26e252781bb32aa5d5c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7479d686148c26e252781bb32aa5d5c9">&#9670;&nbsp;</a></span>at() <span class="overload">[2/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::at </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/d60/classnlohmann_1_1basic__json_1_1json__pointer.xhtml">json_pointer</a> &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access specified element via JSON Pointer </p>
<p>Returns a const reference to the element at with specified JSON pointer <em>ptr</em>, with bounds checking.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ptr</td><td>JSON pointer to the desired element</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to the element pointed to by <em>ptr</em> </dd></dl>
<p>@complexity Constant.</p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::out_of_range</td><td>if the JSON pointer can not be resolved </td></tr>
    <tr><td class="paramname">std::domain_error</td><td>if an array index begins with '0' </td></tr>
    <tr><td class="paramname">std::invalid_argument</td><td>if an array index was not a number</td></tr>
  </table>
  </dd>
</dl>
<p>@liveexample{The behavior is shown in the example.,at_json_pointer_const}</p>
<dl class="section since"><dt>Since</dt><dd>version 2.0.0 </dd></dl>

</div>
</div>
<a id="a93403e803947b86f4da2d1fb3345cf2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93403e803947b86f4da2d1fb3345cf2c">&#9670;&nbsp;</a></span>at() <span class="overload">[3/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::at </td>
          <td>(</td>
          <td class="paramtype">const typename object_t::key_type &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access specified object element with bounds checking </p>
<p>Returns a reference to the element at with specified key <em>key</em>, with bounds checking.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>key of the element to access</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to the element at key <em>key</em> </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if the JSON value is not an object; example: <code>"cannot use at() with boolean"</code> </td></tr>
    <tr><td class="paramname">std::out_of_range</td><td>if the key <em>key</em> is is not stored in the object; that is, <code>find(key) == <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a></code>; example: <code>"key "the fast" not found"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Logarithmic in the size of the container.</p>
<p>@liveexample{The example below shows how object elements can be read and written using <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a73ae333487310e3302135189ce8ff5d8" title="access specified array element with bounds checking">at()</a></code>.,at__object_t_key_type}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a233b02b0839ef798942dd46157cc0fe6">operator[](const typename object_t::key_type&amp;)</a> for unchecked access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc" title="the type of an element reference">reference</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a">value()</a> for access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> with a default <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-5" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-5-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-5-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-5-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a93403e803947b86f4da2d1fb3345cf2c_cgraph.svg" width="374" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="acac9d438c9bb12740dcdb01069293a34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acac9d438c9bb12740dcdb01069293a34">&#9670;&nbsp;</a></span>at() <span class="overload">[4/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::at </td>
          <td>(</td>
          <td class="paramtype">const typename object_t::key_type &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access specified object element with bounds checking </p>
<p>Returns a const reference to the element at with specified key <em>key</em>, with bounds checking.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>key of the element to access</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>const reference to the element at key <em>key</em> </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if the JSON value is not an object; example: <code>"cannot use at() with boolean"</code> </td></tr>
    <tr><td class="paramname">std::out_of_range</td><td>if the key <em>key</em> is is not stored in the object; that is, <code>find(key) == <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a></code>; example: <code>"key "the fast" not found"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Logarithmic in the size of the container.</p>
<p>@liveexample{The example below shows how object elements can be read using <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a73ae333487310e3302135189ce8ff5d8" title="access specified array element with bounds checking">at()</a></code>.,at__object_t_key_type_const}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a233b02b0839ef798942dd46157cc0fe6">operator[](const typename object_t::key_type&amp;)</a> for unchecked access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc" title="the type of an element reference">reference</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a">value()</a> for access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> with a default <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-6" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-6-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-6-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-6-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_acac9d438c9bb12740dcdb01069293a34_cgraph.svg" width="374" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a73ae333487310e3302135189ce8ff5d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a73ae333487310e3302135189ce8ff5d8">&#9670;&nbsp;</a></span>at() <span class="overload">[5/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::at </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a>&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access specified array element with bounds checking </p>
<p>Returns a reference to the element at specified location <em>idx</em>, with bounds checking.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">idx</td><td>index of the element to access</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to the element at index <em>idx</em> </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if the JSON value is not an array; example: <code>"cannot use at() with string"</code> </td></tr>
    <tr><td class="paramname">std::out_of_range</td><td>if the index <em>idx</em> is out of range of the array; that is, <code>idx &gt;= <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a25e27ad0c6d53c01871c5485e1f75b96" title="returns the number of elements">size()</a></code>; example: <code>"array index 7 is out of range"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Constant.</p>
<p>@liveexample{The example below shows how array elements can be read and written using <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a73ae333487310e3302135189ce8ff5d8" title="access specified array element with bounds checking">at()</a></code>.,at__size_type}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-7" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-7-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-7-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-7-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_cgraph.svg" width="380" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-8" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-8-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-8-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-8-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_icgraph.svg" width="374" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ab157adb4de8475b452da9ebf04f2de15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab157adb4de8475b452da9ebf04f2de15">&#9670;&nbsp;</a></span>at() <span class="overload">[6/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::at </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a>&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access specified array element with bounds checking </p>
<p>Returns a const reference to the element at specified location <em>idx</em>, with bounds checking.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">idx</td><td>index of the element to access</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>const reference to the element at index <em>idx</em> </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if the JSON value is not an array; example: <code>"cannot use at() with string"</code> </td></tr>
    <tr><td class="paramname">std::out_of_range</td><td>if the index <em>idx</em> is out of range of the array; that is, <code>idx &gt;= <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a25e27ad0c6d53c01871c5485e1f75b96" title="returns the number of elements">size()</a></code>; example: <code>"array index 7 is out of range"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Constant.</p>
<p>@liveexample{The example below shows how array elements can be read using <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a73ae333487310e3302135189ce8ff5d8" title="access specified array element with bounds checking">at()</a></code>.,at__size_type_const}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-9" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-9-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-9-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-9-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_ab157adb4de8475b452da9ebf04f2de15_cgraph.svg" width="380" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a011397134847f36db0ed7d7a93753677"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a011397134847f36db0ed7d7a93753677">&#9670;&nbsp;</a></span>back() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::back </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access the last element </p>
<p>Returns a reference to the last element in the container. For a JSON container <code>c</code>, the expression <code>c.back()</code> is equivalent to </p><div class="fragment"><div class="line"><span class="keyword">auto</span> tmp = c.end();</div>
<div class="line">--tmp;</div>
<div class="line"><span class="keywordflow">return</span> *tmp;</div>
</div><!-- fragment --><dl class="section return"><dt>Returns</dt><dd>In case of a structured type (array or object), a reference to the last element is returned. In case of number, string, or boolean values, a reference to the value is returned.</dd></dl>
<p>@complexity Constant.</p>
<dl class="section pre"><dt>Precondition</dt><dd>The JSON value must not be <code>null</code> (would throw <code>std::out_of_range</code>) or an empty array or object (undefined behavior, <b>guarded by assertions</b>). </dd></dl>
<dl class="section post"><dt>Postcondition</dt><dd>The JSON value remains unchanged.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::out_of_range</td><td>when called on <code>null</code> value.</td></tr>
  </table>
  </dd>
</dl>
<p>@liveexample{The following code shows an example for <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a011397134847f36db0ed7d7a93753677" title="access the last element">back()</a></code>.,back}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a3acba9c6ceb7214e565fe08c3ba5b352">front()</a> &ndash; access the first element</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-10" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-10-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-10-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-10-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a011397134847f36db0ed7d7a93753677_cgraph.svg" width="384" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a83fe4a151b3a591f357527d5d9aa1b9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83fe4a151b3a591f357527d5d9aa1b9f">&#9670;&nbsp;</a></span>back() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::back </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access the last element </p>
<p>Returns a reference to the last element in the container. For a JSON container <code>c</code>, the expression <code>c.back()</code> is equivalent to </p><div class="fragment"><div class="line"><span class="keyword">auto</span> tmp = c.end();</div>
<div class="line">--tmp;</div>
<div class="line"><span class="keywordflow">return</span> *tmp;</div>
</div><!-- fragment --><dl class="section return"><dt>Returns</dt><dd>In case of a structured type (array or object), a reference to the last element is returned. In case of number, string, or boolean values, a reference to the value is returned.</dd></dl>
<p>@complexity Constant.</p>
<dl class="section pre"><dt>Precondition</dt><dd>The JSON value must not be <code>null</code> (would throw <code>std::out_of_range</code>) or an empty array or object (undefined behavior, <b>guarded by assertions</b>). </dd></dl>
<dl class="section post"><dt>Postcondition</dt><dd>The JSON value remains unchanged.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::out_of_range</td><td>when called on <code>null</code> value.</td></tr>
  </table>
  </dd>
</dl>
<p>@liveexample{The following code shows an example for <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a011397134847f36db0ed7d7a93753677" title="access the last element">back()</a></code>.,back}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a3acba9c6ceb7214e565fe08c3ba5b352">front()</a> &ndash; access the first element</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-11" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-11-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-11-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-11-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a83fe4a151b3a591f357527d5d9aa1b9f_cgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a4f0f5dd42b2987ff20306ed78bd31d1d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f0f5dd42b2987ff20306ed78bd31d1d">&#9670;&nbsp;</a></span>begin() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>returns a const iterator to the first element </p>
<p>Returns a const iterator to the first element.</p>
<div class="image">
<img src="../../range-begin-end.svg" alt=""/>
<div class="caption">
Illustration from cppreference.com</div></div>
<dl class="section return"><dt>Returns</dt><dd>const iterator to the first element</dd></dl>
<p>@complexity Constant.</p>
<p>@requirement This function helps <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a></code> satisfying the <a href="http://en.cppreference.com/w/cpp/concept/Container">Container</a> requirements:</p><ul>
<li>The complexity is constant.</li>
<li>Has the semantics of <code>const_cast&lt;const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a>&amp;&gt;(*this).<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0ff28dac23f2bdecee9564d07f51dcdc" title="returns an iterator to the first element">begin()</a></code>.</li>
</ul>
<p>@liveexample{The following code shows an example for <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ad865d6c291b237ae508d5cb2146b5877" title="returns a const iterator to the first element">cbegin()</a></code>.,cbegin}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0ff28dac23f2bdecee9564d07f51dcdc">begin()</a> &ndash; returns an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the beginning </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c">end()</a> &ndash; returns an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8dba7b7d2f38e6b0c614030aa43983f6">cend()</a> &ndash; returns a const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-12" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-12-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-12-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-12-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a4f0f5dd42b2987ff20306ed78bd31d1d_cgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a0ff28dac23f2bdecee9564d07f51dcdc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ff28dac23f2bdecee9564d07f51dcdc">&#9670;&nbsp;</a></span>begin() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>returns an iterator to the first element </p>
<p>Returns an iterator to the first element.</p>
<div class="image">
<img src="../../range-begin-end.svg" alt=""/>
<div class="caption">
Illustration from cppreference.com</div></div>
<dl class="section return"><dt>Returns</dt><dd>iterator to the first element</dd></dl>
<p>@complexity Constant.</p>
<p>@requirement This function helps <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a></code> satisfying the <a href="http://en.cppreference.com/w/cpp/concept/Container">Container</a> requirements:</p><ul>
<li>The complexity is constant.</li>
</ul>
<p>@liveexample{The following code shows an example for <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0ff28dac23f2bdecee9564d07f51dcdc" title="returns an iterator to the first element">begin()</a></code>.,begin}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ad865d6c291b237ae508d5cb2146b5877">cbegin()</a> &ndash; returns a const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the beginning </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c">end()</a> &ndash; returns an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8dba7b7d2f38e6b0c614030aa43983f6">cend()</a> &ndash; returns a const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-13" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-13-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-13-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-13-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a0ff28dac23f2bdecee9564d07f51dcdc_icgraph.svg" width="355" height="314"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ad865d6c291b237ae508d5cb2146b5877"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad865d6c291b237ae508d5cb2146b5877">&#9670;&nbsp;</a></span>cbegin()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::cbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>returns a const iterator to the first element </p>
<p>Returns a const iterator to the first element.</p>
<div class="image">
<img src="../../range-begin-end.svg" alt=""/>
<div class="caption">
Illustration from cppreference.com</div></div>
<dl class="section return"><dt>Returns</dt><dd>const iterator to the first element</dd></dl>
<p>@complexity Constant.</p>
<p>@requirement This function helps <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a></code> satisfying the <a href="http://en.cppreference.com/w/cpp/concept/Container">Container</a> requirements:</p><ul>
<li>The complexity is constant.</li>
<li>Has the semantics of <code>const_cast&lt;const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a>&amp;&gt;(*this).<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0ff28dac23f2bdecee9564d07f51dcdc" title="returns an iterator to the first element">begin()</a></code>.</li>
</ul>
<p>@liveexample{The following code shows an example for <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ad865d6c291b237ae508d5cb2146b5877" title="returns a const iterator to the first element">cbegin()</a></code>.,cbegin}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0ff28dac23f2bdecee9564d07f51dcdc">begin()</a> &ndash; returns an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the beginning </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c">end()</a> &ndash; returns an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8dba7b7d2f38e6b0c614030aa43983f6">cend()</a> &ndash; returns a const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-14" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-14-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-14-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-14-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_ad865d6c291b237ae508d5cb2146b5877_icgraph.svg" width="551" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a8dba7b7d2f38e6b0c614030aa43983f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8dba7b7d2f38e6b0c614030aa43983f6">&#9670;&nbsp;</a></span>cend()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::cend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>returns a const iterator to one past the last element </p>
<p>Returns a const iterator to one past the last element.</p>
<div class="image">
<img src="../../range-begin-end.svg" alt=""/>
<div class="caption">
Illustration from cppreference.com</div></div>
<dl class="section return"><dt>Returns</dt><dd>const iterator one past the last element</dd></dl>
<p>@complexity Constant.</p>
<p>@requirement This function helps <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a></code> satisfying the <a href="http://en.cppreference.com/w/cpp/concept/Container">Container</a> requirements:</p><ul>
<li>The complexity is constant.</li>
<li>Has the semantics of <code>const_cast&lt;const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a>&amp;&gt;(*this).<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a></code>.</li>
</ul>
<p>@liveexample{The following code shows an example for <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8dba7b7d2f38e6b0c614030aa43983f6" title="returns a const iterator to one past the last element">cend()</a></code>.,cend}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c">end()</a> &ndash; returns an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0ff28dac23f2bdecee9564d07f51dcdc">begin()</a> &ndash; returns an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the beginning </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ad865d6c291b237ae508d5cb2146b5877">cbegin()</a> &ndash; returns a const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the beginning</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-15" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-15-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-15-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-15-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a8dba7b7d2f38e6b0c614030aa43983f6_icgraph.svg" width="580" height="235"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="abfeba47810ca72f2176419942c4e1952"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfeba47810ca72f2176419942c4e1952">&#9670;&nbsp;</a></span>clear()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>clears the contents </p>
<p>Clears the content of a JSON value and resets it to the default value as if <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a32124a16dc80729d964d9caf607c2bc8">basic_json(value_t)</a> would have been called:</p>
<table class="markdownTable">
<tr class="markdownTableHead">
<th class="markdownTableHeadNone">Value type  </th><th class="markdownTableHeadNone">initial value   </th></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">null  </td><td class="markdownTableBodyNone"><code>null</code>   </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">boolean  </td><td class="markdownTableBodyNone"><code>false</code>   </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">string  </td><td class="markdownTableBodyNone"><code>""</code>   </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">number  </td><td class="markdownTableBodyNone"><code>0</code>   </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">object  </td><td class="markdownTableBodyNone"><code>{}</code>   </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">array  </td><td class="markdownTableBodyNone"><code>[]</code>   </td></tr>
</table>
<p>@complexity Linear in the size of the JSON value.</p>
<p>@liveexample{The example below shows the effect of <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abfeba47810ca72f2176419942c4e1952" title="clears the contents">clear()</a></code> to different JSON types.,clear}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="a5261eba9637f59d17d6cab5f14ce5747"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5261eba9637f59d17d6cab5f14ce5747">&#9670;&nbsp;</a></span>count()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::count </td>
          <td>(</td>
          <td class="paramtype">typename object_t::key_type&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>returns the number of occurrences of a key in a JSON object </p>
<p>Returns the number of elements with key <em>key</em>. If ObjectType is the default <code>std::map</code> type, the return value will always be <code>0</code> (<em>key</em> was not found) or <code>1</code> (<em>key</em> was found).</p>
<dl class="section note"><dt>Note</dt><dd>This method always returns <code>0</code> when executed on a JSON type that is not an object.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>key value of the element to count</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Number of elements with key <em>key</em>. If the JSON value is not an object, the return value will be <code>0</code>.</dd></dl>
<p>@complexity Logarithmic in the size of the JSON object.</p>
<p>@liveexample{The example shows how <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5261eba9637f59d17d6cab5f14ce5747" title="returns the number of occurrences of a key in a JSON object">count()</a></code> is used.,count}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-16" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-16-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-16-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-16-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a5261eba9637f59d17d6cab5f14ce5747_cgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a1e0769d22d54573f294da0e5c6abc9de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e0769d22d54573f294da0e5c6abc9de">&#9670;&nbsp;</a></span>crbegin()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a72be3c24bfa24f0993d6c11af03e7404">const_reverse_iterator</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::crbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>returns a const reverse iterator to the last element </p>
<p>Returns a const iterator to the reverse-beginning; that is, the last element.</p>
<div class="image">
<img src="../../range-rbegin-rend.svg" alt=""/>
<div class="caption">
Illustration from cppreference.com</div></div>
<p>@complexity Constant.</p>
<p>@requirement This function helps <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a></code> satisfying the <a href="http://en.cppreference.com/w/cpp/concept/ReversibleContainer">ReversibleContainer</a> requirements:</p><ul>
<li>The complexity is constant.</li>
<li>Has the semantics of <code>const_cast&lt;const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a>&amp;&gt;(*this).<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1ef93e2006dbe52667294f5ef38b0b10" title="returns an iterator to the reverse-beginning">rbegin()</a></code>.</li>
</ul>
<p>@liveexample{The following code shows an example for <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1e0769d22d54573f294da0e5c6abc9de" title="returns a const reverse iterator to the last element">crbegin()</a></code>.,crbegin}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1ef93e2006dbe52667294f5ef38b0b10">rbegin()</a> &ndash; returns a reverse <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the beginning </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac77aed0925d447744676725ab0b6d535">rend()</a> &ndash; returns a reverse <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5795b029dbf28e0cb2c7a439ec5d0a88">crend()</a> &ndash; returns a const reverse <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-17" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-17-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-17-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-17-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a1e0769d22d54573f294da0e5c6abc9de_cgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-18" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-18-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-18-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-18-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a1e0769d22d54573f294da0e5c6abc9de_icgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a5795b029dbf28e0cb2c7a439ec5d0a88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5795b029dbf28e0cb2c7a439ec5d0a88">&#9670;&nbsp;</a></span>crend()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a72be3c24bfa24f0993d6c11af03e7404">const_reverse_iterator</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::crend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>returns a const reverse iterator to one before the first </p>
<p>Returns a const reverse iterator to the reverse-end; that is, one before the first element.</p>
<div class="image">
<img src="../../range-rbegin-rend.svg" alt=""/>
<div class="caption">
Illustration from cppreference.com</div></div>
<p>@complexity Constant.</p>
<p>@requirement This function helps <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a></code> satisfying the <a href="http://en.cppreference.com/w/cpp/concept/ReversibleContainer">ReversibleContainer</a> requirements:</p><ul>
<li>The complexity is constant.</li>
<li>Has the semantics of <code>const_cast&lt;const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a>&amp;&gt;(*this).<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac77aed0925d447744676725ab0b6d535" title="returns an iterator to the reverse-end">rend()</a></code>.</li>
</ul>
<p>@liveexample{The following code shows an example for <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5795b029dbf28e0cb2c7a439ec5d0a88" title="returns a const reverse iterator to one before the first">crend()</a></code>.,crend}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac77aed0925d447744676725ab0b6d535">rend()</a> &ndash; returns a reverse <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1ef93e2006dbe52667294f5ef38b0b10">rbegin()</a> &ndash; returns a reverse <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the beginning </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1e0769d22d54573f294da0e5c6abc9de">crbegin()</a> &ndash; returns a const reverse <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the beginning</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-19" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-19-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-19-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-19-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a5795b029dbf28e0cb2c7a439ec5d0a88_cgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-20" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-20-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-20-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-20-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a5795b029dbf28e0cb2c7a439ec5d0a88_icgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a543bd5f7490de54c875b2c0912dc9a49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a543bd5f7490de54c875b2c0912dc9a49">&#9670;&nbsp;</a></span>diff()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::diff </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &amp;&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>path</em> = <code>&quot;&quot;</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>creates a diff as a JSON patch </p>
<p>Creates a <a href="http://jsonpatch.com">JSON Patch</a> so that value <em>source</em> can be changed into the value <em>target</em> by calling <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a81e0c41a4a9dff4df2f6973f7f8b2a83">patch</a> function.</p>
<dl class="section invariant"><dt>Invariant</dt><dd>For two JSON values <em>source</em> and <em>target</em>, the following code yields always <code>true</code>: <div class="fragment"><div class="line">source.patch(<a class="code" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a543bd5f7490de54c875b2c0912dc9a49">diff</a>(source, target)) == target;</div>
</div><!-- fragment --></dd></dl>
<dl class="section note"><dt>Note</dt><dd>Currently, only <code>remove</code>, <code>add</code>, and <code>replace</code> operations are generated.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">source</td><td>JSON value to compare from </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">target</td><td>JSON value to compare against </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">path</td><td>helper value to create JSON pointers</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a JSON patch to convert the <em>source</em> to <em>target</em> </dd></dl>
<p>@complexity Linear in the lengths of <em>source</em> and <em>target</em>.</p>
<p>@liveexample{The following code shows how a JSON patch is created as a diff for two JSON values.,diff}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a81e0c41a4a9dff4df2f6973f7f8b2a83">patch</a> &ndash; apply a JSON <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a81e0c41a4a9dff4df2f6973f7f8b2a83" title="applies a JSON patch">patch</a></dd>
<dd>
<a href="https://tools.ietf.org/html/rfc6902">RFC 6902 (JSON Patch)</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.0.0 </dd></dl>
<div id="dynsection-21" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-21-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-21-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-21-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a543bd5f7490de54c875b2c0912dc9a49_cgraph.svg" width="587" height="562"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a5319dc1bb9dfe19ce7ff559aaded3422"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5319dc1bb9dfe19ce7ff559aaded3422">&#9670;&nbsp;</a></span>dump()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::dump </td>
          <td>(</td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>indent</em> = <code>-1</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>serialization </p>
<p>Serialization function for JSON values. The function tries to mimic Python's <code>json.dumps()</code> function, and currently supports its <em>indent</em> parameter.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">indent</td><td>If indent is nonnegative, then array elements and object members will be pretty-printed with that indent level. An indent level of <code>0</code> will only insert newlines. <code>-1</code> (the default) selects the most compact representation.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>string containing the serialization of the JSON value</dd></dl>
<p>@complexity Linear.</p>
<p>@liveexample{The following example shows the effect of different <em>indent</em> parameters to the result of the serialization.,dump}</p>
<dl class="section see"><dt>See also</dt><dd><a href="https://docs.python.org/2/library/json.html#json.dump">https://docs.python.org/2/library/json.html#json.dump</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-22" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-22-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-22-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-22-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a5319dc1bb9dfe19ce7ff559aaded3422_icgraph.svg" width="351" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a5338e282d1d02bed389d852dd670d98d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5338e282d1d02bed389d852dd670d98d">&#9670;&nbsp;</a></span>emplace()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a>, bool&gt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::emplace </td>
          <td>(</td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>add an object to an object if key does not exist </p>
<p>Inserts a new element into a JSON object constructed in-place with the given <em>args</em> if there is no element with the key in the container. If the function is called on a JSON null value, an empty object is created before appending the value created from <em>args</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>arguments to forward to a constructor of <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Args</td><td>compatible types to create a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> object</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair consisting of an iterator to the inserted element, or the already-existing element if no insertion happened, and a bool denoting whether the insertion took place.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>when called on a type other than JSON object or null; example: <code>"cannot use emplace() with number"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Logarithmic in the size of the container, O(log(<code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a25e27ad0c6d53c01871c5485e1f75b96" title="returns the number of elements">size()</a></code>)).</p>
<p>@liveexample{The example shows how <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5338e282d1d02bed389d852dd670d98d" title="add an object to an object if key does not exist">emplace()</a></code> can be used to add elements to a JSON object. Note how the <code>null</code> value was silently converted to a JSON object. Further note how no value is added if there was already one value stored with the same key.,emplace}</p>
<dl class="section since"><dt>Since</dt><dd>version 2.0.8 </dd></dl>
<div id="dynsection-23" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-23-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-23-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-23-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a5338e282d1d02bed389d852dd670d98d_cgraph.svg" width="355" height="248"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aacf5eed15a8b66fb1e88910707a5e229"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aacf5eed15a8b66fb1e88910707a5e229">&#9670;&nbsp;</a></span>emplace_back()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::emplace_back </td>
          <td>(</td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>add an object to an array </p>
<p>Creates a JSON value from the passed parameters <em>args</em> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending the value created from <em>args</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>arguments to forward to a constructor of <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Args</td><td>compatible types to create a <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> object</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>when called on a type other than JSON array or null; example: <code>"cannot use emplace_back() with number"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Amortized constant.</p>
<p>@liveexample{The example shows how <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac8e523ddc8c2dd7e5d2daf0d49a9c0d7" title="add an object to an array">push_back()</a></code> can be used to add elements to a JSON array. Note how the <code>null</code> value was silently converted to a JSON array.,emplace_back}</p>
<dl class="section since"><dt>Since</dt><dd>version 2.0.8 </dd></dl>
<div id="dynsection-24" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-24-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-24-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-24-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_aacf5eed15a8b66fb1e88910707a5e229_cgraph.svg" width="355" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a1a86d444bfeaa9518d2421aedd74444a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a86d444bfeaa9518d2421aedd74444a">&#9670;&nbsp;</a></span>empty()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::empty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>checks whether the container is empty </p>
<p>Checks if a JSON value has no elements.</p>
<dl class="section return"><dt>Returns</dt><dd>The return value depends on the different types and is defined as follows: <table class="markdownTable">
<tr class="markdownTableHead">
<th class="markdownTableHeadNone">Value type  </th><th class="markdownTableHeadNone">return value   </th></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">null  </td><td class="markdownTableBodyNone"><code>true</code>   </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">boolean  </td><td class="markdownTableBodyNone"><code>false</code>   </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">string  </td><td class="markdownTableBodyNone"><code>false</code>   </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">number  </td><td class="markdownTableBodyNone"><code>false</code>   </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">object  </td><td class="markdownTableBodyNone">result of function <code>object_t::empty()</code>   </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">array  </td><td class="markdownTableBodyNone">result of function <code>array_t::empty()</code>   </td></tr>
</table>
</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function does not return whether a string stored as JSON value is empty - it returns whether the JSON container itself is empty which is false in the case of a string.</dd></dl>
<p>@complexity Constant, as long as <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae095578e03df97c5b3991787f1056374">array_t</a> and <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa1eb13d5aa86f80cbee6c58e90fbaf49">object_t</a> satisfy the Container concept; that is, their <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1a86d444bfeaa9518d2421aedd74444a" title="checks whether the container is empty">empty()</a></code> functions have constant complexity.</p>
<p>@requirement This function helps <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a></code> satisfying the <a href="http://en.cppreference.com/w/cpp/concept/Container">Container</a> requirements:</p><ul>
<li>The complexity is constant.</li>
<li>Has the semantics of <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0ff28dac23f2bdecee9564d07f51dcdc" title="returns an iterator to the first element">begin()</a> == <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a></code>.</li>
</ul>
<p>@liveexample{The following code uses <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1a86d444bfeaa9518d2421aedd74444a" title="checks whether the container is empty">empty()</a></code> to check if a JSON object contains any elements.,empty}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a25e27ad0c6d53c01871c5485e1f75b96">size()</a> &ndash; returns the number of elements</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="a1c15707055088cd5436ae91db72cbe67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c15707055088cd5436ae91db72cbe67">&#9670;&nbsp;</a></span>end() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>returns a const iterator to one past the last element </p>
<p>Returns a const iterator to one past the last element.</p>
<div class="image">
<img src="../../range-begin-end.svg" alt=""/>
<div class="caption">
Illustration from cppreference.com</div></div>
<dl class="section return"><dt>Returns</dt><dd>const iterator one past the last element</dd></dl>
<p>@complexity Constant.</p>
<p>@requirement This function helps <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a></code> satisfying the <a href="http://en.cppreference.com/w/cpp/concept/Container">Container</a> requirements:</p><ul>
<li>The complexity is constant.</li>
<li>Has the semantics of <code>const_cast&lt;const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a>&amp;&gt;(*this).<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a></code>.</li>
</ul>
<p>@liveexample{The following code shows an example for <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8dba7b7d2f38e6b0c614030aa43983f6" title="returns a const iterator to one past the last element">cend()</a></code>.,cend}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c">end()</a> &ndash; returns an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0ff28dac23f2bdecee9564d07f51dcdc">begin()</a> &ndash; returns an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the beginning </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ad865d6c291b237ae508d5cb2146b5877">cbegin()</a> &ndash; returns a const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the beginning</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-25" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-25-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-25-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-25-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a1c15707055088cd5436ae91db72cbe67_cgraph.svg" width="384" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a13e032a02a7fd8a93fdddc2fcbc4763c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a13e032a02a7fd8a93fdddc2fcbc4763c">&#9670;&nbsp;</a></span>end() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>returns an iterator to one past the last element </p>
<p>Returns an iterator to one past the last element.</p>
<div class="image">
<img src="../../range-begin-end.svg" alt=""/>
<div class="caption">
Illustration from cppreference.com</div></div>
<dl class="section return"><dt>Returns</dt><dd>iterator one past the last element</dd></dl>
<p>@complexity Constant.</p>
<p>@requirement This function helps <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a></code> satisfying the <a href="http://en.cppreference.com/w/cpp/concept/Container">Container</a> requirements:</p><ul>
<li>The complexity is constant.</li>
</ul>
<p>@liveexample{The following code shows an example for <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a></code>.,end}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8dba7b7d2f38e6b0c614030aa43983f6">cend()</a> &ndash; returns a const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0ff28dac23f2bdecee9564d07f51dcdc">begin()</a> &ndash; returns an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the beginning </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ad865d6c291b237ae508d5cb2146b5877">cbegin()</a> &ndash; returns a const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the beginning</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-26" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-26-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-26-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-26-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a13e032a02a7fd8a93fdddc2fcbc4763c_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a88cbcefe9a3f4d294bed0653550a5cb9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88cbcefe9a3f4d294bed0653550a5cb9">&#9670;&nbsp;</a></span>erase() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::erase </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a>&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>remove element from a JSON array given an index </p>
<p>Removes element from a JSON array at the index <em>idx</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">idx</td><td>index of the element to remove</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>when called on a type other than JSON array; example: <code>"cannot use erase() with null"</code> </td></tr>
    <tr><td class="paramname">std::out_of_range</td><td>when <code>idx &gt;= <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a25e27ad0c6d53c01871c5485e1f75b96" title="returns the number of elements">size()</a></code>; example: <code>"array index 17
is out of range"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Linear in distance between <em>idx</em> and the end of the container.</p>
<p>@liveexample{The example shows the effect of <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a068a16e76be178e83da6a192916923ed" title="remove element given an iterator">erase()</a></code>.,erase__size_type}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a068a16e76be178e83da6a192916923ed">erase(IteratorType)</a> &ndash; removes the element <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a73ae333487310e3302135189ce8ff5d8" title="access specified array element with bounds checking">at</a> a given position </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4b3f7eb2d4625d95a51fbbdceb7c5f39">erase(IteratorType, IteratorType)</a> &ndash; removes the elements in the given range </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2f8484d69c55d8f2a9697a7bec29362a">erase(const typename object_t::key_type&amp;)</a> &ndash; removes the element from an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9f42ee7d10eee2d5a73fd94ca7f767ca" title="explicitly create an object from an initializer list">object</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a73ae333487310e3302135189ce8ff5d8" title="access specified array element with bounds checking">at</a> the given key</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-27" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-27-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-27-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-27-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a88cbcefe9a3f4d294bed0653550a5cb9_cgraph.svg" width="362" height="248"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a2f8484d69c55d8f2a9697a7bec29362a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f8484d69c55d8f2a9697a7bec29362a">&#9670;&nbsp;</a></span>erase() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::erase </td>
          <td>(</td>
          <td class="paramtype">const typename object_t::key_type &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>remove element from a JSON object given a key </p>
<p>Removes elements from a JSON object with the key value <em>key</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>value of the elements to remove</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Number of elements removed. If <em>ObjectType</em> is the default <code>std::map</code> type, the return value will always be <code>0</code> (<em>key</em> was not found) or <code>1</code> (<em>key</em> was found).</dd></dl>
<dl class="section post"><dt>Postcondition</dt><dd>References and iterators to the erased elements are invalidated. Other references and iterators are not affected.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>when called on a type other than JSON object; example: <code>"cannot use erase() with null"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity <code>log(size()) + count(key)</code></p>
<p>@liveexample{The example shows the effect of <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a068a16e76be178e83da6a192916923ed" title="remove element given an iterator">erase()</a></code>.,erase__key_type}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a068a16e76be178e83da6a192916923ed">erase(IteratorType)</a> &ndash; removes the element <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a73ae333487310e3302135189ce8ff5d8" title="access specified array element with bounds checking">at</a> a given position </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4b3f7eb2d4625d95a51fbbdceb7c5f39">erase(IteratorType, IteratorType)</a> &ndash; removes the elements in the given range </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88cbcefe9a3f4d294bed0653550a5cb9">erase(const size_type)</a> &ndash; removes the element from an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4a4ec75e4d2845d9bcf7a9e5458e4949" title="explicitly create an array from an initializer list">array</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a73ae333487310e3302135189ce8ff5d8" title="access specified array element with bounds checking">at</a> the given index</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-28" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-28-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-28-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-28-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a2f8484d69c55d8f2a9697a7bec29362a_cgraph.svg" width="355" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a4b3f7eb2d4625d95a51fbbdceb7c5f39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b3f7eb2d4625d95a51fbbdceb7c5f39">&#9670;&nbsp;</a></span>erase() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;class IteratorType , typename std::enable_if&lt; std::is_same&lt; IteratorType, typename basic_json_t::iterator &gt;::value or std::is_same&lt; IteratorType, typename basic_json_t::const_iterator &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">IteratorType <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::erase </td>
          <td>(</td>
          <td class="paramtype">IteratorType&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">IteratorType&#160;</td>
          <td class="paramname"><em>last</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>remove elements given an iterator range </p>
<p>Removes the element specified by the range <code>[first; last)</code>. The iterator <em>first</em> does not need to be dereferenceable if <code>first == last</code>: erasing an empty range is a no-op.</p>
<p>If called on a primitive type other than <code>null</code>, the resulting JSON value will be <code>null</code>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">first</td><td>iterator to the beginning of the range to remove </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">last</td><td>iterator past the end of the range to remove </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator following the last removed element. If the iterator <em>second</em> refers to the last element, the <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a></code> iterator is returned.</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">IteratorType</td><td>an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a> or <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a></td></tr>
  </table>
  </dd>
</dl>
<dl class="section post"><dt>Postcondition</dt><dd>Invalidates iterators and references at or after the point of the erase, including the <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a></code> iterator.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if called on a <code>null</code> value; example: <code>"cannot
use erase() with null"</code> </td></tr>
    <tr><td class="paramname">std::domain_error</td><td>if called on iterators which does not belong to the current JSON value; example: <code>"iterators do not fit current value"</code> </td></tr>
    <tr><td class="paramname">std::out_of_range</td><td>if called on a primitive type with invalid iterators (i.e., if <code>first != <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0ff28dac23f2bdecee9564d07f51dcdc" title="returns an iterator to the first element">begin()</a></code> and <code>last != <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a></code>); example: <code>"iterators out of range"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity The complexity depends on the type:</p><ul>
<li>objects: <code>log(size()) + std::distance(first, last)</code></li>
<li>arrays: linear in the distance between <em>first</em> and <em>last</em>, plus linear in the distance between <em>last</em> and end of the container</li>
<li>strings: linear in the length of the string</li>
<li>other types: constant</li>
</ul>
<p>@liveexample{The example shows the result of <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a068a16e76be178e83da6a192916923ed" title="remove element given an iterator">erase()</a></code> for different JSON types.,erase__IteratorType_IteratorType}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a068a16e76be178e83da6a192916923ed">erase(IteratorType)</a> &ndash; removes the element <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a73ae333487310e3302135189ce8ff5d8" title="access specified array element with bounds checking">at</a> a given position </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2f8484d69c55d8f2a9697a7bec29362a">erase(const typename object_t::key_type&amp;)</a> &ndash; removes the element from an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9f42ee7d10eee2d5a73fd94ca7f767ca" title="explicitly create an object from an initializer list">object</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a73ae333487310e3302135189ce8ff5d8" title="access specified array element with bounds checking">at</a> the given key </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88cbcefe9a3f4d294bed0653550a5cb9">erase(const size_type)</a> &ndash; removes the element from an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4a4ec75e4d2845d9bcf7a9e5458e4949" title="explicitly create an array from an initializer list">array</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a73ae333487310e3302135189ce8ff5d8" title="access specified array element with bounds checking">at</a> the given index</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-29" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-29-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-29-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-29-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a4b3f7eb2d4625d95a51fbbdceb7c5f39_cgraph.svg" width="384" height="170"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a068a16e76be178e83da6a192916923ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a068a16e76be178e83da6a192916923ed">&#9670;&nbsp;</a></span>erase() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;class IteratorType , typename std::enable_if&lt; std::is_same&lt; IteratorType, typename basic_json_t::iterator &gt;::value or std::is_same&lt; IteratorType, typename basic_json_t::const_iterator &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">IteratorType <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::erase </td>
          <td>(</td>
          <td class="paramtype">IteratorType&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>remove element given an iterator </p>
<p>Removes the element specified by iterator <em>pos</em>. The iterator <em>pos</em> must be valid and dereferenceable. Thus the <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a></code> iterator (which is valid, but is not dereferenceable) cannot be used as a value for <em>pos</em>.</p>
<p>If called on a primitive type other than <code>null</code>, the resulting JSON value will be <code>null</code>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td>iterator to the element to remove </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator following the last removed element. If the iterator <em>pos</em> refers to the last element, the <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a></code> iterator is returned.</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">IteratorType</td><td>an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a> or <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a></td></tr>
  </table>
  </dd>
</dl>
<dl class="section post"><dt>Postcondition</dt><dd>Invalidates iterators and references at or after the point of the erase, including the <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a></code> iterator.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if called on a <code>null</code> value; example: <code>"cannot
use erase() with null"</code> </td></tr>
    <tr><td class="paramname">std::domain_error</td><td>if called on an iterator which does not belong to the current JSON value; example: <code>"iterator does not fit current value"</code> </td></tr>
    <tr><td class="paramname">std::out_of_range</td><td>if called on a primitive type with invalid iterator (i.e., any iterator which is not <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0ff28dac23f2bdecee9564d07f51dcdc" title="returns an iterator to the first element">begin()</a></code>); example: <code>"iterator
out of range"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity The complexity depends on the type:</p><ul>
<li>objects: amortized constant</li>
<li>arrays: linear in distance between <em>pos</em> and the end of the container</li>
<li>strings: linear in the length of the string</li>
<li>other types: constant</li>
</ul>
<p>@liveexample{The example shows the result of <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a068a16e76be178e83da6a192916923ed" title="remove element given an iterator">erase()</a></code> for different JSON types.,erase__IteratorType}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4b3f7eb2d4625d95a51fbbdceb7c5f39">erase(IteratorType, IteratorType)</a> &ndash; removes the elements in the given range </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2f8484d69c55d8f2a9697a7bec29362a">erase(const typename object_t::key_type&amp;)</a> &ndash; removes the element from an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9f42ee7d10eee2d5a73fd94ca7f767ca" title="explicitly create an object from an initializer list">object</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a73ae333487310e3302135189ce8ff5d8" title="access specified array element with bounds checking">at</a> the given key </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88cbcefe9a3f4d294bed0653550a5cb9">erase(const size_type)</a> &ndash; removes the element from an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4a4ec75e4d2845d9bcf7a9e5458e4949" title="explicitly create an array from an initializer list">array</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a73ae333487310e3302135189ce8ff5d8" title="access specified array element with bounds checking">at</a> the given index</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-30" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-30-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-30-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-30-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a068a16e76be178e83da6a192916923ed_cgraph.svg" width="384" height="170"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-31" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-31-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-31-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-31-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a068a16e76be178e83da6a192916923ed_icgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aeed33787bd362c7ead59a4ba945392db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeed33787bd362c7ead59a4ba945392db">&#9670;&nbsp;</a></span>find() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::find </td>
          <td>(</td>
          <td class="paramtype">typename object_t::key_type&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>find an element in a JSON object </p>
<p>Finds an element in a JSON object with key equivalent to <em>key</em>. If the element is not found or the JSON value is not an object, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a> is returned.</p>
<dl class="section note"><dt>Note</dt><dd>This method always returns <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c">end()</a> when executed on a JSON type that is not an object.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>key value of the element to search for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to an element with key equivalent to <em>key</em>. If no such element is found or the JSON value is not an object, past-the-end (see <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c">end()</a>) iterator is returned.</dd></dl>
<p>@complexity Logarithmic in the size of the JSON object.</p>
<p>@liveexample{The example shows how <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aeed33787bd362c7ead59a4ba945392db" title="find an element in a JSON object">find()</a></code> is used.,find__key_type}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-32" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-32-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-32-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-32-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_aeed33787bd362c7ead59a4ba945392db_cgraph.svg" width="384" height="104"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-33" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-33-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-33-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-33-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_aeed33787bd362c7ead59a4ba945392db_icgraph.svg" width="551" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a6d2f26a0a84787a43c989c88e2b7023b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d2f26a0a84787a43c989c88e2b7023b">&#9670;&nbsp;</a></span>find() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::find </td>
          <td>(</td>
          <td class="paramtype">typename object_t::key_type&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>find an element in a JSON object </p>
<p>find an element in a JSON object Finds an element in a JSON object with key equivalent to <em>key</em>. If the element is not found or the JSON value is not an object, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a> is returned.</p>
<dl class="section note"><dt>Note</dt><dd>This method always returns <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c">end()</a> when executed on a JSON type that is not an object.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>key value of the element to search for</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to an element with key equivalent to <em>key</em>. If no such element is found or the JSON value is not an object, past-the-end (see <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c">end()</a>) iterator is returned.</dd></dl>
<p>@complexity Logarithmic in the size of the JSON object.</p>
<p>@liveexample{The example shows how <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aeed33787bd362c7ead59a4ba945392db" title="find an element in a JSON object">find()</a></code> is used.,find__key_type}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-34" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-34-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-34-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-34-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a6d2f26a0a84787a43c989c88e2b7023b_cgraph.svg" width="355" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ab838f000d76662917ffd6ec529569e03"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab838f000d76662917ffd6ec529569e03">&#9670;&nbsp;</a></span>flatten()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::flatten </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return flattened JSON value </p>
<p>The function creates a JSON object whose keys are JSON pointers (see <a href="https://tools.ietf.org/html/rfc6901">RFC 6901</a>) and whose values are all primitive. The original JSON value can be restored using the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a74fa3ab2003f2f6f2b69deaafed9126d">unflatten()</a> function.</p>
<dl class="section return"><dt>Returns</dt><dd>an object that maps JSON pointers to primitive values</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Empty objects and arrays are flattened to <code>null</code> and will not be reconstructed correctly by the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a74fa3ab2003f2f6f2b69deaafed9126d">unflatten()</a> function.</dd></dl>
<p>@complexity Linear in the size the JSON value.</p>
<p>@liveexample{The following code shows how a JSON object is flattened to an object whose keys consist of JSON pointers.,flatten}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a74fa3ab2003f2f6f2b69deaafed9126d">unflatten()</a> for the reverse function</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.0.0 </dd></dl>

</div>
</div>
<a id="ab5e3e1758c1a52ffe89b1d379ef7fbe1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5e3e1758c1a52ffe89b1d379ef7fbe1">&#9670;&nbsp;</a></span>from_cbor()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::from_cbor </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; uint8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>start_index</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>create a JSON value from a byte vector in CBOR format </p>
<p>Deserializes a given byte vector <em>v</em> to a JSON value using the CBOR (Concise Binary Object Representation) serialization format.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">v</td><td>a byte vector in CBOR format </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">start_index</td><td>the index to start reading from <em>v</em> (0 by default) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>deserialized JSON value</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::invalid_argument</td><td>if unsupported features from CBOR were used in the given vector <em>v</em> or if the input is not valid MessagePack </td></tr>
    <tr><td class="paramname">std::out_of_range</td><td>if the given vector ends prematurely</td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Linear in the size of the byte vector <em>v</em>.</p>
<p>@liveexample{The example shows the deserialization of a byte vector in CBOR format to a JSON value.,from_cbor}</p>
<dl class="section see"><dt>See also</dt><dd><a href="http://cbor.io">http://cbor.io</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2566783e190dec524bf3445b322873b8">to_cbor(const basic_json&amp;)</a> for the analogous serialization </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a3eafe0b1fb2f2c443f1b3fea55c8a470">from_msgpack(const std::vector&lt;uint8_t&gt;&amp;, const size_t)</a> for the related MessagePack format</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.0.9, parameter <em>start_index</em> since 2.1.1 </dd></dl>

</div>
</div>
<a id="a3eafe0b1fb2f2c443f1b3fea55c8a470"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3eafe0b1fb2f2c443f1b3fea55c8a470">&#9670;&nbsp;</a></span>from_msgpack()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::from_msgpack </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; uint8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>start_index</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>create a JSON value from a byte vector in MessagePack format </p>
<p>Deserializes a given byte vector <em>v</em> to a JSON value using the MessagePack serialization format.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">v</td><td>a byte vector in MessagePack format </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">start_index</td><td>the index to start reading from <em>v</em> (0 by default) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>deserialized JSON value</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::invalid_argument</td><td>if unsupported features from MessagePack were used in the given vector <em>v</em> or if the input is not valid MessagePack </td></tr>
    <tr><td class="paramname">std::out_of_range</td><td>if the given vector ends prematurely</td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Linear in the size of the byte vector <em>v</em>.</p>
<p>@liveexample{The example shows the deserialization of a byte vector in MessagePack format to a JSON value.,from_msgpack}</p>
<dl class="section see"><dt>See also</dt><dd><a href="http://msgpack.org">http://msgpack.org</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a09ca1dc273d226afe0ca83a9d7438d9c">to_msgpack(const basic_json&amp;)</a> for the analogous serialization </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab5e3e1758c1a52ffe89b1d379ef7fbe1">from_cbor(const std::vector&lt;uint8_t&gt;&amp;, const size_t)</a> for the related CBOR format</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.0.9, parameter <em>start_index</em> since 2.1.1 </dd></dl>

</div>
</div>
<a id="a3acba9c6ceb7214e565fe08c3ba5b352"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3acba9c6ceb7214e565fe08c3ba5b352">&#9670;&nbsp;</a></span>front() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::front </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access the first element </p>
<p>Returns a reference to the first element in the container. For a JSON container <code>c</code>, the expression <code>c.front()</code> is equivalent to <code>*c.<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0ff28dac23f2bdecee9564d07f51dcdc" title="returns an iterator to the first element">begin()</a></code>.</p>
<dl class="section return"><dt>Returns</dt><dd>In case of a structured type (array or object), a reference to the first element is returned. In case of number, string, or boolean values, a reference to the value is returned.</dd></dl>
<p>@complexity Constant.</p>
<dl class="section pre"><dt>Precondition</dt><dd>The JSON value must not be <code>null</code> (would throw <code>std::out_of_range</code>) or an empty array or object (undefined behavior, <b>guarded by assertions</b>). </dd></dl>
<dl class="section post"><dt>Postcondition</dt><dd>The JSON value remains unchanged.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::out_of_range</td><td>when called on <code>null</code> value</td></tr>
  </table>
  </dd>
</dl>
<p>@liveexample{The following code shows an example for <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a3acba9c6ceb7214e565fe08c3ba5b352" title="access the first element">front()</a></code>.,front}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a011397134847f36db0ed7d7a93753677">back()</a> &ndash; access the last element</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-35" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-35-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-35-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-35-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a3acba9c6ceb7214e565fe08c3ba5b352_cgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a4b1fb3671ade9afc8d33b2c9510acbfc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b1fb3671ade9afc8d33b2c9510acbfc">&#9670;&nbsp;</a></span>front() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::front </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access the first element </p>
<p>Returns a reference to the first element in the container. For a JSON container <code>c</code>, the expression <code>c.front()</code> is equivalent to <code>*c.<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0ff28dac23f2bdecee9564d07f51dcdc" title="returns an iterator to the first element">begin()</a></code>.</p>
<dl class="section return"><dt>Returns</dt><dd>In case of a structured type (array or object), a reference to the first element is returned. In case of number, string, or boolean values, a reference to the value is returned.</dd></dl>
<p>@complexity Constant.</p>
<dl class="section pre"><dt>Precondition</dt><dd>The JSON value must not be <code>null</code> (would throw <code>std::out_of_range</code>) or an empty array or object (undefined behavior, <b>guarded by assertions</b>). </dd></dl>
<dl class="section post"><dt>Postcondition</dt><dd>The JSON value remains unchanged.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::out_of_range</td><td>when called on <code>null</code> value</td></tr>
  </table>
  </dd>
</dl>
<p>@liveexample{The following code shows an example for <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a3acba9c6ceb7214e565fe08c3ba5b352" title="access the first element">front()</a></code>.,front}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a011397134847f36db0ed7d7a93753677">back()</a> &ndash; access the last element</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-36" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-36-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-36-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-36-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a4b1fb3671ade9afc8d33b2c9510acbfc_cgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a6b187a22994c12c8cae0dd5ee99dc85e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b187a22994c12c8cae0dd5ee99dc85e">&#9670;&nbsp;</a></span>get() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename BasicJsonType , detail::enable_if_t&lt; std::is_same&lt; typename std::remove_const&lt; BasicJsonType &gt;::type, basic_json_t &gt;::value, int &gt;  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>get special-case overload </p>
<p>This overloads avoids a lot of template boilerplate, it can be seen as the identity method</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">BasicJsonType</td><td>== <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a copy of *this</dd></dl>
<p>@complexity Constant.</p>
<dl class="section since"><dt>Since</dt><dd>version 2.1.0 </dd></dl>

</div>
</div>
<a id="a44a090c15a67b9f02e579b6e17ef0e1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44a090c15a67b9f02e579b6e17ef0e1b">&#9670;&nbsp;</a></span>get() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr const PointerType <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>get a pointer value (explicit) </p>
<p>get a pointer value (explicit) Explicit pointer access to the internally stored JSON value. No copies are made.</p>
<dl class="section warning"><dt>Warning</dt><dd>The pointer becomes invalid if the underlying JSON object changes.</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">PointerType</td><td>pointer type; must be a pointer to <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae095578e03df97c5b3991787f1056374">array_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa1eb13d5aa86f80cbee6c58e90fbaf49">object_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4c919102a9b4fe0d588af64801436082">boolean_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a98e611d67b7bd75307de99c9358ab2dc">number_integer_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab906e29b5d83ac162e823ada2156b989">number_unsigned_t</a>, or <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88d6103cb3620410b35200ee8e313d97">number_float_t</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>pointer to the internally stored JSON value if the requested pointer type <em>PointerType</em> fits to the JSON value; <code>nullptr</code> otherwise</dd></dl>
<p>@complexity Constant.</p>
<p>@liveexample{The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <code>nullptr</code> is returned if the value and the requested pointer type does not match.,get__PointerType}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aefa46bd2d96bb77a38d1c8b431eab44f">get_ptr()</a> for explicit pointer-member access</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="aa6602bb24022183ab989439e19345d08"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6602bb24022183ab989439e19345d08">&#9670;&nbsp;</a></span>get() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename ValueTypeCV , typename ValueType  = detail::uncvref_t&lt;ValueTypeCV&gt;, detail::enable_if_t&lt; not std::is_same&lt; basic_json_t, ValueType &gt;::value and detail::has_from_json&lt; basic_json_t, ValueType &gt;::value and not detail::has_non_default_from_json&lt; basic_json_t, ValueType &gt;::value, int &gt;  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ValueType <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>get a value (explicit) </p>
<p>Explicit type conversion between the JSON value and a compatible value which is <a href="http://en.cppreference.com/w/cpp/concept/CopyConstructible">CopyConstructible</a> and <a href="http://en.cppreference.com/w/cpp/concept/DefaultConstructible">DefaultConstructible</a>. The value is converted by calling the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a7768841baaaa7a21098a401c932efaff">json_serializer&lt;ValueType&gt;</a> <code><a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a839b0ab50d2c9bce669068f56bc41202">from_json()</a></code> method.</p>
<p>The function is equivalent to executing </p><div class="fragment"><div class="line">ValueType ret;</div>
<div class="line"><a class="code" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a58117f225f43d03e3a0a4a6f3d77c9d9">JSONSerializer&lt;ValueType&gt;::from_json</a>(*<span class="keyword">this</span>, ret);</div>
<div class="line"><span class="keywordflow">return</span> ret;</div>
</div><!-- fragment --><p>This overloads is chosen if:</p><ul>
<li><em>ValueType</em> is not <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>,</li>
<li><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a7768841baaaa7a21098a401c932efaff">json_serializer&lt;ValueType&gt;</a> has a <code><a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a839b0ab50d2c9bce669068f56bc41202">from_json()</a></code> method of the form <code>void from_json(const @ref <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a>&amp;, ValueType&amp;)</code>, and</li>
<li><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a7768841baaaa7a21098a401c932efaff">json_serializer&lt;ValueType&gt;</a> does not have a <code><a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a839b0ab50d2c9bce669068f56bc41202">from_json()</a></code> method of the form <code>ValueType from_json(const @ref <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a>&amp;)</code></li>
</ul>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ValueTypeCV</td><td>the provided value type </td></tr>
    <tr><td class="paramname">ValueType</td><td>the returned value type</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>copy of the JSON value, converted to <em>ValueType</em> </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">what</td><td><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a7768841baaaa7a21098a401c932efaff">json_serializer&lt;ValueType&gt;</a> <code><a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a839b0ab50d2c9bce669068f56bc41202">from_json()</a></code> method throws</td></tr>
  </table>
  </dd>
</dl>
<p>@liveexample{The example below shows several conversions from JSON values to other types. There a few things to note: (1) Floating-point numbers can be converted to integers\, (2) A JSON array can be converted to a standard <code>std::vector&lt;short&gt;</code>\, (3) A JSON object can be converted to C++ associative containers such as <code>std::unordered_map&lt;std::string\, json&gt;</code>.,get__ValueType_const}</p>
<dl class="section since"><dt>Since</dt><dd>version 2.1.0 </dd></dl>
<div id="dynsection-37" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-37-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-37-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-37-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_aa6602bb24022183ab989439e19345d08_cgraph.svg" width="415" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a5afa21d477e13fa7a3dcd7ea66c48b52"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5afa21d477e13fa7a3dcd7ea66c48b52">&#9670;&nbsp;</a></span>get() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename ValueTypeCV , typename ValueType  = detail::uncvref_t&lt;ValueTypeCV&gt;, detail::enable_if_t&lt; not std::is_same&lt; basic_json_t, ValueType &gt;::value and detail::has_non_default_from_json&lt; basic_json_t, ValueType &gt;::value, int &gt;  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ValueType <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>get a value (explicit); special case </p>
<p>Explicit type conversion between the JSON value and a compatible value which is <b>not</b> <a href="http://en.cppreference.com/w/cpp/concept/CopyConstructible">CopyConstructible</a> and <b>not</b> <a href="http://en.cppreference.com/w/cpp/concept/DefaultConstructible">DefaultConstructible</a>. The value is converted by calling the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a7768841baaaa7a21098a401c932efaff">json_serializer&lt;ValueType&gt;</a> <code><a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a839b0ab50d2c9bce669068f56bc41202">from_json()</a></code> method.</p>
<p>The function is equivalent to executing </p><div class="fragment"><div class="line"><span class="keywordflow">return</span> <a class="code" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a58117f225f43d03e3a0a4a6f3d77c9d9">JSONSerializer&lt;ValueTypeCV&gt;::from_json</a>(*<span class="keyword">this</span>);</div>
</div><!-- fragment --><p>This overloads is chosen if:</p><ul>
<li><em>ValueType</em> is not <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> and</li>
<li><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a7768841baaaa7a21098a401c932efaff">json_serializer&lt;ValueType&gt;</a> has a <code><a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a839b0ab50d2c9bce669068f56bc41202">from_json()</a></code> method of the form <code>ValueType from_json(const @ref <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a>&amp;)</code></li>
</ul>
<dl class="section note"><dt>Note</dt><dd>If <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a7768841baaaa7a21098a401c932efaff">json_serializer&lt;ValueType&gt;</a> has both overloads of <code><a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a839b0ab50d2c9bce669068f56bc41202">from_json()</a></code>, this one is chosen.</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ValueTypeCV</td><td>the provided value type </td></tr>
    <tr><td class="paramname">ValueType</td><td>the returned value type</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>copy of the JSON value, converted to <em>ValueType</em> </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">what</td><td><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a7768841baaaa7a21098a401c932efaff">json_serializer&lt;ValueType&gt;</a> <code><a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a839b0ab50d2c9bce669068f56bc41202">from_json()</a></code> method throws</td></tr>
  </table>
  </dd>
</dl>
<dl class="section since"><dt>Since</dt><dd>version 2.1.0 </dd></dl>
<div id="dynsection-38" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-38-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-38-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-38-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a5afa21d477e13fa7a3dcd7ea66c48b52_cgraph.svg" width="415" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a64135c19425f00b346d8ed63a23db334"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a64135c19425f00b346d8ed63a23db334">&#9670;&nbsp;</a></span>get() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">PointerType <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>get a pointer value (explicit) </p>
<p>Explicit pointer access to the internally stored JSON value. No copies are made.</p>
<dl class="section warning"><dt>Warning</dt><dd>The pointer becomes invalid if the underlying JSON object changes.</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">PointerType</td><td>pointer type; must be a pointer to <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae095578e03df97c5b3991787f1056374">array_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa1eb13d5aa86f80cbee6c58e90fbaf49">object_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4c919102a9b4fe0d588af64801436082">boolean_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a98e611d67b7bd75307de99c9358ab2dc">number_integer_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab906e29b5d83ac162e823ada2156b989">number_unsigned_t</a>, or <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88d6103cb3620410b35200ee8e313d97">number_float_t</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>pointer to the internally stored JSON value if the requested pointer type <em>PointerType</em> fits to the JSON value; <code>nullptr</code> otherwise</dd></dl>
<p>@complexity Constant.</p>
<p>@liveexample{The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <code>nullptr</code> is returned if the value and the requested pointer type does not match.,get__PointerType}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aefa46bd2d96bb77a38d1c8b431eab44f">get_ptr()</a> for explicit pointer-member access</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="af4ac14224fbdd29d3547fcb11bb55c8f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4ac14224fbdd29d3547fcb11bb55c8f">&#9670;&nbsp;</a></span>get_allocator()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a86ce930490cf7773b26f5ef49c04a350">allocator_type</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_allocator </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>returns the allocator associated with the container </p>

</div>
</div>
<a id="a14abd48803a8d5447faf5f583fa8e2a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14abd48803a8d5447faf5f583fa8e2a1">&#9670;&nbsp;</a></span>get_ptr() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::value and std::is_const&lt; typename std::remove_pointer&lt; PointerType &gt;::type &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr const PointerType <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_ptr </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>get a pointer value (implicit) </p>
<p>get a pointer value (implicit) Implicit pointer access to the internally stored JSON value. No copies are made.</p>
<dl class="section warning"><dt>Warning</dt><dd>Writing data to the pointee of the result yields an undefined state.</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">PointerType</td><td>pointer type; must be a pointer to <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae095578e03df97c5b3991787f1056374">array_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa1eb13d5aa86f80cbee6c58e90fbaf49">object_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4c919102a9b4fe0d588af64801436082">boolean_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a98e611d67b7bd75307de99c9358ab2dc">number_integer_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab906e29b5d83ac162e823ada2156b989">number_unsigned_t</a>, or <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88d6103cb3620410b35200ee8e313d97">number_float_t</a>. Enforced by a static assertion.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>pointer to the internally stored JSON value if the requested pointer type <em>PointerType</em> fits to the JSON value; <code>nullptr</code> otherwise</dd></dl>
<p>@complexity Constant.</p>
<p>@liveexample{The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <code>nullptr</code> is returned if the value and the requested pointer type does not match.,get_ptr}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-39" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-39-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-39-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-39-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a14abd48803a8d5447faf5f583fa8e2a1_cgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aefa46bd2d96bb77a38d1c8b431eab44f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aefa46bd2d96bb77a38d1c8b431eab44f">&#9670;&nbsp;</a></span>get_ptr() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">PointerType <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_ptr </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>get a pointer value (implicit) </p>
<p>Implicit pointer access to the internally stored JSON value. No copies are made.</p>
<dl class="section warning"><dt>Warning</dt><dd>Writing data to the pointee of the result yields an undefined state.</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">PointerType</td><td>pointer type; must be a pointer to <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae095578e03df97c5b3991787f1056374">array_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa1eb13d5aa86f80cbee6c58e90fbaf49">object_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4c919102a9b4fe0d588af64801436082">boolean_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a98e611d67b7bd75307de99c9358ab2dc">number_integer_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab906e29b5d83ac162e823ada2156b989">number_unsigned_t</a>, or <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88d6103cb3620410b35200ee8e313d97">number_float_t</a>. Enforced by a static assertion.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>pointer to the internally stored JSON value if the requested pointer type <em>PointerType</em> fits to the JSON value; <code>nullptr</code> otherwise</dd></dl>
<p>@complexity Constant.</p>
<p>@liveexample{The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <code>nullptr</code> is returned if the value and the requested pointer type does not match.,get_ptr}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-40" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-40-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-40-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-40-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_aefa46bd2d96bb77a38d1c8b431eab44f_cgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="afbd800010b67619463c0fce6e74f7878"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afbd800010b67619463c0fce6e74f7878">&#9670;&nbsp;</a></span>get_ref() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename ReferenceType , typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ReferenceType <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_ref </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>get a reference value (implicit) </p>
<p>Implicit reference access to the internally stored JSON value. No copies are made.</p>
<dl class="section warning"><dt>Warning</dt><dd>Writing data to the referee of the result yields an undefined state.</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ReferenceType</td><td>reference type; must be a reference to <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae095578e03df97c5b3991787f1056374">array_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa1eb13d5aa86f80cbee6c58e90fbaf49">object_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4c919102a9b4fe0d588af64801436082">boolean_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a98e611d67b7bd75307de99c9358ab2dc">number_integer_t</a>, or <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88d6103cb3620410b35200ee8e313d97">number_float_t</a>. Enforced by static assertion.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to the internally stored JSON value if the requested reference type <em>ReferenceType</em> fits to the JSON value; throws std::domain_error otherwise</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>in case passed type <em>ReferenceType</em> is incompatible with the stored JSON value</td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Constant.</p>
<p>@liveexample{The example shows several calls to <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#afbd800010b67619463c0fce6e74f7878" title="get a reference value (implicit)">get_ref()</a></code>.,get_ref}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.1.0 </dd></dl>

</div>
</div>
<a id="ac382f3d2bc6a5d52d936e4e40593f03b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac382f3d2bc6a5d52d936e4e40593f03b">&#9670;&nbsp;</a></span>get_ref() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename ReferenceType , typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;::value and std::is_const&lt; typename std::remove_reference&lt; ReferenceType &gt;::type &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ReferenceType <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_ref </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>get a reference value (implicit) </p>
<p>get a reference value (implicit) Implicit reference access to the internally stored JSON value. No copies are made.</p>
<dl class="section warning"><dt>Warning</dt><dd>Writing data to the referee of the result yields an undefined state.</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ReferenceType</td><td>reference type; must be a reference to <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae095578e03df97c5b3991787f1056374">array_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa1eb13d5aa86f80cbee6c58e90fbaf49">object_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4c919102a9b4fe0d588af64801436082">boolean_t</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a98e611d67b7bd75307de99c9358ab2dc">number_integer_t</a>, or <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a88d6103cb3620410b35200ee8e313d97">number_float_t</a>. Enforced by static assertion.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to the internally stored JSON value if the requested reference type <em>ReferenceType</em> fits to the JSON value; throws std::domain_error otherwise</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>in case passed type <em>ReferenceType</em> is incompatible with the stored JSON value</td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Constant.</p>
<p>@liveexample{The example shows several calls to <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#afbd800010b67619463c0fce6e74f7878" title="get a reference value (implicit)">get_ref()</a></code>.,get_ref}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.1.0 </dd></dl>

</div>
</div>
<a id="a1ecce113ff11dd294689ee4d45cbb855"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ecce113ff11dd294689ee4d45cbb855">&#9670;&nbsp;</a></span>insert() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a>&#160;</td>
          <td class="paramname"><em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>val</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>inserts element </p>
<p>inserts element Inserts element <em>val</em> before iterator <em>pos</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td>iterator before which the content will be inserted; may be the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a> iterator </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>element to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>iterator pointing to the inserted <em>val</em>.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if called on JSON values other than arrays; example: <code>"cannot use insert() with string"</code> </td></tr>
    <tr><td class="paramname">std::domain_error</td><td>if <em>pos</em> is not an iterator of *this; example: <code>"iterator does not fit current value"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Constant plus linear in the distance between <em>pos</em> and end of the container.</p>
<p>@liveexample{The example shows how <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0136728f5db69d4051c77b94307abd6c" title="inserts element">insert()</a></code> is used.,insert}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-41" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-41-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-41-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-41-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a1ecce113ff11dd294689ee4d45cbb855_cgraph.svg" width="551" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a0136728f5db69d4051c77b94307abd6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0136728f5db69d4051c77b94307abd6c">&#9670;&nbsp;</a></span>insert() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a>&#160;</td>
          <td class="paramname"><em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &amp;&#160;</td>
          <td class="paramname"><em>val</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>inserts element </p>
<p>Inserts element <em>val</em> before iterator <em>pos</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td>iterator before which the content will be inserted; may be the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a> iterator </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>element to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>iterator pointing to the inserted <em>val</em>.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if called on JSON values other than arrays; example: <code>"cannot use insert() with string"</code> </td></tr>
    <tr><td class="paramname">std::domain_error</td><td>if <em>pos</em> is not an iterator of *this; example: <code>"iterator does not fit current value"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Constant plus linear in the distance between <em>pos</em> and end of the container.</p>
<p>@liveexample{The example shows how <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0136728f5db69d4051c77b94307abd6c" title="inserts element">insert()</a></code> is used.,insert}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-42" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-42-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-42-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-42-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a0136728f5db69d4051c77b94307abd6c_cgraph.svg" width="355" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-43" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-43-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-43-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-43-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a0136728f5db69d4051c77b94307abd6c_icgraph.svg" width="355" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a404cfe1bdbf1dc6b229627fcf2afb95f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a404cfe1bdbf1dc6b229627fcf2afb95f">&#9670;&nbsp;</a></span>insert() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a>&#160;</td>
          <td class="paramname"><em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a>&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a>&#160;</td>
          <td class="paramname"><em>last</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>inserts elements </p>
<p>Inserts elements from range <code>[first, last)</code> before iterator <em>pos</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td>iterator before which the content will be inserted; may be the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a> iterator </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">first</td><td>begin of the range of elements to insert </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">last</td><td>end of the range of elements to insert</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if called on JSON values other than arrays; example: <code>"cannot use insert() with string"</code> </td></tr>
    <tr><td class="paramname">std::domain_error</td><td>if <em>pos</em> is not an iterator of *this; example: <code>"iterator does not fit current value"</code> </td></tr>
    <tr><td class="paramname">std::domain_error</td><td>if <em>first</em> and <em>last</em> do not belong to the same JSON value; example: <code>"iterators do not fit"</code> </td></tr>
    <tr><td class="paramname">std::domain_error</td><td>if <em>first</em> or <em>last</em> are iterators into container for which insert is called; example: <code>"passed iterators may not
belong to container"</code></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>iterator pointing to the first element inserted, or <em>pos</em> if <code>first==last</code></dd></dl>
<p>@complexity Linear in <code>std::distance(first, last)</code> plus linear in the distance between <em>pos</em> and end of the container.</p>
<p>@liveexample{The example shows how <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0136728f5db69d4051c77b94307abd6c" title="inserts element">insert()</a></code> is used.,insert__range}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-44" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-44-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-44-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-44-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a404cfe1bdbf1dc6b229627fcf2afb95f_cgraph.svg" width="355" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a30a7cc24f2931c20ecae37ec4a5e901f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30a7cc24f2931c20ecae37ec4a5e901f">&#9670;&nbsp;</a></span>insert() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a>&#160;</td>
          <td class="paramname"><em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a>&#160;</td>
          <td class="paramname"><em>cnt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &amp;&#160;</td>
          <td class="paramname"><em>val</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>inserts elements </p>
<p>Inserts <em>cnt</em> copies of <em>val</em> before iterator <em>pos</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td>iterator before which the content will be inserted; may be the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a> iterator </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cnt</td><td>number of copies of <em>val</em> to insert </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>element to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>iterator pointing to the first element inserted, or <em>pos</em> if <code>cnt==0</code></dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if called on JSON values other than arrays; example: <code>"cannot use insert() with string"</code> </td></tr>
    <tr><td class="paramname">std::domain_error</td><td>if <em>pos</em> is not an iterator of *this; example: <code>"iterator does not fit current value"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Linear in <em>cnt</em> plus linear in the distance between <em>pos</em> and end of the container.</p>
<p>@liveexample{The example shows how <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0136728f5db69d4051c77b94307abd6c" title="inserts element">insert()</a></code> is used.,insert__count}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-45" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-45-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-45-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-45-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a30a7cc24f2931c20ecae37ec4a5e901f_cgraph.svg" width="355" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ad154c4228e4867c67b25a6601ced89bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad154c4228e4867c67b25a6601ced89bd">&#9670;&nbsp;</a></span>insert() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a>&#160;</td>
          <td class="paramname"><em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::initializer_list&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &gt;&#160;</td>
          <td class="paramname"><em>ilist</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>inserts elements </p>
<p>Inserts elements from initializer list <em>ilist</em> before iterator <em>pos</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td>iterator before which the content will be inserted; may be the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a> iterator </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ilist</td><td>initializer list to insert the values from</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if called on JSON values other than arrays; example: <code>"cannot use insert() with string"</code> </td></tr>
    <tr><td class="paramname">std::domain_error</td><td>if <em>pos</em> is not an iterator of *this; example: <code>"iterator does not fit current value"</code></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>iterator pointing to the first element inserted, or <em>pos</em> if <code>ilist</code> is empty</dd></dl>
<p>@complexity Linear in <code>ilist.size()</code> plus linear in the distance between <em>pos</em> and end of the container.</p>
<p>@liveexample{The example shows how <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0136728f5db69d4051c77b94307abd6c" title="inserts element">insert()</a></code> is used.,insert__ilist}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-46" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-46-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-46-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-46-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_ad154c4228e4867c67b25a6601ced89bd_cgraph.svg" width="355" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aef9ce5dd2381caee1f8ddcdb5bdd9c65"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef9ce5dd2381caee1f8ddcdb5bdd9c65">&#9670;&nbsp;</a></span>is_array()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_array </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return whether value is an array </p>
<p>This function returns true iff the JSON value is an array.</p>
<dl class="section return"><dt>Returns</dt><dd><code>true</code> if type is array, <code>false</code> otherwise.</dd></dl>
<p>@complexity Constant.</p>
<p>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</p>
<p>@liveexample{The following code exemplifies <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aef9ce5dd2381caee1f8ddcdb5bdd9c65" title="return whether value is an array">is_array()</a></code> for all JSON types.,is_array}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-47" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-47-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-47-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-47-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_aef9ce5dd2381caee1f8ddcdb5bdd9c65_icgraph.svg" width="570" height="547"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a943e8cb182d0f2365c76d64b42eaa6fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a943e8cb182d0f2365c76d64b42eaa6fd">&#9670;&nbsp;</a></span>is_boolean()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_boolean </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return whether value is a boolean </p>
<p>This function returns true iff the JSON value is a boolean.</p>
<dl class="section return"><dt>Returns</dt><dd><code>true</code> if type is boolean, <code>false</code> otherwise.</dd></dl>
<p>@complexity Constant.</p>
<p>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</p>
<p>@liveexample{The following code exemplifies <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a943e8cb182d0f2365c76d64b42eaa6fd" title="return whether value is a boolean">is_boolean()</a></code> for all JSON types.,is_boolean}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-48" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-48-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-48-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-48-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a943e8cb182d0f2365c76d64b42eaa6fd_icgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aabe623bc8304c2ba92d96d91f390fab4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aabe623bc8304c2ba92d96d91f390fab4">&#9670;&nbsp;</a></span>is_discarded()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_discarded </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return whether value is discarded </p>
<p>This function returns true iff the JSON value was discarded during parsing with a callback function (see <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a>).</p>
<dl class="section note"><dt>Note</dt><dd>This function will always be <code>false</code> for JSON values after parsing. That is, discarded values can only occur during parsing, but will be removed when inside a structured value or replaced by null in other cases.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd><code>true</code> if type is discarded, <code>false</code> otherwise.</dd></dl>
<p>@complexity Constant.</p>
<p>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</p>
<p>@liveexample{The following code exemplifies <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aabe623bc8304c2ba92d96d91f390fab4" title="return whether value is discarded">is_discarded()</a></code> for all JSON types.,is_discarded}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="a8faa039ca82427ed29c486ffd00600c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8faa039ca82427ed29c486ffd00600c3">&#9670;&nbsp;</a></span>is_null()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_null </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return whether value is null </p>
<p>This function returns true iff the JSON value is null.</p>
<dl class="section return"><dt>Returns</dt><dd><code>true</code> if type is null, <code>false</code> otherwise.</dd></dl>
<p>@complexity Constant.</p>
<p>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</p>
<p>@liveexample{The following code exemplifies <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8faa039ca82427ed29c486ffd00600c3" title="return whether value is null">is_null()</a></code> for all JSON types.,is_null}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-49" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-49-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-49-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-49-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a8faa039ca82427ed29c486ffd00600c3_icgraph.svg" width="551" height="476"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a2b9852390abb4b1ef5fac6984e2fc0f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b9852390abb4b1ef5fac6984e2fc0f3">&#9670;&nbsp;</a></span>is_number()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_number </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return whether value is a number </p>
<p>This function returns true iff the JSON value is a number. This includes both integer and floating-point values.</p>
<dl class="section return"><dt>Returns</dt><dd><code>true</code> if type is number (regardless whether integer, unsigned integer or floating-type), <code>false</code> otherwise.</dd></dl>
<p>@complexity Constant.</p>
<p>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</p>
<p>@liveexample{The following code exemplifies <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b9852390abb4b1ef5fac6984e2fc0f3" title="return whether value is a number">is_number()</a></code> for all JSON types.,is_number}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abac8af76067f1e8fdca9052882c74428">is_number_integer()</a> &ndash; check if <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is an integer or unsigned integer number </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abc7378cba0613a78b9aad1c8e7044bb0">is_number_unsigned()</a> &ndash; check if <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is an unsigned integer number </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a33b4bf898b857c962e798fc7f6e86e70">is_number_float()</a> &ndash; check if <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is a floating-point number</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-50" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-50-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-50-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-50-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a2b9852390abb4b1ef5fac6984e2fc0f3_cgraph.svg" width="355" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-51" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-51-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-51-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-51-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a2b9852390abb4b1ef5fac6984e2fc0f3_icgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a33b4bf898b857c962e798fc7f6e86e70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33b4bf898b857c962e798fc7f6e86e70">&#9670;&nbsp;</a></span>is_number_float()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_number_float </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return whether value is a floating-point number </p>
<p>This function returns true iff the JSON value is a floating-point number. This excludes integer and unsigned integer values.</p>
<dl class="section return"><dt>Returns</dt><dd><code>true</code> if type is a floating-point number, <code>false</code> otherwise.</dd></dl>
<p>@complexity Constant.</p>
<p>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</p>
<p>@liveexample{The following code exemplifies <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a33b4bf898b857c962e798fc7f6e86e70" title="return whether value is a floating-point number">is_number_float()</a></code> for all JSON types.,is_number_float}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b9852390abb4b1ef5fac6984e2fc0f3">is_number()</a> &ndash; check if <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is number </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abac8af76067f1e8fdca9052882c74428">is_number_integer()</a> &ndash; check if <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is an integer number </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abc7378cba0613a78b9aad1c8e7044bb0">is_number_unsigned()</a> &ndash; check if <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is an unsigned integer number</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-52" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-52-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-52-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-52-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a33b4bf898b857c962e798fc7f6e86e70_icgraph.svg" width="551" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="abac8af76067f1e8fdca9052882c74428"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abac8af76067f1e8fdca9052882c74428">&#9670;&nbsp;</a></span>is_number_integer()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_number_integer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return whether value is an integer number </p>
<p>This function returns true iff the JSON value is an integer or unsigned integer number. This excludes floating-point values.</p>
<dl class="section return"><dt>Returns</dt><dd><code>true</code> if type is an integer or unsigned integer number, <code>false</code> otherwise.</dd></dl>
<p>@complexity Constant.</p>
<p>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</p>
<p>@liveexample{The following code exemplifies <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abac8af76067f1e8fdca9052882c74428" title="return whether value is an integer number">is_number_integer()</a></code> for all JSON types.,is_number_integer}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b9852390abb4b1ef5fac6984e2fc0f3">is_number()</a> &ndash; check if <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is a number </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abc7378cba0613a78b9aad1c8e7044bb0">is_number_unsigned()</a> &ndash; check if <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is an unsigned integer number </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a33b4bf898b857c962e798fc7f6e86e70">is_number_float()</a> &ndash; check if <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is a floating-point number</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-53" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-53-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-53-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-53-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_abac8af76067f1e8fdca9052882c74428_icgraph.svg" width="551" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="abc7378cba0613a78b9aad1c8e7044bb0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc7378cba0613a78b9aad1c8e7044bb0">&#9670;&nbsp;</a></span>is_number_unsigned()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_number_unsigned </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return whether value is an unsigned integer number </p>
<p>This function returns true iff the JSON value is an unsigned integer number. This excludes floating-point and (signed) integer values.</p>
<dl class="section return"><dt>Returns</dt><dd><code>true</code> if type is an unsigned integer number, <code>false</code> otherwise.</dd></dl>
<p>@complexity Constant.</p>
<p>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</p>
<p>@liveexample{The following code exemplifies <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abc7378cba0613a78b9aad1c8e7044bb0" title="return whether value is an unsigned integer number">is_number_unsigned()</a></code> for all JSON types.,is_number_unsigned}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b9852390abb4b1ef5fac6984e2fc0f3">is_number()</a> &ndash; check if <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is a number </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#abac8af76067f1e8fdca9052882c74428">is_number_integer()</a> &ndash; check if <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is an integer or unsigned integer number </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a33b4bf898b857c962e798fc7f6e86e70">is_number_float()</a> &ndash; check if <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is a floating-point number</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.0.0 </dd></dl>

</div>
</div>
<a id="af8f511af124e82e4579f444b4175787c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8f511af124e82e4579f444b4175787c">&#9670;&nbsp;</a></span>is_object()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_object </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return whether value is an object </p>
<p>This function returns true iff the JSON value is an object.</p>
<dl class="section return"><dt>Returns</dt><dd><code>true</code> if type is object, <code>false</code> otherwise.</dd></dl>
<p>@complexity Constant.</p>
<p>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</p>
<p>@liveexample{The following code exemplifies <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af8f511af124e82e4579f444b4175787c" title="return whether value is an object">is_object()</a></code> for all JSON types.,is_object}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-54" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-54-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-54-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-54-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_af8f511af124e82e4579f444b4175787c_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a6362b88718eb5c6d4fed6a61eed44b95"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6362b88718eb5c6d4fed6a61eed44b95">&#9670;&nbsp;</a></span>is_primitive()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_primitive </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return whether type is primitive </p>
<p>This function returns true iff the JSON type is primitive (string, number, boolean, or null).</p>
<dl class="section return"><dt>Returns</dt><dd><code>true</code> if type is primitive (string, number, boolean, or null), <code>false</code> otherwise.</dd></dl>
<p>@complexity Constant.</p>
<p>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</p>
<p>@liveexample{The following code exemplifies <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a6362b88718eb5c6d4fed6a61eed44b95" title="return whether type is primitive">is_primitive()</a></code> for all JSON types.,is_primitive}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9f68a0af820c3ced7f9d17851ce4c22d">is_structured()</a> &ndash; returns whether JSON <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is structured </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8faa039ca82427ed29c486ffd00600c3">is_null()</a> &ndash; returns whether JSON <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is <code>null</code> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a69b596a4a6683b362095c9a139637396">is_string()</a> &ndash; returns whether JSON <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is a string </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a943e8cb182d0f2365c76d64b42eaa6fd">is_boolean()</a> &ndash; returns whether JSON <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is a boolean </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b9852390abb4b1ef5fac6984e2fc0f3">is_number()</a> &ndash; returns whether JSON <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is a number</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-55" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-55-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-55-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-55-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a6362b88718eb5c6d4fed6a61eed44b95_cgraph.svg" width="551" height="248"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a69b596a4a6683b362095c9a139637396"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69b596a4a6683b362095c9a139637396">&#9670;&nbsp;</a></span>is_string()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_string </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return whether value is a string </p>
<p>This function returns true iff the JSON value is a string.</p>
<dl class="section return"><dt>Returns</dt><dd><code>true</code> if type is string, <code>false</code> otherwise.</dd></dl>
<p>@complexity Constant.</p>
<p>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</p>
<p>@liveexample{The following code exemplifies <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a69b596a4a6683b362095c9a139637396" title="return whether value is a string">is_string()</a></code> for all JSON types.,is_string}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-56" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-56-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-56-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-56-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a69b596a4a6683b362095c9a139637396_icgraph.svg" width="551" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a9f68a0af820c3ced7f9d17851ce4c22d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f68a0af820c3ced7f9d17851ce4c22d">&#9670;&nbsp;</a></span>is_structured()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_structured </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return whether type is structured </p>
<p>This function returns true iff the JSON type is structured (array or object).</p>
<dl class="section return"><dt>Returns</dt><dd><code>true</code> if type is structured (array or object), <code>false</code> otherwise.</dd></dl>
<p>@complexity Constant.</p>
<p>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</p>
<p>@liveexample{The following code exemplifies <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9f68a0af820c3ced7f9d17851ce4c22d" title="return whether type is structured">is_structured()</a></code> for all JSON types.,is_structured}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a6362b88718eb5c6d4fed6a61eed44b95">is_primitive()</a> &ndash; returns whether <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is primitive </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aef9ce5dd2381caee1f8ddcdb5bdd9c65">is_array()</a> &ndash; returns whether <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4a4ec75e4d2845d9bcf7a9e5458e4949" title="explicitly create an array from an initializer list">array</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af8f511af124e82e4579f444b4175787c">is_object()</a> &ndash; returns whether <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> is an <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a9f42ee7d10eee2d5a73fd94ca7f767ca" title="explicitly create an object from an initializer list">object</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-57" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-57-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-57-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-57-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a9f68a0af820c3ced7f9d17851ce4c22d_cgraph.svg" width="355" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="adb4db7abbc5ba12c9273f032a7b89198"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb4db7abbc5ba12c9273f032a7b89198">&#9670;&nbsp;</a></span>iterator_wrapper() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static iteration_proxy&lt;<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a41a70cf9993951836d129bb1c2b3126a">const_iterator</a>&gt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::iterator_wrapper </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td>
          <td class="paramname"><em>cont</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>wrapper to access iterator member functions in range-based for </p>
<p>This function allows to access <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a030a45b63b70e12b18ad4f6c1c4f1239">iterator::key()</a> and <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a92e849ca687355935c02f492be936b68">iterator::value()</a> during range-based for loops. In these loops, a reference to the JSON values is returned, so there is no access to the underlying iterator.</p>
<dl class="section note"><dt>Note</dt><dd>The name of this function is not yet final and may change in the future. </dd></dl>

</div>
</div>
<a id="aea8c06bb8e632f14cd77632519213d75"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea8c06bb8e632f14cd77632519213d75">&#9670;&nbsp;</a></span>iterator_wrapper() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static iteration_proxy&lt;<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca">iterator</a>&gt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::iterator_wrapper </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a>&#160;</td>
          <td class="paramname"><em>cont</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>wrapper to access iterator member functions in range-based for </p>
<p>This function allows to access <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a030a45b63b70e12b18ad4f6c1c4f1239">iterator::key()</a> and <a class="el" href="../../de/d32/classnlohmann_1_1basic__json_1_1iter__impl.xhtml#a92e849ca687355935c02f492be936b68">iterator::value()</a> during range-based for loops. In these loops, a reference to the JSON values is returned, so there is no access to the underlying iterator.</p>
<dl class="section note"><dt>Note</dt><dd>The name of this function is not yet final and may change in the future. </dd></dl>

</div>
</div>
<a id="a2f47d3c6a441c57dd2be00449fbb88e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f47d3c6a441c57dd2be00449fbb88e1">&#9670;&nbsp;</a></span>max_size()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::max_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>returns the maximum possible number of elements </p>
<p>Returns the maximum number of elements a JSON value is able to hold due to system or library implementation limitations, i.e. <code>std::distance(<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0ff28dac23f2bdecee9564d07f51dcdc" title="returns an iterator to the first element">begin()</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a>)</code> for the JSON value.</p>
<dl class="section return"><dt>Returns</dt><dd>The return value depends on the different types and is defined as follows: <table class="markdownTable">
<tr class="markdownTableHead">
<th class="markdownTableHeadNone">Value type  </th><th class="markdownTableHeadNone">return value   </th></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">null  </td><td class="markdownTableBodyNone"><code>0</code> (same as <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a25e27ad0c6d53c01871c5485e1f75b96" title="returns the number of elements">size()</a></code>)   </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">boolean  </td><td class="markdownTableBodyNone"><code>1</code> (same as <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a25e27ad0c6d53c01871c5485e1f75b96" title="returns the number of elements">size()</a></code>)   </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">string  </td><td class="markdownTableBodyNone"><code>1</code> (same as <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a25e27ad0c6d53c01871c5485e1f75b96" title="returns the number of elements">size()</a></code>)   </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">number  </td><td class="markdownTableBodyNone"><code>1</code> (same as <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a25e27ad0c6d53c01871c5485e1f75b96" title="returns the number of elements">size()</a></code>)   </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">object  </td><td class="markdownTableBodyNone">result of function <code>object_t::max_size()</code>   </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">array  </td><td class="markdownTableBodyNone">result of function <code>array_t::max_size()</code>   </td></tr>
</table>
</dd></dl>
<p>@complexity Constant, as long as <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae095578e03df97c5b3991787f1056374">array_t</a> and <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa1eb13d5aa86f80cbee6c58e90fbaf49">object_t</a> satisfy the Container concept; that is, their <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2f47d3c6a441c57dd2be00449fbb88e1" title="returns the maximum possible number of elements">max_size()</a></code> functions have constant complexity.</p>
<p>@requirement This function helps <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a></code> satisfying the <a href="http://en.cppreference.com/w/cpp/concept/Container">Container</a> requirements:</p><ul>
<li>The complexity is constant.</li>
<li>Has the semantics of returning <code>b.size()</code> where <code>b</code> is the largest possible JSON value.</li>
</ul>
<p>@liveexample{The following code calls <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2f47d3c6a441c57dd2be00449fbb88e1" title="returns the maximum possible number of elements">max_size()</a></code> on the different value types. Note the output is implementation specific.,max_size}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a25e27ad0c6d53c01871c5485e1f75b96">size()</a> &ndash; returns the number of elements</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-58" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-58-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-58-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-58-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a2f47d3c6a441c57dd2be00449fbb88e1_cgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aef6d0eeccee7c5c7e1317c2ea1607fab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef6d0eeccee7c5c7e1317c2ea1607fab">&#9670;&nbsp;</a></span>meta()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::meta </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>returns version information on the library </p>
<p>This function returns a JSON object with information about the library, including the version number and information on the platform and compiler.</p>
<dl class="section return"><dt>Returns</dt><dd>JSON object holding version information <table class="markdownTable">
<tr class="markdownTableHead">
<th class="markdownTableHeadNone">key  </th><th class="markdownTableHeadNone">description   </th></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone"><code>compiler</code>  </td><td class="markdownTableBodyNone">Information on the used compiler. It is an object with the   </td></tr>
</table>
following keys: <code>c++</code> (the used C++ standard), <code>family</code> (the compiler family; possible values are <code>clang</code>, <code>icc</code>, <code>gcc</code>, <code>ilecpp</code>, <code>msvc</code>, <code>pgcpp</code>, <code>sunpro</code>, and <code>unknown</code>), and <code>version</code> (the compiler version). <code>copyright</code> | The copyright line for the library as string. <code>name</code> | The name of the library as string. <code>platform</code> | The used platform as string. Possible values are <code>win32</code>, <code>linux</code>, <code>apple</code>, <code>unix</code>, and <code>unknown</code>. <code>url</code> | The URL of the project as string. <code>version</code> | The version of the library. It is an object with the following keys: <code>major</code>, <code>minor</code>, and <code>patch</code> as defined by <a href="http://semver.org">Semantic Versioning</a>, and <code>string</code> (the version string).</dd></dl>
<p>@liveexample{The following code shows an example output of the <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aef6d0eeccee7c5c7e1317c2ea1607fab" title="returns version information on the library">meta()</a></code> function.,meta}</p>
<p>@complexity Constant.</p>
<dl class="section since"><dt>Since</dt><dd>2.1.0 </dd></dl>
<div id="dynsection-59" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-59-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-59-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-59-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_aef6d0eeccee7c5c7e1317c2ea1607fab_cgraph.svg" width="362" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a9f42ee7d10eee2d5a73fd94ca7f767ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f42ee7d10eee2d5a73fd94ca7f767ca">&#9670;&nbsp;</a></span>object()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::object </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &gt;&#160;</td>
          <td class="paramname"><em>init</em> = <code>std::initializer_list&lt;<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt;&#160;ObjectType,&#160;ArrayType,&#160;StringType,&#160;BooleanType,&#160;NumberIntegerType,&#160;NumberUnsignedType,&#160;NumberFloatType,&#160;AllocatorType,&#160;JSONSerializer&#160;&gt;&gt;()</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>explicitly create an object from an initializer list </p>
<p>Creates a JSON object value from a given initializer list. The initializer lists elements must be pairs, and their first elements must be strings. If the initializer list is empty, the empty object <code>{}</code> is created.</p>
<dl class="section note"><dt>Note</dt><dd>This function is only added for symmetry reasons. In contrast to the related function <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4a4ec75e4d2845d9bcf7a9e5458e4949">array(std::initializer_list&lt;basic_json&gt;)</a>, there are no cases which can only be expressed by this function. That is, any initializer list <em>init</em> can also be passed to the initializer list constructor <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>(std::initializer_list&lt;basic_json&gt;, bool, value_t).</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">init</td><td>initializer list to create an object from (optional)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>JSON object value</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if <em>init</em> is not a pair whose first elements are strings; thrown by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#afbad48316e7cd37366ba3ac5d7e5859e">basic_json(std::initializer_list&lt;basic_json&gt;, bool, value_t)</a></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Linear in the size of <em>init</em>.</p>
<p>@liveexample{The following code shows an example for the <code>object</code> function.,object}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#afbad48316e7cd37366ba3ac5d7e5859e">basic_json(std::initializer_list&lt;basic_json&gt;, bool, value_t)</a> &ndash; create a JSON <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> from an initializer list </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4a4ec75e4d2845d9bcf7a9e5458e4949">array(std::initializer_list&lt;basic_json&gt;)</a> &ndash; create a JSON <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4a4ec75e4d2845d9bcf7a9e5458e4949" title="explicitly create an array from an initializer list">array</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> from an initializer list</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-60" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-60-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-60-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-60-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a9f42ee7d10eee2d5a73fd94ca7f767ca_cgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-61" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-61-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-61-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-61-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a9f42ee7d10eee2d5a73fd94ca7f767ca_icgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a26ef3058e249f82a04f8ec18f7419027"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26ef3058e249f82a04f8ec18f7419027">&#9670;&nbsp;</a></span>operator value_t()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator <a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980f">value_t</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return the type of the JSON value (implicit) </p>
<p>Implicitly return the type of the JSON value as a value from the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae8cbef097f7da18a781fc86587de6b90">value_t</a> enumeration.</p>
<dl class="section return"><dt>Returns</dt><dd>the type of the JSON value</dd></dl>
<p>@complexity Constant.</p>
<p>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</p>
<p>@liveexample{The following code exemplifies the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae8cbef097f7da18a781fc86587de6b90">value_t</a> operator for all JSON types.,operator__value_t}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="a1f1d4bc973c5b866db3d96e14d2c9f3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f1d4bc973c5b866db3d96e14d2c9f3f">&#9670;&nbsp;</a></span>operator ValueType()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename ValueType , typename std::enable_if&lt; not std::is_pointer&lt; ValueType &gt;::value and not std::is_same&lt; ValueType, typename string_t::value_type &gt;::value and not std::is_same&lt; ValueType, std::initializer_list&lt; typename string_t::value_type &gt;&gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator ValueType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>get a value (implicit) </p>
<p>Implicit type conversion between the JSON value and a compatible value. The call is realized by calling <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a6b187a22994c12c8cae0dd5ee99dc85e">get() const</a>.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ValueType</td><td>non-pointer type compatible to the JSON value, for instance <code>int</code> for JSON integer numbers, <code>bool</code> for JSON booleans, or <code>std::vector</code> types for JSON arrays. The character type of <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a> as well as an initializer list of this type is excluded to avoid ambiguities as these types implicitly convert to <code>std::string</code>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>copy of the JSON value, converted to type <em>ValueType</em> </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>in case passed type <em>ValueType</em> is incompatible to JSON, thrown by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a6b187a22994c12c8cae0dd5ee99dc85e">get() const</a></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Linear in the size of the JSON value.</p>
<p>@liveexample{The example below shows several conversions from JSON values to other types. There a few things to note: (1) Floating-point numbers can be converted to integers\, (2) A JSON array can be converted to a standard <code>std::vector&lt;short&gt;</code>\, (3) A JSON object can be converted to C++ associative containers such as <code>std::unordered_map&lt;std::string\, json&gt;</code>.,operator__ValueType}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="aea1085f2d35cc0e1ce119cf0110119e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea1085f2d35cc0e1ce119cf0110119e6">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator+= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>add an object to an array </p>
<p>add an object to an array Appends the given element <em>val</em> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending <em>val</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>the value to add to the JSON array</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>when called on a type other than JSON array or null; example: <code>"cannot use push_back() with number"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Amortized constant.</p>
<p>@liveexample{The example shows how <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac8e523ddc8c2dd7e5d2daf0d49a9c0d7" title="add an object to an array">push_back()</a></code> and <code>+=</code> can be used to add elements to a JSON array. Note how the <code>null</code> value was silently converted to a JSON array.,push_back}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-62" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-62-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-62-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-62-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_aea1085f2d35cc0e1ce119cf0110119e6_cgraph.svg" width="551" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="adc29dd6358ff7a9062d7e168c24e7484"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc29dd6358ff7a9062d7e168c24e7484">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>add an object to an array </p>
<p>add an object to an array Appends the given element <em>val</em> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending <em>val</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>the value to add to the JSON array</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>when called on a type other than JSON array or null; example: <code>"cannot use push_back() with number"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Amortized constant.</p>
<p>@liveexample{The example shows how <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac8e523ddc8c2dd7e5d2daf0d49a9c0d7" title="add an object to an array">push_back()</a></code> and <code>+=</code> can be used to add elements to a JSON array. Note how the <code>null</code> value was silently converted to a JSON array.,push_back}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-63" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-63-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-63-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-63-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_adc29dd6358ff7a9062d7e168c24e7484_cgraph.svg" width="551" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="abf04978d85a2d5c4754f4806d42f46fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf04978d85a2d5c4754f4806d42f46fd">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator+= </td>
          <td>(</td>
          <td class="paramtype">const typename object_t::value_type &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>add an object to an object </p>
<p>add an object to an object Inserts the given element <em>val</em> to the JSON object. If the function is called on a JSON null value, an empty object is created before inserting <em>val</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>the value to add to the JSON object</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>when called on a type other than JSON object or null; example: <code>"cannot use push_back() with number"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Logarithmic in the size of the container, O(log(<code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a25e27ad0c6d53c01871c5485e1f75b96" title="returns the number of elements">size()</a></code>)).</p>
<p>@liveexample{The example shows how <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac8e523ddc8c2dd7e5d2daf0d49a9c0d7" title="add an object to an array">push_back()</a></code> and <code>+=</code> can be used to add elements to a JSON object. Note how the <code>null</code> value was silently converted to a JSON object.,push_back__object_t__value}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-64" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-64-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-64-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-64-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_abf04978d85a2d5c4754f4806d42f46fd_cgraph.svg" width="551" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a0cf23e7d44e78bb9014484971af2f40f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0cf23e7d44e78bb9014484971af2f40f">&#9670;&nbsp;</a></span>operator+=() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator+= </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &gt;&#160;</td>
          <td class="paramname"><em>init</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>add an object to an object </p>
<p>add an object to an object This function allows to use <code>push_back</code> with an initializer list. In case</p>
<ol type="1">
<li>the current value is an object,</li>
<li>the initializer list <em>init</em> contains only two elements, and</li>
<li>the first element of <em>init</em> is a string,</li>
</ol>
<p><em>init</em> is converted into an object element and added using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae11a3a51782c058fff2f6550cdfb9b3c">push_back(const typename object_t::value_type&amp;)</a>. Otherwise, <em>init</em> is converted to a JSON value and added using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac8e523ddc8c2dd7e5d2daf0d49a9c0d7">push_back(basic_json&amp;&amp;)</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">init</td><td>an initializer list</td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Linear in the size of the initializer list <em>init</em>.</p>
<dl class="section note"><dt>Note</dt><dd>This function is required to resolve an ambiguous overload error, because pairs like <code>{"key", "value"}</code> can be both interpreted as <code>object_t::value_type</code> or <code>std::initializer_list&lt;<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a>&gt;</code>, see <a href="https://github.com/nlohmann/json/issues/235">https://github.com/nlohmann/json/issues/235</a> for more information.</dd></dl>
<p>@liveexample{The example shows how initializer lists are treated as objects when possible.,push_back__initializer_list} </p>
<div id="dynsection-65" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-65-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-65-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-65-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a0cf23e7d44e78bb9014484971af2f40f_cgraph.svg" width="551" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aab256df8c5594ec693035822fa1e2904"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab256df8c5594ec693035822fa1e2904">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a>&amp; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>copy assignment </p>
<p>Copy assignment operator. Copies a JSON value via the "copy and swap" strategy: It is expressed in terms of the copy constructor, destructor, and the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8c9d932353e1ab98a7dc2fc27e002031" title="exchanges the values">swap()</a> member function.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">other</td><td>value to copy from</td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Linear.</p>
<p>@requirement This function helps <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a></code> satisfying the <a href="http://en.cppreference.com/w/cpp/concept/Container">Container</a> requirements:</p><ul>
<li>The complexity is linear.</li>
</ul>
<p>@liveexample{The code below shows and example for the copy assignment. It creates a copy of value <code>a</code> which is then swapped with <code>b</code>. Finally\, the copy of <code>a</code> (which is the null value after the swap) is destroyed.,basic_json__copyassignment}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-66" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-66-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-66-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-66-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_aab256df8c5594ec693035822fa1e2904_cgraph.svg" width="482" height="82"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ac6946dffeb3be5aa173645f0467a44b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6946dffeb3be5aa173645f0467a44b3">&#9670;&nbsp;</a></span>operator[]() <span class="overload">[1/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/d60/classnlohmann_1_1basic__json_1_1json__pointer.xhtml">json_pointer</a> &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access specified element via JSON Pointer </p>
<p>Uses a JSON pointer to retrieve a reference to the respective JSON value. No bound checking is performed. Similar to <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac871e3b03fb2eeca9a8de4db2bea760f">operator[]</a>(const typename object_t::key_type&amp;), <code>null</code> values are created in arrays and objects if necessary.</p>
<p>In particular:</p><ul>
<li>If the JSON pointer points to an object key that does not exist, it is created an filled with a <code>null</code> value before a reference to it is returned.</li>
<li>If the JSON pointer points to an array index that does not exist, it is created an filled with a <code>null</code> value before a reference to it is returned. All indices between the current maximum and the given index are also filled with <code>null</code>.</li>
<li>The special value <code>-</code> is treated as a synonym for the index past the end.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ptr</td><td>a JSON pointer</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to the element pointed to by <em>ptr</em> </dd></dl>
<p>@complexity Constant.</p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::out_of_range</td><td>if the JSON pointer can not be resolved </td></tr>
    <tr><td class="paramname">std::domain_error</td><td>if an array index begins with '0' </td></tr>
    <tr><td class="paramname">std::invalid_argument</td><td>if an array index was not a number</td></tr>
  </table>
  </dd>
</dl>
<p>@liveexample{The behavior is shown in the example.,operatorjson_pointer}</p>
<dl class="section since"><dt>Since</dt><dd>version 2.0.0 </dd></dl>

</div>
</div>
<a id="a9d55e3e63b05e03a2b70cea3761f84cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d55e3e63b05e03a2b70cea3761f84cb">&#9670;&nbsp;</a></span>operator[]() <span class="overload">[2/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/d60/classnlohmann_1_1basic__json_1_1json__pointer.xhtml">json_pointer</a> &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access specified element via JSON Pointer </p>
<p>Uses a JSON pointer to retrieve a reference to the respective JSON value. No bound checking is performed. The function does not change the JSON value; no <code>null</code> values are created. In particular, the the special value <code>-</code> yields an exception.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ptr</td><td>JSON pointer to the desired element</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>const reference to the element pointed to by <em>ptr</em> </dd></dl>
<p>@complexity Constant.</p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::out_of_range</td><td>if the JSON pointer can not be resolved </td></tr>
    <tr><td class="paramname">std::domain_error</td><td>if an array index begins with '0' </td></tr>
    <tr><td class="paramname">std::invalid_argument</td><td>if an array index was not a number</td></tr>
  </table>
  </dd>
</dl>
<p>@liveexample{The behavior is shown in the example.,operatorjson_pointer_const}</p>
<dl class="section since"><dt>Since</dt><dd>version 2.0.0 </dd></dl>

</div>
</div>
<a id="a233b02b0839ef798942dd46157cc0fe6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a233b02b0839ef798942dd46157cc0fe6">&#9670;&nbsp;</a></span>operator[]() <span class="overload">[3/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">const typename object_t::key_type &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access specified object element </p>
<p>Returns a reference to the element at with specified key <em>key</em>.</p>
<dl class="section note"><dt>Note</dt><dd>If <em>key</em> is not found in the object, then it is silently added to the object and filled with a <code>null</code> value to make <code>key</code> a valid reference. In case the value was <code>null</code> before, it is converted to an object.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>key of the element to access</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to the element at key <em>key</em> </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if JSON is not an object or null; example: <code>"cannot use operator[] with string"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Logarithmic in the size of the container.</p>
<p>@liveexample{The example below shows how object elements can be read and written using the <code>[]</code> operator.,operatorarray__key_type}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a93403e803947b86f4da2d1fb3345cf2c">at(const typename object_t::key_type&amp;)</a> for access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc" title="the type of an element reference">reference</a> with range checking </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a">value()</a> for access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> with a default <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-67" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-67-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-67-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-67-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a233b02b0839ef798942dd46157cc0fe6_cgraph.svg" width="355" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ab2318780e5ae692039e816b6ac32c91e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2318780e5ae692039e816b6ac32c91e">&#9670;&nbsp;</a></span>operator[]() <span class="overload">[4/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">const typename object_t::key_type &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>read-only access specified object element </p>
<p>Returns a const reference to the element at with specified key <em>key</em>. No bounds checking is performed.</p>
<dl class="section warning"><dt>Warning</dt><dd>If the element with key <em>key</em> does not exist, the behavior is undefined.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>key of the element to access</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>const reference to the element at key <em>key</em> </dd></dl>
<dl class="section pre"><dt>Precondition</dt><dd>The element with key <em>key</em> must exist. <b>This precondition is enforced with an assertion.</b></dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if JSON is not an object; example: <code>"cannot use
operator[] with null"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Logarithmic in the size of the container.</p>
<p>@liveexample{The example below shows how object elements can be read using the <code>[]</code> operator.,operatorarray__key_type_const}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a93403e803947b86f4da2d1fb3345cf2c">at(const typename object_t::key_type&amp;)</a> for access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc" title="the type of an element reference">reference</a> with range checking </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a">value()</a> for access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> with a default <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-68" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-68-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-68-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-68-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_ab2318780e5ae692039e816b6ac32c91e_cgraph.svg" width="355" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ac871e3b03fb2eeca9a8de4db2bea760f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac871e3b03fb2eeca9a8de4db2bea760f">&#9670;&nbsp;</a></span>operator[]() <span class="overload">[5/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a>&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access specified array element </p>
<p>Returns a reference to the element at specified location <em>idx</em>.</p>
<dl class="section note"><dt>Note</dt><dd>If <em>idx</em> is beyond the range of the array (i.e., <code>idx &gt;= <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a25e27ad0c6d53c01871c5485e1f75b96" title="returns the number of elements">size()</a></code>), then the array is silently filled up with <code>null</code> values to make <code>idx</code> a valid reference to the last stored element.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">idx</td><td>index of the element to access</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to the element at index <em>idx</em> </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if JSON is not an array or null; example: <code>"cannot use operator[] with string"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Constant if <em>idx</em> is in the range of the array. Otherwise linear in <code>idx - <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a25e27ad0c6d53c01871c5485e1f75b96" title="returns the number of elements">size()</a></code>.</p>
<p>@liveexample{The example below shows how array elements can be read and written using <code>[]</code> operator. Note the addition of <code>null</code> values.,operatorarray__size_type}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-69" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-69-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-69-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-69-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_ac871e3b03fb2eeca9a8de4db2bea760f_cgraph.svg" width="355" height="248"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-70" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-70-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-70-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-70-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_ac871e3b03fb2eeca9a8de4db2bea760f_icgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a9cb592cd85c14f3e845e30d51cf17efb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9cb592cd85c14f3e845e30d51cf17efb">&#9670;&nbsp;</a></span>operator[]() <span class="overload">[6/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a>&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access specified array element </p>
<p>Returns a const reference to the element at specified location <em>idx</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">idx</td><td>index of the element to access</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>const reference to the element at index <em>idx</em> </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if JSON is not an array; example: <code>"cannot use
operator[] with null"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Constant.</p>
<p>@liveexample{The example below shows how array elements can be read using the <code>[]</code> operator.,operatorarray__size_type_const}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-71" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-71-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-71-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-71-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a9cb592cd85c14f3e845e30d51cf17efb_cgraph.svg" width="355" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a1416bbec9d9a8eeca21c213cf5290868"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1416bbec9d9a8eeca21c213cf5290868">&#9670;&nbsp;</a></span>operator[]() <span class="overload">[7/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename T , std::size_t n&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">T *(&amp;)&#160;</td>
          <td class="paramname"><em>key</em>[n]</td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access specified object element </p>
<p>Returns a reference to the element at with specified key <em>key</em>.</p>
<dl class="section note"><dt>Note</dt><dd>If <em>key</em> is not found in the object, then it is silently added to the object and filled with a <code>null</code> value to make <code>key</code> a valid reference. In case the value was <code>null</code> before, it is converted to an object.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>key of the element to access</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to the element at key <em>key</em> </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if JSON is not an object or null; example: <code>"cannot use operator[] with string"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Logarithmic in the size of the container.</p>
<p>@liveexample{The example below shows how object elements can be read and written using the <code>[]</code> operator.,operatorarray__key_type}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a93403e803947b86f4da2d1fb3345cf2c">at(const typename object_t::key_type&amp;)</a> for access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc" title="the type of an element reference">reference</a> with range checking </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a">value()</a> for access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> with a default <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-72" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-72-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-72-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-72-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a1416bbec9d9a8eeca21c213cf5290868_cgraph.svg" width="551" height="248"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ab17b18f161ecd014074790e25449094a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab17b18f161ecd014074790e25449094a">&#9670;&nbsp;</a></span>operator[]() <span class="overload">[8/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename T , std::size_t n&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">T *(&amp;)&#160;</td>
          <td class="paramname"><em>key</em>[n]</td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>read-only access specified object element </p>
<p>Returns a const reference to the element at with specified key <em>key</em>. No bounds checking is performed.</p>
<dl class="section warning"><dt>Warning</dt><dd>If the element with key <em>key</em> does not exist, the behavior is undefined.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function is required for compatibility reasons with Clang.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>key of the element to access</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>const reference to the element at key <em>key</em> </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if JSON is not an object; example: <code>"cannot use
operator[] with null"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Logarithmic in the size of the container.</p>
<p>@liveexample{The example below shows how object elements can be read using the <code>[]</code> operator.,operatorarray__key_type_const}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a93403e803947b86f4da2d1fb3345cf2c">at(const typename object_t::key_type&amp;)</a> for access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc" title="the type of an element reference">reference</a> with range checking </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a">value()</a> for access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> with a default <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-73" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-73-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-73-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-73-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_ab17b18f161ecd014074790e25449094a_cgraph.svg" width="551" height="248"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="abb8eaa633584b5aff9c8fcd242f25ca8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb8eaa633584b5aff9c8fcd242f25ca8">&#9670;&nbsp;</a></span>operator[]() <span class="overload">[9/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access specified object element </p>
<p>Returns a reference to the element at with specified key <em>key</em>.</p>
<dl class="section note"><dt>Note</dt><dd>If <em>key</em> is not found in the object, then it is silently added to the object and filled with a <code>null</code> value to make <code>key</code> a valid reference. In case the value was <code>null</code> before, it is converted to an object.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>key of the element to access</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to the element at key <em>key</em> </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if JSON is not an object or null; example: <code>"cannot use operator[] with string"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Logarithmic in the size of the container.</p>
<p>@liveexample{The example below shows how object elements can be read and written using the <code>[]</code> operator.,operatorarray__key_type}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a93403e803947b86f4da2d1fb3345cf2c">at(const typename object_t::key_type&amp;)</a> for access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc" title="the type of an element reference">reference</a> with range checking </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a">value()</a> for access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> with a default <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.1.0 </dd></dl>
<div id="dynsection-74" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-74-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-74-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-74-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_abb8eaa633584b5aff9c8fcd242f25ca8_cgraph.svg" width="355" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a26554213cbb1722accc460ce348c860a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26554213cbb1722accc460ce348c860a">&#9670;&nbsp;</a></span>operator[]() <span class="overload">[10/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>read-only access specified object element </p>
<p>Returns a const reference to the element at with specified key <em>key</em>. No bounds checking is performed.</p>
<dl class="section warning"><dt>Warning</dt><dd>If the element with key <em>key</em> does not exist, the behavior is undefined.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>key of the element to access</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>const reference to the element at key <em>key</em> </dd></dl>
<dl class="section pre"><dt>Precondition</dt><dd>The element with key <em>key</em> must exist. <b>This precondition is enforced with an assertion.</b></dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if JSON is not an object; example: <code>"cannot use
operator[] with null"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Logarithmic in the size of the container.</p>
<p>@liveexample{The example below shows how object elements can be read using the <code>[]</code> operator.,operatorarray__key_type_const}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a93403e803947b86f4da2d1fb3345cf2c">at(const typename object_t::key_type&amp;)</a> for access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc" title="the type of an element reference">reference</a> with range checking </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a">value()</a> for access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a> with a default <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#af9c51328fbe1da75eca750be3009917a" title="access specified object element with default value">value</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.1.0 </dd></dl>
<div id="dynsection-75" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-75-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-75-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-75-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a26554213cbb1722accc460ce348c860a_cgraph.svg" width="355" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ab275a3e00a40189e96d244de6c8f311a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab275a3e00a40189e96d244de6c8f311a">&#9670;&nbsp;</a></span>parse() <span class="overload">[1/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename CharT , typename std::enable_if&lt; std::is_pointer&lt; CharT &gt;::value and std::is_integral&lt; typename std::remove_pointer&lt; CharT &gt;::type &gt;::value and sizeof(typename std::remove_pointer&lt; CharT &gt;::type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::parse </td>
          <td>(</td>
          <td class="paramtype">const CharT&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a>&#160;</td>
          <td class="paramname"><em>cb</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>deserialize from string literal </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">CharT</td><td>character/literal type with size of 1 byte </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>string literal to read a serialized JSON value from </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cb</td><td>a parser callback function of type <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a> which is used to control the deserialization by filtering unwanted values (optional)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>result of the deserialization</dd></dl>
<p>@complexity Linear in the length of the input. The parser is a predictive LL(1) parser. The complexity can be higher if the parser callback function <em>cb</em> has a super-linear complexity.</p>
<dl class="section note"><dt>Note</dt><dd>A UTF-8 byte order mark is silently ignored. </dd>
<dd>
String containers like <code>std::string</code> or <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a> can be parsed with <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a00795fca3388571ba4a56a1ea6e0466b">parse(const ContiguousContainer&amp;, const parser_callback_t)</a></dd></dl>
<p>@liveexample{The example below demonstrates the <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a86f339e8449cce96b89e86635a7d389e" title="deserialize from an array">parse()</a></code> function with and without callback function.,parse__string__parser_callback_t}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4cd30efe5c33a7cf73a0c6495bb16054">parse(std::istream&amp;, const parser_callback_t)</a> for a version that reads from an input stream</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 (originally for <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a>) </dd></dl>
<div id="dynsection-76" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-76-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-76-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-76-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_ab275a3e00a40189e96d244de6c8f311a_cgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a00795fca3388571ba4a56a1ea6e0466b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a00795fca3388571ba4a56a1ea6e0466b">&#9670;&nbsp;</a></span>parse() <span class="overload">[2/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;class ContiguousContainer , typename std::enable_if&lt; not std::is_pointer&lt; ContiguousContainer &gt;::value and std::is_base_of&lt; std::random_access_iterator_tag, typename std::iterator_traits&lt;  decltype&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::parse </td>
          <td>(</td>
          <td class="paramtype">const ContiguousContainer &amp;&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a>&#160;</td>
          <td class="paramname"><em>cb</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>deserialize from a container with contiguous storage </p>
<p>This function reads from a container with contiguous storage of 1-byte values. Compatible container types include <code>std::vector</code>, <code>std::string</code>, <code>std::array</code>, and <code>std::initializer_list</code>. User-defined containers can be used as long as they implement random-access iterators and a contiguous storage.</p>
<dl class="section pre"><dt>Precondition</dt><dd>The container storage is contiguous. Violating this precondition yields undefined behavior. <b>This precondition is enforced with an assertion.</b> </dd>
<dd>
Each element of the container has a size of 1 byte. Violating this precondition yields undefined behavior. <b>This precondition is enforced with a static assertion.</b></dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>There is no way to enforce all preconditions at compile-time. If the function is called with a noncompliant container and with assertions switched off, the behavior is undefined and will most likely yield segmentation violation.</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ContiguousContainer</td><td>container type with contiguous storage </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">c</td><td>container to read from </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cb</td><td>a parser callback function of type <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a> which is used to control the deserialization by filtering unwanted values (optional)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>result of the deserialization</dd></dl>
<p>@complexity Linear in the length of the input. The parser is a predictive LL(1) parser. The complexity can be higher if the parser callback function <em>cb</em> has a super-linear complexity.</p>
<dl class="section note"><dt>Note</dt><dd>A UTF-8 byte order mark is silently ignored.</dd></dl>
<p>@liveexample{The example below demonstrates the <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a86f339e8449cce96b89e86635a7d389e" title="deserialize from an array">parse()</a></code> function reading from a contiguous container.,parse__contiguouscontainer__parser_callback_t}</p>
<dl class="section since"><dt>Since</dt><dd>version 2.0.3 </dd></dl>
<div id="dynsection-77" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-77-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-77-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-77-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a00795fca3388571ba4a56a1ea6e0466b_cgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a360d37260add46be89881db2366fe343"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a360d37260add46be89881db2366fe343">&#9670;&nbsp;</a></span>parse() <span class="overload">[3/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;class IteratorType , typename std::enable_if&lt; std::is_base_of&lt; std::random_access_iterator_tag, typename std::iterator_traits&lt; IteratorType &gt;::iterator_category &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::parse </td>
          <td>(</td>
          <td class="paramtype">IteratorType&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">IteratorType&#160;</td>
          <td class="paramname"><em>last</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a>&#160;</td>
          <td class="paramname"><em>cb</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>deserialize from an iterator range with contiguous storage </p>
<p>This function reads from an iterator range of a container with contiguous storage of 1-byte values. Compatible container types include <code>std::vector</code>, <code>std::string</code>, <code>std::array</code>, <code>std::valarray</code>, and <code>std::initializer_list</code>. Furthermore, C-style arrays can be used with <code>std::begin()</code>/<code>std::end()</code>. User-defined containers can be used as long as they implement random-access iterators and a contiguous storage.</p>
<dl class="section pre"><dt>Precondition</dt><dd>The iterator range is contiguous. Violating this precondition yields undefined behavior. <b>This precondition is enforced with an assertion.</b> </dd>
<dd>
Each element in the range has a size of 1 byte. Violating this precondition yields undefined behavior. <b>This precondition is enforced with a static assertion.</b></dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>There is no way to enforce all preconditions at compile-time. If the function is called with noncompliant iterators and with assertions switched off, the behavior is undefined and will most likely yield segmentation violation.</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">IteratorType</td><td>iterator of container with contiguous storage </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">first</td><td>begin of the range to parse (included) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">last</td><td>end of the range to parse (excluded) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cb</td><td>a parser callback function of type <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a> which is used to control the deserialization by filtering unwanted values (optional)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>result of the deserialization</dd></dl>
<p>@complexity Linear in the length of the input. The parser is a predictive LL(1) parser. The complexity can be higher if the parser callback function <em>cb</em> has a super-linear complexity.</p>
<dl class="section note"><dt>Note</dt><dd>A UTF-8 byte order mark is silently ignored.</dd></dl>
<p>@liveexample{The example below demonstrates the <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a86f339e8449cce96b89e86635a7d389e" title="deserialize from an array">parse()</a></code> function reading from an iterator range.,parse__iteratortype__parser_callback_t}</p>
<dl class="section since"><dt>Since</dt><dd>version 2.0.3 </dd></dl>

</div>
</div>
<a id="a3bd712a1351ba28e5440fac2359da1cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3bd712a1351ba28e5440fac2359da1cb">&#9670;&nbsp;</a></span>parse() <span class="overload">[4/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::parse </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&amp;&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a>&#160;</td>
          <td class="paramname"><em>cb</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>deserialize from stream </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">i</td><td>stream to read a serialized JSON value from </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cb</td><td>a parser callback function of type <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a> which is used to control the deserialization by filtering unwanted values (optional)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>result of the deserialization</dd></dl>
<p>@complexity Linear in the length of the input. The parser is a predictive LL(1) parser. The complexity can be higher if the parser callback function <em>cb</em> has a super-linear complexity.</p>
<dl class="section note"><dt>Note</dt><dd>A UTF-8 byte order mark is silently ignored.</dd></dl>
<p>@liveexample{The example below demonstrates the <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a86f339e8449cce96b89e86635a7d389e" title="deserialize from an array">parse()</a></code> function with and without callback function.,parse__istream__parser_callback_t}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab275a3e00a40189e96d244de6c8f311a">parse(const CharT, const parser_callback_t)</a> for a version that reads from a string</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-78" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-78-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-78-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-78-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a3bd712a1351ba28e5440fac2359da1cb_cgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a4cd30efe5c33a7cf73a0c6495bb16054"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4cd30efe5c33a7cf73a0c6495bb16054">&#9670;&nbsp;</a></span>parse() <span class="overload">[5/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::parse </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a>&#160;</td>
          <td class="paramname"><em>cb</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>deserialize from stream </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">i</td><td>stream to read a serialized JSON value from </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cb</td><td>a parser callback function of type <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a> which is used to control the deserialization by filtering unwanted values (optional)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>result of the deserialization</dd></dl>
<p>@complexity Linear in the length of the input. The parser is a predictive LL(1) parser. The complexity can be higher if the parser callback function <em>cb</em> has a super-linear complexity.</p>
<dl class="section note"><dt>Note</dt><dd>A UTF-8 byte order mark is silently ignored.</dd></dl>
<p>@liveexample{The example below demonstrates the <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a86f339e8449cce96b89e86635a7d389e" title="deserialize from an array">parse()</a></code> function with and without callback function.,parse__istream__parser_callback_t}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab275a3e00a40189e96d244de6c8f311a">parse(const CharT, const parser_callback_t)</a> for a version that reads from a string</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-79" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-79-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-79-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-79-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a4cd30efe5c33a7cf73a0c6495bb16054_cgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a86f339e8449cce96b89e86635a7d389e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86f339e8449cce96b89e86635a7d389e">&#9670;&nbsp;</a></span>parse() <span class="overload">[6/6]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;class T , std::size_t N&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::parse </td>
          <td>(</td>
          <td class="paramtype">T(&amp;)&#160;</td>
          <td class="paramname"><em>array</em>[N], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a>&#160;</td>
          <td class="paramname"><em>cb</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>deserialize from an array </p>
<p>This function reads from an array of 1-byte values.</p>
<dl class="section pre"><dt>Precondition</dt><dd>Each element of the container has a size of 1 byte. Violating this precondition yields undefined behavior. <b>This precondition is enforced with a static assertion.</b></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">array</td><td>array to read from </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cb</td><td>a parser callback function of type <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aecae491e175f8767c550ae3c59e180e3">parser_callback_t</a> which is used to control the deserialization by filtering unwanted values (optional)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>result of the deserialization</dd></dl>
<p>@complexity Linear in the length of the input. The parser is a predictive LL(1) parser. The complexity can be higher if the parser callback function <em>cb</em> has a super-linear complexity.</p>
<dl class="section note"><dt>Note</dt><dd>A UTF-8 byte order mark is silently ignored.</dd></dl>
<p>@liveexample{The example below demonstrates the <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a86f339e8449cce96b89e86635a7d389e" title="deserialize from an array">parse()</a></code> function reading from an array.,parse__array__parser_callback_t}</p>
<dl class="section since"><dt>Since</dt><dd>version 2.0.3 </dd></dl>
<div id="dynsection-80" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-80-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-80-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-80-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a86f339e8449cce96b89e86635a7d389e_cgraph.svg" width="551" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-81" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-81-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-81-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-81-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a86f339e8449cce96b89e86635a7d389e_icgraph.svg" width="355" height="104"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a81e0c41a4a9dff4df2f6973f7f8b2a83"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a81e0c41a4a9dff4df2f6973f7f8b2a83">&#9670;&nbsp;</a></span>patch()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::patch </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &amp;&#160;</td>
          <td class="paramname"><em>json_patch</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>applies a JSON patch </p>
<p><a href="http://jsonpatch.com">JSON Patch</a> defines a JSON document structure for expressing a sequence of operations to apply to a JSON) document. With this function, a JSON Patch is applied to the current JSON value by executing all operations from the patch.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">json_patch</td><td>JSON patch document </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>patched document</dd></dl>
<dl class="section note"><dt>Note</dt><dd>The application of a patch is atomic: Either all operations succeed and the patched document is returned or an exception is thrown. In any case, the original value is not changed: the patch is applied to a copy of the value.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::out_of_range</td><td>if a JSON pointer inside the patch could not be resolved successfully in the current JSON value; example: <code>"key baz
not found"</code> </td></tr>
    <tr><td class="paramname">invalid_argument</td><td>if the JSON patch is malformed (e.g., mandatory attributes are missing); example: <code>"operation add must have member path"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Linear in the size of the JSON value and the length of the JSON patch. As usually only a fraction of the JSON value is affected by the patch, the complexity can usually be neglected.</p>
<p>@liveexample{The following code shows how a JSON patch is applied to a value.,patch}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a543bd5f7490de54c875b2c0912dc9a49">diff</a> &ndash; create a JSON <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a81e0c41a4a9dff4df2f6973f7f8b2a83" title="applies a JSON patch">patch</a> by comparing two JSON values</dd>
<dd>
<a href="https://tools.ietf.org/html/rfc6902">RFC 6902 (JSON Patch)</a> </dd>
<dd>
<a href="https://tools.ietf.org/html/rfc6901">RFC 6901 (JSON Pointer)</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.0.0 </dd></dl>
<div id="dynsection-82" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-82-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-82-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-82-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a81e0c41a4a9dff4df2f6973f7f8b2a83_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="ac8e523ddc8c2dd7e5d2daf0d49a9c0d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8e523ddc8c2dd7e5d2daf0d49a9c0d7">&#9670;&nbsp;</a></span>push_back() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::push_back </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>add an object to an array </p>
<p>Appends the given element <em>val</em> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending <em>val</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>the value to add to the JSON array</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>when called on a type other than JSON array or null; example: <code>"cannot use push_back() with number"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Amortized constant.</p>
<p>@liveexample{The example shows how <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac8e523ddc8c2dd7e5d2daf0d49a9c0d7" title="add an object to an array">push_back()</a></code> and <code>+=</code> can be used to add elements to a JSON array. Note how the <code>null</code> value was silently converted to a JSON array.,push_back}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-83" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-83-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-83-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-83-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_ac8e523ddc8c2dd7e5d2daf0d49a9c0d7_cgraph.svg" width="355" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-84" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-84-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-84-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-84-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_ac8e523ddc8c2dd7e5d2daf0d49a9c0d7_icgraph.svg" width="355" height="248"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ab4384af330b79de0e5f279576803a2c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4384af330b79de0e5f279576803a2c7">&#9670;&nbsp;</a></span>push_back() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::push_back </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>add an object to an array </p>
<p>add an object to an array Appends the given element <em>val</em> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending <em>val</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>the value to add to the JSON array</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>when called on a type other than JSON array or null; example: <code>"cannot use push_back() with number"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Amortized constant.</p>
<p>@liveexample{The example shows how <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac8e523ddc8c2dd7e5d2daf0d49a9c0d7" title="add an object to an array">push_back()</a></code> and <code>+=</code> can be used to add elements to a JSON array. Note how the <code>null</code> value was silently converted to a JSON array.,push_back}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-85" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-85-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-85-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-85-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_ab4384af330b79de0e5f279576803a2c7_cgraph.svg" width="355" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ae11a3a51782c058fff2f6550cdfb9b3c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae11a3a51782c058fff2f6550cdfb9b3c">&#9670;&nbsp;</a></span>push_back() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::push_back </td>
          <td>(</td>
          <td class="paramtype">const typename object_t::value_type &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>add an object to an object </p>
<p>Inserts the given element <em>val</em> to the JSON object. If the function is called on a JSON null value, an empty object is created before inserting <em>val</em>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">val</td><td>the value to add to the JSON object</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>when called on a type other than JSON object or null; example: <code>"cannot use push_back() with number"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Logarithmic in the size of the container, O(log(<code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a25e27ad0c6d53c01871c5485e1f75b96" title="returns the number of elements">size()</a></code>)).</p>
<p>@liveexample{The example shows how <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac8e523ddc8c2dd7e5d2daf0d49a9c0d7" title="add an object to an array">push_back()</a></code> and <code>+=</code> can be used to add elements to a JSON object. Note how the <code>null</code> value was silently converted to a JSON object.,push_back__object_t__value}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-86" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-86-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-86-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-86-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_ae11a3a51782c058fff2f6550cdfb9b3c_cgraph.svg" width="355" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ab2716cbe2e997ab8309926b87f044434"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2716cbe2e997ab8309926b87f044434">&#9670;&nbsp;</a></span>push_back() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::push_back </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &gt;&#160;</td>
          <td class="paramname"><em>init</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>add an object to an object </p>
<p>This function allows to use <code>push_back</code> with an initializer list. In case</p>
<ol type="1">
<li>the current value is an object,</li>
<li>the initializer list <em>init</em> contains only two elements, and</li>
<li>the first element of <em>init</em> is a string,</li>
</ol>
<p><em>init</em> is converted into an object element and added using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae11a3a51782c058fff2f6550cdfb9b3c">push_back(const typename object_t::value_type&amp;)</a>. Otherwise, <em>init</em> is converted to a JSON value and added using <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac8e523ddc8c2dd7e5d2daf0d49a9c0d7">push_back(basic_json&amp;&amp;)</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">init</td><td>an initializer list</td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Linear in the size of the initializer list <em>init</em>.</p>
<dl class="section note"><dt>Note</dt><dd>This function is required to resolve an ambiguous overload error, because pairs like <code>{"key", "value"}</code> can be both interpreted as <code>object_t::value_type</code> or <code>std::initializer_list&lt;<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a>&gt;</code>, see <a href="https://github.com/nlohmann/json/issues/235">https://github.com/nlohmann/json/issues/235</a> for more information.</dd></dl>
<p>@liveexample{The example shows how initializer lists are treated as objects when possible.,push_back__initializer_list} </p>
<div id="dynsection-87" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-87-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-87-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-87-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_ab2716cbe2e997ab8309926b87f044434_cgraph.svg" width="551" height="248"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a515e7618392317dbf4b72d3e18bf2ab2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a515e7618392317dbf4b72d3e18bf2ab2">&#9670;&nbsp;</a></span>rbegin() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a72be3c24bfa24f0993d6c11af03e7404">const_reverse_iterator</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::rbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>returns a const reverse iterator to the last element </p>
<p>Returns a const iterator to the reverse-beginning; that is, the last element.</p>
<div class="image">
<img src="../../range-rbegin-rend.svg" alt=""/>
<div class="caption">
Illustration from cppreference.com</div></div>
<p>@complexity Constant.</p>
<p>@requirement This function helps <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a></code> satisfying the <a href="http://en.cppreference.com/w/cpp/concept/ReversibleContainer">ReversibleContainer</a> requirements:</p><ul>
<li>The complexity is constant.</li>
<li>Has the semantics of <code>const_cast&lt;const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a>&amp;&gt;(*this).<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1ef93e2006dbe52667294f5ef38b0b10" title="returns an iterator to the reverse-beginning">rbegin()</a></code>.</li>
</ul>
<p>@liveexample{The following code shows an example for <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1e0769d22d54573f294da0e5c6abc9de" title="returns a const reverse iterator to the last element">crbegin()</a></code>.,crbegin}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1ef93e2006dbe52667294f5ef38b0b10">rbegin()</a> &ndash; returns a reverse <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the beginning </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac77aed0925d447744676725ab0b6d535">rend()</a> &ndash; returns a reverse <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5795b029dbf28e0cb2c7a439ec5d0a88">crend()</a> &ndash; returns a const reverse <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-88" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-88-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-88-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-88-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a515e7618392317dbf4b72d3e18bf2ab2_cgraph.svg" width="551" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a1ef93e2006dbe52667294f5ef38b0b10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ef93e2006dbe52667294f5ef38b0b10">&#9670;&nbsp;</a></span>rbegin() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac223d5560c2b05a208c88de67376c5f2">reverse_iterator</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::rbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>returns an iterator to the reverse-beginning </p>
<p>Returns an iterator to the reverse-beginning; that is, the last element.</p>
<div class="image">
<img src="../../range-rbegin-rend.svg" alt=""/>
<div class="caption">
Illustration from cppreference.com</div></div>
<p>@complexity Constant.</p>
<p>@requirement This function helps <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a></code> satisfying the <a href="http://en.cppreference.com/w/cpp/concept/ReversibleContainer">ReversibleContainer</a> requirements:</p><ul>
<li>The complexity is constant.</li>
<li>Has the semantics of <code>reverse_iterator(end())</code>.</li>
</ul>
<p>@liveexample{The following code shows an example for <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1ef93e2006dbe52667294f5ef38b0b10" title="returns an iterator to the reverse-beginning">rbegin()</a></code>.,rbegin}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1e0769d22d54573f294da0e5c6abc9de">crbegin()</a> &ndash; returns a const reverse <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the beginning </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac77aed0925d447744676725ab0b6d535">rend()</a> &ndash; returns a reverse <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5795b029dbf28e0cb2c7a439ec5d0a88">crend()</a> &ndash; returns a const reverse <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-89" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-89-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-89-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-89-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a1ef93e2006dbe52667294f5ef38b0b10_cgraph.svg" width="384" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a4f73d4cee67ea328d785979c22af0ae1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f73d4cee67ea328d785979c22af0ae1">&#9670;&nbsp;</a></span>rend() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a72be3c24bfa24f0993d6c11af03e7404">const_reverse_iterator</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::rend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>returns a const reverse iterator to one before the first </p>
<p>Returns a const reverse iterator to the reverse-end; that is, one before the first element.</p>
<div class="image">
<img src="../../range-rbegin-rend.svg" alt=""/>
<div class="caption">
Illustration from cppreference.com</div></div>
<p>@complexity Constant.</p>
<p>@requirement This function helps <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a></code> satisfying the <a href="http://en.cppreference.com/w/cpp/concept/ReversibleContainer">ReversibleContainer</a> requirements:</p><ul>
<li>The complexity is constant.</li>
<li>Has the semantics of <code>const_cast&lt;const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a>&amp;&gt;(*this).<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac77aed0925d447744676725ab0b6d535" title="returns an iterator to the reverse-end">rend()</a></code>.</li>
</ul>
<p>@liveexample{The following code shows an example for <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5795b029dbf28e0cb2c7a439ec5d0a88" title="returns a const reverse iterator to one before the first">crend()</a></code>.,crend}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac77aed0925d447744676725ab0b6d535">rend()</a> &ndash; returns a reverse <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1ef93e2006dbe52667294f5ef38b0b10">rbegin()</a> &ndash; returns a reverse <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the beginning </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1e0769d22d54573f294da0e5c6abc9de">crbegin()</a> &ndash; returns a const reverse <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the beginning</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-90" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-90-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-90-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-90-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a4f73d4cee67ea328d785979c22af0ae1_cgraph.svg" width="551" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ac77aed0925d447744676725ab0b6d535"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac77aed0925d447744676725ab0b6d535">&#9670;&nbsp;</a></span>rend() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac223d5560c2b05a208c88de67376c5f2">reverse_iterator</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::rend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>returns an iterator to the reverse-end </p>
<p>Returns an iterator to the reverse-end; that is, one before the first element.</p>
<div class="image">
<img src="../../range-rbegin-rend.svg" alt=""/>
<div class="caption">
Illustration from cppreference.com</div></div>
<p>@complexity Constant.</p>
<p>@requirement This function helps <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a></code> satisfying the <a href="http://en.cppreference.com/w/cpp/concept/ReversibleContainer">ReversibleContainer</a> requirements:</p><ul>
<li>The complexity is constant.</li>
<li>Has the semantics of <code>reverse_iterator(begin())</code>.</li>
</ul>
<p>@liveexample{The following code shows an example for <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac77aed0925d447744676725ab0b6d535" title="returns an iterator to the reverse-end">rend()</a></code>.,rend}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5795b029dbf28e0cb2c7a439ec5d0a88">crend()</a> &ndash; returns a const reverse <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1ef93e2006dbe52667294f5ef38b0b10">rbegin()</a> &ndash; returns a reverse <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the beginning </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1e0769d22d54573f294da0e5c6abc9de">crbegin()</a> &ndash; returns a const reverse <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a099316232c76c034030a38faa6e34dca" title="an iterator for a basic_json container">iterator</a> to the beginning</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-91" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-91-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-91-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-91-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_ac77aed0925d447744676725ab0b6d535_cgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a25e27ad0c6d53c01871c5485e1f75b96"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25e27ad0c6d53c01871c5485e1f75b96">&#9670;&nbsp;</a></span>size()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a39f2cd0b58106097e0e67bf185cc519b">size_type</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>returns the number of elements </p>
<p>Returns the number of elements in a JSON value.</p>
<dl class="section return"><dt>Returns</dt><dd>The return value depends on the different types and is defined as follows: <table class="markdownTable">
<tr class="markdownTableHead">
<th class="markdownTableHeadNone">Value type  </th><th class="markdownTableHeadNone">return value   </th></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">null  </td><td class="markdownTableBodyNone"><code>0</code>   </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">boolean  </td><td class="markdownTableBodyNone"><code>1</code>   </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">string  </td><td class="markdownTableBodyNone"><code>1</code>   </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">number  </td><td class="markdownTableBodyNone"><code>1</code>   </td></tr>
<tr class="markdownTableRowOdd">
<td class="markdownTableBodyNone">object  </td><td class="markdownTableBodyNone">result of function object_t::size()   </td></tr>
<tr class="markdownTableRowEven">
<td class="markdownTableBodyNone">array  </td><td class="markdownTableBodyNone">result of function array_t::size()   </td></tr>
</table>
</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function does not return the length of a string stored as JSON value - it returns the number of elements in the JSON value which is 1 in the case of a string.</dd></dl>
<p>@complexity Constant, as long as <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae095578e03df97c5b3991787f1056374">array_t</a> and <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa1eb13d5aa86f80cbee6c58e90fbaf49">object_t</a> satisfy the Container concept; that is, their <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a25e27ad0c6d53c01871c5485e1f75b96" title="returns the number of elements">size()</a> functions have constant complexity.</p>
<p>@requirement This function helps <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a></code> satisfying the <a href="http://en.cppreference.com/w/cpp/concept/Container">Container</a> requirements:</p><ul>
<li>The complexity is constant.</li>
<li>Has the semantics of <code>std::distance(<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a0ff28dac23f2bdecee9564d07f51dcdc" title="returns an iterator to the first element">begin()</a>, <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a13e032a02a7fd8a93fdddc2fcbc4763c" title="returns an iterator to one past the last element">end()</a>)</code>.</li>
</ul>
<p>@liveexample{The following code calls <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a25e27ad0c6d53c01871c5485e1f75b96" title="returns the number of elements">size()</a></code> on the different value types.,size}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1a86d444bfeaa9518d2421aedd74444a">empty()</a> &ndash; checks whether the container is <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a1a86d444bfeaa9518d2421aedd74444a" title="checks whether the container is empty">empty</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2f47d3c6a441c57dd2be00449fbb88e1">max_size()</a> &ndash; returns the maximal number of elements</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-92" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-92-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-92-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-92-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a25e27ad0c6d53c01871c5485e1f75b96_icgraph.svg" width="355" height="248"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a65b0a24e1361a030ad0a661de22f6c8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65b0a24e1361a030ad0a661de22f6c8e">&#9670;&nbsp;</a></span>swap() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae095578e03df97c5b3991787f1056374">array_t</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>exchanges the values </p>
<p>Exchanges the contents of a JSON array with those of <em>other</em>. Does not invoke any move, copy, or swap operations on individual elements. All iterators and references remain valid. The past-the-end iterator is invalidated.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">other</td><td>array to exchange the contents with</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>when JSON value is not an array; example: <code>"cannot use swap() with string"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Constant.</p>
<p>@liveexample{The example below shows how arrays can be swapped with <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8c9d932353e1ab98a7dc2fc27e002031" title="exchanges the values">swap()</a></code>.,swap__array_t}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-93" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-93-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-93-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-93-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a65b0a24e1361a030ad0a661de22f6c8e_cgraph.svg" width="355" height="170"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ac31f12587d2f1a3be5ffc394aa9d72a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac31f12587d2f1a3be5ffc394aa9d72a4">&#9670;&nbsp;</a></span>swap() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#aa1eb13d5aa86f80cbee6c58e90fbaf49">object_t</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>exchanges the values </p>
<p>Exchanges the contents of a JSON object with those of <em>other</em>. Does not invoke any move, copy, or swap operations on individual elements. All iterators and references remain valid. The past-the-end iterator is invalidated.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">other</td><td>object to exchange the contents with</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>when JSON value is not an object; example: <code>"cannot use swap() with string"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Constant.</p>
<p>@liveexample{The example below shows how objects can be swapped with <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8c9d932353e1ab98a7dc2fc27e002031" title="exchanges the values">swap()</a></code>.,swap__object_t}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-94" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-94-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-94-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-94-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_ac31f12587d2f1a3be5ffc394aa9d72a4_cgraph.svg" width="355" height="170"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a8c9d932353e1ab98a7dc2fc27e002031"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c9d932353e1ab98a7dc2fc27e002031">&#9670;&nbsp;</a></span>swap() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc">reference</a>&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>exchanges the values </p>
<p>Exchanges the contents of the JSON value with those of <em>other</em>. Does not invoke any move, copy, or swap operations on individual elements. All iterators and references remain valid. The past-the-end iterator is invalidated.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">other</td><td>JSON value to exchange the contents with</td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Constant.</p>
<p>@liveexample{The example below shows how JSON values can be swapped with <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8c9d932353e1ab98a7dc2fc27e002031" title="exchanges the values">swap()</a></code>.,swap__reference}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-95" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-95-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-95-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-95-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a8c9d932353e1ab98a7dc2fc27e002031_cgraph.svg" width="286" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-96" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-96-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-96-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-96-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a8c9d932353e1ab98a7dc2fc27e002031_icgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="adaa1ed0a889d86c8e0216a3d66980f76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adaa1ed0a889d86c8e0216a3d66980f76">&#9670;&nbsp;</a></span>swap() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>exchanges the values </p>
<p>Exchanges the contents of a JSON string with those of <em>other</em>. Does not invoke any move, copy, or swap operations on individual elements. All iterators and references remain valid. The past-the-end iterator is invalidated.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">other</td><td>string to exchange the contents with</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>when JSON value is not a string; example: <code>"cannot
use swap() with boolean"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Constant.</p>
<p>@liveexample{The example below shows how strings can be swapped with <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8c9d932353e1ab98a7dc2fc27e002031" title="exchanges the values">swap()</a></code>.,swap__string_t}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-97" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-97-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-97-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-97-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_adaa1ed0a889d86c8e0216a3d66980f76_cgraph.svg" width="355" height="170"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a2566783e190dec524bf3445b322873b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2566783e190dec524bf3445b322873b8">&#9670;&nbsp;</a></span>to_cbor()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::vector&lt;uint8_t&gt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::to_cbor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &amp;&#160;</td>
          <td class="paramname"><em>j</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>create a MessagePack serialization of a given JSON value </p>
<p>Serializes a given JSON value <em>j</em> to a byte vector using the CBOR (Concise Binary Object Representation) serialization format. CBOR is a binary serialization format which aims to be more compact than JSON itself, yet more efficient to parse.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">j</td><td>JSON value to serialize </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MessagePack serialization as byte vector</dd></dl>
<p>@complexity Linear in the size of the JSON value <em>j</em>.</p>
<p>@liveexample{The example shows the serialization of a JSON value to a byte vector in CBOR format.,to_cbor}</p>
<dl class="section see"><dt>See also</dt><dd><a href="http://cbor.io">http://cbor.io</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab5e3e1758c1a52ffe89b1d379ef7fbe1">from_cbor(const std::vector&lt;uint8_t&gt;&amp;, const size_t)</a> for the analogous deserialization </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a09ca1dc273d226afe0ca83a9d7438d9c">to_msgpack</a>(const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a>&amp; for the related MessagePack format</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.0.9 </dd></dl>

</div>
</div>
<a id="a09ca1dc273d226afe0ca83a9d7438d9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09ca1dc273d226afe0ca83a9d7438d9c">&#9670;&nbsp;</a></span>to_msgpack()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::vector&lt;uint8_t&gt; <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::to_msgpack </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &amp;&#160;</td>
          <td class="paramname"><em>j</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>create a MessagePack serialization of a given JSON value </p>
<p>Serializes a given JSON value <em>j</em> to a byte vector using the MessagePack serialization format. MessagePack is a binary serialization format which aims to be more compact than JSON itself, yet more efficient to parse.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">j</td><td>JSON value to serialize </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MessagePack serialization as byte vector</dd></dl>
<p>@complexity Linear in the size of the JSON value <em>j</em>.</p>
<p>@liveexample{The example shows the serialization of a JSON value to a byte vector in MessagePack format.,to_msgpack}</p>
<dl class="section see"><dt>See also</dt><dd><a href="http://msgpack.org">http://msgpack.org</a> </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a3eafe0b1fb2f2c443f1b3fea55c8a470">from_msgpack(const std::vector&lt;uint8_t&gt;&amp;, const size_t)</a> for the analogous deserialization </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2566783e190dec524bf3445b322873b8">to_cbor</a>(const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml" title="a class to store JSON values">basic_json</a>&amp; for the related CBOR format</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.0.9 </dd></dl>

</div>
</div>
<a id="a2b2d781d7f2a4ee41bc0016e931cadf7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b2d781d7f2a4ee41bc0016e931cadf7">&#9670;&nbsp;</a></span>type()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a90aa5ef615aa8305e9ea20d8a947980f">value_t</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::<a class="el" href="../../db/d0a/classstd_1_1conditional_1_1type.xhtml">type</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return the type of the JSON value (explicit) </p>
<p>Return the type of the JSON value as a value from the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ae8cbef097f7da18a781fc86587de6b90">value_t</a> enumeration.</p>
<dl class="section return"><dt>Returns</dt><dd>the type of the JSON value</dd></dl>
<p>@complexity Constant.</p>
<p>@exceptionsafety No-throw guarantee: this member function never throws exceptions.</p>
<p>@liveexample{The following code exemplifies <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a2b2d781d7f2a4ee41bc0016e931cadf7" title="return the type of the JSON value (explicit)">type()</a></code> for all JSON types.,type}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-98" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-98-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-98-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-98-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_icgraph.svg" width="355" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a6b75862bdb4d26650616cf9821430755"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b75862bdb4d26650616cf9821430755">&#9670;&nbsp;</a></span>type_name()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::type_name </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>return the type as string </p>
<p>Returns the type name as string to be used in error messages - usually to indicate that a function was called on a wrong JSON type.</p>
<dl class="section return"><dt>Returns</dt><dd>basically a string representation of a the <em>m_type</em> member</dd></dl>
<p>@complexity Constant.</p>
<p>@liveexample{The following code exemplifies <code><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a6b75862bdb4d26650616cf9821430755" title="return the type as string">type_name()</a></code> for all JSON types.,type_name}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0, public since 2.1.0 </dd></dl>
<div id="dynsection-99" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-99-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-99-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-99-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a6b75862bdb4d26650616cf9821430755_icgraph.svg" width="570" height="562"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a74fa3ab2003f2f6f2b69deaafed9126d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74fa3ab2003f2f6f2b69deaafed9126d">&#9670;&nbsp;</a></span>unflatten()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::unflatten </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>unflatten a previously flattened JSON value </p>
<p>The function restores the arbitrary nesting of a JSON value that has been flattened before using the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab838f000d76662917ffd6ec529569e03">flatten()</a> function. The JSON value must meet certain constraints:</p><ol type="1">
<li>The value must be an object.</li>
<li>The keys must be JSON pointers (see <a href="https://tools.ietf.org/html/rfc6901">RFC 6901</a>)</li>
<li>The mapped values must be primitive JSON types.</li>
</ol>
<dl class="section return"><dt>Returns</dt><dd>the original JSON from a flattened version</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Empty objects and arrays are flattened by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab838f000d76662917ffd6ec529569e03">flatten()</a> to <code>null</code> values and can not unflattened to their original type. Apart from this example, for a JSON value <code>j</code>, the following is always true: <code>j == j.flatten().<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a74fa3ab2003f2f6f2b69deaafed9126d" title="unflatten a previously flattened JSON value">unflatten()</a></code>.</dd></dl>
<p>@complexity Linear in the size the JSON value.</p>
<p>@liveexample{The following code shows how a flattened JSON object is unflattened into the original nested JSON object.,unflatten}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ab838f000d76662917ffd6ec529569e03">flatten()</a> for the reverse function</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.0.0 </dd></dl>

</div>
</div>
<a id="a869c900ee02cf1a68988dcce3b375424"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a869c900ee02cf1a68988dcce3b375424">&#9670;&nbsp;</a></span>value() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::value </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/d60/classnlohmann_1_1basic__json_1_1json__pointer.xhtml">json_pointer</a> &amp;&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>default_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>overload for a default value of type const char* </p>
<p>access specified object element via JSON Pointer with default value Returns either a copy of an object's element at the specified key <em>key</em> or a given default value if no element with key <em>key</em> exists.</p>
<p>The function is basically equivalent to executing </p><div class="fragment"><div class="line"><span class="keywordflow">try</span> {</div>
<div class="line">    <span class="keywordflow">return</span> <a class="code" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a73ae333487310e3302135189ce8ff5d8">at</a>(ptr);</div>
<div class="line">} <span class="keywordflow">catch</span>(std::out_of_range) {</div>
<div class="line">    <span class="keywordflow">return</span> default_value;</div>
<div class="line">}</div>
</div><!-- fragment --><dl class="section note"><dt>Note</dt><dd>Unlike <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8ab61397c10f18b305520da7073b2b45">at(const json_pointer&amp;)</a>, this function does not throw if the given key <em>key</em> was not found.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ptr</td><td>a JSON pointer to the element to access </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">default_value</td><td>the value to return if <em>ptr</em> found no value</td></tr>
  </table>
  </dd>
</dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ValueType</td><td>type compatible to JSON values, for instance <code>int</code> for JSON integer numbers, <code>bool</code> for JSON booleans, or <code>std::vector</code> types for JSON arrays. Note the type of the expected value at <em>key</em> and the default value <em>default_value</em> must be compatible.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>copy of the element at key <em>key</em> or <em>default_value</em> if <em>key</em> is not found</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if JSON is not an object; example: <code>"cannot use
value() with null"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Logarithmic in the size of the container.</p>
<p>@liveexample{The example below shows how object elements can be queried with a default value.,basic_json__value_ptr}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6946dffeb3be5aa173645f0467a44b3">operator[](const json_pointer&amp;)</a> for unchecked access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc" title="the type of an element reference">reference</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.0.2 </dd></dl>
<div id="dynsection-100" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-100-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-100-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-100-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_a869c900ee02cf1a68988dcce3b375424_cgraph.svg" width="100%" height="446"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="ab7df4291dda0a80d86f74427cc3993ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7df4291dda0a80d86f74427cc3993ba">&#9670;&nbsp;</a></span>value() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;class ValueType , typename std::enable_if&lt; std::is_convertible&lt; basic_json_t, ValueType &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ValueType <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::value </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/d60/classnlohmann_1_1basic__json_1_1json__pointer.xhtml">json_pointer</a> &amp;&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ValueType&#160;</td>
          <td class="paramname"><em>default_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access specified object element via JSON Pointer with default value </p>
<p>Returns either a copy of an object's element at the specified key <em>key</em> or a given default value if no element with key <em>key</em> exists.</p>
<p>The function is basically equivalent to executing </p><div class="fragment"><div class="line"><span class="keywordflow">try</span> {</div>
<div class="line">    <span class="keywordflow">return</span> <a class="code" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a73ae333487310e3302135189ce8ff5d8">at</a>(ptr);</div>
<div class="line">} <span class="keywordflow">catch</span>(std::out_of_range) {</div>
<div class="line">    <span class="keywordflow">return</span> default_value;</div>
<div class="line">}</div>
</div><!-- fragment --><dl class="section note"><dt>Note</dt><dd>Unlike <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a8ab61397c10f18b305520da7073b2b45">at(const json_pointer&amp;)</a>, this function does not throw if the given key <em>key</em> was not found.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ptr</td><td>a JSON pointer to the element to access </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">default_value</td><td>the value to return if <em>ptr</em> found no value</td></tr>
  </table>
  </dd>
</dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ValueType</td><td>type compatible to JSON values, for instance <code>int</code> for JSON integer numbers, <code>bool</code> for JSON booleans, or <code>std::vector</code> types for JSON arrays. Note the type of the expected value at <em>key</em> and the default value <em>default_value</em> must be compatible.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>copy of the element at key <em>key</em> or <em>default_value</em> if <em>key</em> is not found</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if JSON is not an object; example: <code>"cannot use
value() with null"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Logarithmic in the size of the container.</p>
<p>@liveexample{The example below shows how object elements can be queried with a default value.,basic_json__value_ptr}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6946dffeb3be5aa173645f0467a44b3">operator[](const json_pointer&amp;)</a> for unchecked access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc" title="the type of an element reference">reference</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.0.2 </dd></dl>
<div id="dynsection-101" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-101-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-101-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-101-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_ab7df4291dda0a80d86f74427cc3993ba_cgraph.svg" width="355" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ad6a18403e7fbac9c4efd06facc71fc88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6a18403e7fbac9c4efd06facc71fc88">&#9670;&nbsp;</a></span>value() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a61f8566a1a85a424c7266fb531dca005">string_t</a> <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::value </td>
          <td>(</td>
          <td class="paramtype">const typename object_t::key_type &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>default_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>overload for a default value of type const char* </p>
<p>const </p>
<div id="dynsection-102" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-102-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-102-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-102-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_ad6a18403e7fbac9c4efd06facc71fc88_cgraph.svg" width="100%" height="446"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="af9c51328fbe1da75eca750be3009917a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9c51328fbe1da75eca750be3009917a">&#9670;&nbsp;</a></span>value() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;class ValueType , typename std::enable_if&lt; std::is_convertible&lt; basic_json_t, ValueType &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ValueType <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">nlohmann::basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::value </td>
          <td>(</td>
          <td class="paramtype">const typename object_t::key_type &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ValueType&#160;</td>
          <td class="paramname"><em>default_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>access specified object element with default value </p>
<p>Returns either a copy of an object's element at the specified key <em>key</em> or a given default value if no element with key <em>key</em> exists.</p>
<p>The function is basically equivalent to executing </p><div class="fragment"><div class="line"><span class="keywordflow">try</span> {</div>
<div class="line">    <span class="keywordflow">return</span> <a class="code" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a73ae333487310e3302135189ce8ff5d8">at</a>(key);</div>
<div class="line">} <span class="keywordflow">catch</span>(std::out_of_range) {</div>
<div class="line">    <span class="keywordflow">return</span> default_value;</div>
<div class="line">}</div>
</div><!-- fragment --><dl class="section note"><dt>Note</dt><dd>Unlike <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a93403e803947b86f4da2d1fb3345cf2c">at(const typename object_t::key_type&amp;)</a>, this function does not throw if the given key <em>key</em> was not found.</dd>
<dd>
Unlike <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a233b02b0839ef798942dd46157cc0fe6">operator[](const typename object_t::key_type&amp; key)</a>, this function does not implicitly add an element to the position defined by <em>key</em>. This function is furthermore also applicable to const objects.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>key of the element to access </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">default_value</td><td>the value to return if <em>key</em> is not found</td></tr>
  </table>
  </dd>
</dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">ValueType</td><td>type compatible to JSON values, for instance <code>int</code> for JSON integer numbers, <code>bool</code> for JSON booleans, or <code>std::vector</code> types for JSON arrays. Note the type of the expected value at <em>key</em> and the default value <em>default_value</em> must be compatible.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>copy of the element at key <em>key</em> or <em>default_value</em> if <em>key</em> is not found</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::domain_error</td><td>if JSON is not an object; example: <code>"cannot use
value() with null"</code></td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Logarithmic in the size of the container.</p>
<p>@liveexample{The example below shows how object elements can be queried with a default value.,basic_json__value}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a93403e803947b86f4da2d1fb3345cf2c">at(const typename object_t::key_type&amp;)</a> for access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc" title="the type of an element reference">reference</a> with range checking </dd>
<dd>
<a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a233b02b0839ef798942dd46157cc0fe6">operator[](const typename object_t::key_type&amp;)</a> for unchecked access by <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#ac6a5eddd156c776ac75ff54cfe54a5bc" title="the type of an element reference">reference</a></dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>
<div id="dynsection-103" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-103-trigger" src="../../closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-103-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-103-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_af9c51328fbe1da75eca750be3009917a_cgraph.svg" width="580" height="195"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-104" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-104-trigger" src="../../closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-104-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-104-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d9/dcc/classnlohmann_1_1basic__json_af9c51328fbe1da75eca750be3009917a_icgraph.svg" width="355" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a id="a6275ed57bae6866cdf5db5370a7ad47c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6275ed57bae6866cdf5db5370a7ad47c">&#9670;&nbsp;</a></span>detail::external_constructor</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;detail::value_t &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">friend struct <a class="el" href="../../d2/df4/structnlohmann_1_1detail_1_1external__constructor.xhtml">detail::external_constructor</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab0e886db6e9fa91ff9fd853333fed05b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0e886db6e9fa91ff9fd853333fed05b">&#9670;&nbsp;</a></span>operator!= <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator!= </td>
          <td>(</td>
          <td class="paramtype">const ScalarType&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>comparison: not equal </p>
<p>comparison: not equal Compares two JSON values for inequality by calculating <code>not (lhs == rhs)</code>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>first JSON value to consider </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>second JSON value to consider </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>whether the values <em>lhs</em> and <em>rhs</em> are not equal</dd></dl>
<p>@complexity Linear.</p>
<p>@liveexample{The example demonstrates comparing several JSON types.,operator__notequal}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="afefc38fc08bdb7a9a7474b5ab4a1140f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afefc38fc08bdb7a9a7474b5ab4a1140f">&#9670;&nbsp;</a></span>operator!= <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator!= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ScalarType&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>comparison: not equal </p>
<p>comparison: not equal Compares two JSON values for inequality by calculating <code>not (lhs == rhs)</code>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>first JSON value to consider </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>second JSON value to consider </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>whether the values <em>lhs</em> and <em>rhs</em> are not equal</dd></dl>
<p>@complexity Linear.</p>
<p>@liveexample{The example demonstrates comparing several JSON types.,operator__notequal}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="a6e2e21da48f5d9471716cd868a068327"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e2e21da48f5d9471716cd868a068327">&#9670;&nbsp;</a></span>operator!= <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator!= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>comparison: not equal </p>
<p>Compares two JSON values for inequality by calculating <code>not (lhs == rhs)</code>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>first JSON value to consider </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>second JSON value to consider </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>whether the values <em>lhs</em> and <em>rhs</em> are not equal</dd></dl>
<p>@complexity Linear.</p>
<p>@liveexample{The example demonstrates comparing several JSON types.,operator__notequal}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="aacd442b66140c764c594ac8ad7dfd5b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aacd442b66140c764c594ac8ad7dfd5b3">&#9670;&nbsp;</a></span>operator&lt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator&lt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>comparison: less than </p>
<p>Compares whether one JSON value <em>lhs</em> is less than another JSON value <em>rhs</em> according to the following rules:</p><ul>
<li>If <em>lhs</em> and <em>rhs</em> have the same type, the values are compared using the default <code>&lt;</code> operator.</li>
<li>Integer and floating-point numbers are automatically converted before comparison</li>
<li>In case <em>lhs</em> and <em>rhs</em> have different types, the values are ignored and the order of the types is considered, see operator&lt;(const value_t, const value_t).</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>first JSON value to consider </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>second JSON value to consider </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>whether <em>lhs</em> is less than <em>rhs</em> </dd></dl>
<p>@complexity Linear.</p>
<p>@liveexample{The example demonstrates comparing several JSON types.,operator__less}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="a60ca396028b8d9714c6e10efbf475af6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60ca396028b8d9714c6e10efbf475af6">&#9670;&nbsp;</a></span>operator&lt;&lt; <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::istream&amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &amp;&#160;</td>
          <td class="paramname"><em>j</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>i</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>deserialize from stream </p>
<p>Deserializes an input stream to a JSON value.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">i</td><td>input stream to read a serialized JSON value from </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">j</td><td>JSON value to write the deserialized input to</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::invalid_argument</td><td>in case of parse errors</td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Linear in the length of the input. The parser is a predictive LL(1) parser.</p>
<dl class="section note"><dt>Note</dt><dd>A UTF-8 byte order mark is silently ignored.</dd></dl>
<p>@liveexample{The example below shows how a JSON value is constructed by reading a serialization from a stream.,operator_deserialize}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4cd30efe5c33a7cf73a0c6495bb16054" title="deserialize from stream">parse(std::istream&amp;, const parser_callback_t)</a> for a variant with a parser callback function to filter values while parsing</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="a5e34c5435e557d0bf666bd7311211405"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e34c5435e557d0bf666bd7311211405">&#9670;&nbsp;</a></span>operator&lt;&lt; <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>o</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &amp;&#160;</td>
          <td class="paramname"><em>j</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>serialize to stream </p>
<p>Serialize the given JSON value <em>j</em> to the output stream <em>o</em>. The JSON value will be serialized using the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5319dc1bb9dfe19ce7ff559aaded3422">dump</a> member function. The indentation of the output can be controlled with the member variable <code>width</code> of the output stream <em>o</em>. For instance, using the manipulator <code>std::setw(4)</code> on <em>o</em> sets the indentation level to <code>4</code> and the serialization result is the same as calling <code>dump(4)</code>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">o</td><td>stream to serialize to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">j</td><td>JSON value to serialize</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the stream <em>o</em> </dd></dl>
<p>@complexity Linear.</p>
<p>@liveexample{The example below shows the serialization with different parameters to <code>width</code> to adjust the indentation level.,operator_serialize}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="a5c8bb5200f5eac10d31e26be46e5b1ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c8bb5200f5eac10d31e26be46e5b1ac">&#9670;&nbsp;</a></span>operator&lt;=</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator&lt;= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>comparison: less than or equal </p>
<p>Compares whether one JSON value <em>lhs</em> is less than or equal to another JSON value by calculating <code>not (rhs &lt; lhs)</code>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>first JSON value to consider </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>second JSON value to consider </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>whether <em>lhs</em> is less than or equal to <em>rhs</em> </dd></dl>
<p>@complexity Linear.</p>
<p>@liveexample{The example demonstrates comparing several JSON types.,operator__greater}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="aef302e3ae215e46e5035d0e4fdf47235"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef302e3ae215e46e5035d0e4fdf47235">&#9670;&nbsp;</a></span>operator== <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const ScalarType&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>comparison: equal </p>
<p>comparison: equal Compares two JSON values for equality according to the following rules:</p><ul>
<li>Two JSON values are equal if (1) they are from the same type and (2) their stored values are the same.</li>
<li>Integer and floating-point numbers are automatically converted before comparison. Floating-point numbers are compared indirectly: two floating-point numbers <code>f1</code> and <code>f2</code> are considered equal if neither <code>f1 &gt; f2</code> nor <code>f2 &gt; f1</code> holds.</li>
<li>Two JSON null values are equal.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>first JSON value to consider </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>second JSON value to consider </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>whether the values <em>lhs</em> and <em>rhs</em> are equal</dd></dl>
<p>@complexity Linear.</p>
<p>@liveexample{The example demonstrates comparing several JSON types.,operator__equal}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="aba21440ea1aff44f718285ed7d6d20d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba21440ea1aff44f718285ed7d6d20d9">&#9670;&nbsp;</a></span>operator== <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<div class="memtemplate">
template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ScalarType&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>comparison: equal </p>
<p>comparison: equal Compares two JSON values for equality according to the following rules:</p><ul>
<li>Two JSON values are equal if (1) they are from the same type and (2) their stored values are the same.</li>
<li>Integer and floating-point numbers are automatically converted before comparison. Floating-point numbers are compared indirectly: two floating-point numbers <code>f1</code> and <code>f2</code> are considered equal if neither <code>f1 &gt; f2</code> nor <code>f2 &gt; f1</code> holds.</li>
<li>Two JSON null values are equal.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>first JSON value to consider </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>second JSON value to consider </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>whether the values <em>lhs</em> and <em>rhs</em> are equal</dd></dl>
<p>@complexity Linear.</p>
<p>@liveexample{The example demonstrates comparing several JSON types.,operator__equal}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="a122640e7e2db1814fc7bbb3c122ec76e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a122640e7e2db1814fc7bbb3c122ec76e">&#9670;&nbsp;</a></span>operator== <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>comparison: equal </p>
<p>Compares two JSON values for equality according to the following rules:</p><ul>
<li>Two JSON values are equal if (1) they are from the same type and (2) their stored values are the same.</li>
<li>Integer and floating-point numbers are automatically converted before comparison. Floating-point numbers are compared indirectly: two floating-point numbers <code>f1</code> and <code>f2</code> are considered equal if neither <code>f1 &gt; f2</code> nor <code>f2 &gt; f1</code> holds.</li>
<li>Two JSON null values are equal.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>first JSON value to consider </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>second JSON value to consider </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>whether the values <em>lhs</em> and <em>rhs</em> are equal</dd></dl>
<p>@complexity Linear.</p>
<p>@liveexample{The example demonstrates comparing several JSON types.,operator__equal}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="a87db51b6b936fb2ea293cdbc8702dcb8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87db51b6b936fb2ea293cdbc8702dcb8">&#9670;&nbsp;</a></span>operator&gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator&gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>comparison: greater than </p>
<p>Compares whether one JSON value <em>lhs</em> is greater than another JSON value by calculating <code>not (lhs &lt;= rhs)</code>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>first JSON value to consider </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>second JSON value to consider </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>whether <em>lhs</em> is greater than to <em>rhs</em> </dd></dl>
<p>@complexity Linear.</p>
<p>@liveexample{The example demonstrates comparing several JSON types.,operator__lessequal}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="a74a943800c7f103d0990d7eef82c6453"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74a943800c7f103d0990d7eef82c6453">&#9670;&nbsp;</a></span>operator&gt;=</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator&gt;= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4057c5425f4faacfe39a8046871786ca">const_reference</a>&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>comparison: greater than or equal </p>
<p>Compares whether one JSON value <em>lhs</em> is greater than or equal to another JSON value by calculating <code>not (lhs &lt; rhs)</code>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>first JSON value to consider </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>second JSON value to consider </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>whether <em>lhs</em> is greater than or equal to <em>rhs</em> </dd></dl>
<p>@complexity Linear.</p>
<p>@liveexample{The example demonstrates comparing several JSON types.,operator__greaterequal}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="a34d6a60dd99e9f33b8273a1c8db5669b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34d6a60dd99e9f33b8273a1c8db5669b">&#9670;&nbsp;</a></span>operator&gt;&gt; <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &amp;&#160;</td>
          <td class="paramname"><em>j</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>o</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>serialize to stream </p>
<p>serialize to stream Serialize the given JSON value <em>j</em> to the output stream <em>o</em>. The JSON value will be serialized using the <a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a5319dc1bb9dfe19ce7ff559aaded3422">dump</a> member function. The indentation of the output can be controlled with the member variable <code>width</code> of the output stream <em>o</em>. For instance, using the manipulator <code>std::setw(4)</code> on <em>o</em> sets the indentation level to <code>4</code> and the serialization result is the same as calling <code>dump(4)</code>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">o</td><td>stream to serialize to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">j</td><td>JSON value to serialize</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the stream <em>o</em> </dd></dl>
<p>@complexity Linear.</p>
<p>@liveexample{The example below shows the serialization with different parameters to <code>width</code> to adjust the indentation level.,operator_serialize}</p>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<a id="aaf363408931d76472ded14017e59c9e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf363408931d76472ded14017e59c9e8">&#9670;&nbsp;</a></span>operator&gt;&gt; <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=void &gt; class JSONSerializer = adl_serializer&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::istream&amp; operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml">basic_json</a>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt; &amp;&#160;</td>
          <td class="paramname"><em>j</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>deserialize from stream </p>
<p>deserialize from stream Deserializes an input stream to a JSON value.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">i</td><td>input stream to read a serialized JSON value from </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">j</td><td>JSON value to write the deserialized input to</td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::invalid_argument</td><td>in case of parse errors</td></tr>
  </table>
  </dd>
</dl>
<p>@complexity Linear in the length of the input. The parser is a predictive LL(1) parser.</p>
<dl class="section note"><dt>Note</dt><dd>A UTF-8 byte order mark is silently ignored.</dd></dl>
<p>@liveexample{The example below shows how a JSON value is constructed by reading a serialization from a stream.,operator_deserialize}</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a4cd30efe5c33a7cf73a0c6495bb16054" title="deserialize from stream">parse(std::istream&amp;, const parser_callback_t)</a> for a variant with a parser callback function to filter values while parsing</dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 1.0.0 </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>include/utils/external/<a class="el" href="../../d3/dd1/nlohmann__json_8hpp_source.xhtml">nlohmann_json.hpp</a></li>
</ul>
</div><!-- contents -->
<div class="ttc" id="aclassnlohmann_1_1basic__json_xhtml_a32124a16dc80729d964d9caf607c2bc8"><div class="ttname"><a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a32124a16dc80729d964d9caf607c2bc8">nlohmann::basic_json::basic_json</a></div><div class="ttdeci">basic_json(const value_t value_type)</div><div class="ttdoc">create an empty value with a given type</div><div class="ttdef"><b>Definition:</b> nlohmann_json.hpp:1914</div></div>
<div class="ttc" id="aclassnlohmann_1_1basic__json_xhtml_a73ae333487310e3302135189ce8ff5d8"><div class="ttname"><a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a73ae333487310e3302135189ce8ff5d8">nlohmann::basic_json::at</a></div><div class="ttdeci">reference at(size_type idx)</div><div class="ttdoc">access specified array element with bounds checking</div><div class="ttdef"><b>Definition:</b> nlohmann_json.hpp:3453</div></div>
<div class="ttc" id="aclassnlohmann_1_1basic__json_xhtml_a543bd5f7490de54c875b2c0912dc9a49"><div class="ttname"><a href="../../d9/dcc/classnlohmann_1_1basic__json.xhtml#a543bd5f7490de54c875b2c0912dc9a49">nlohmann::basic_json::diff</a></div><div class="ttdeci">static basic_json diff(const basic_json &amp;source, const basic_json &amp;target, const std::string &amp;path=&quot;&quot;)</div><div class="ttdoc">creates a diff as a JSON patch</div><div class="ttdef"><b>Definition:</b> nlohmann_json.hpp:11702</div></div>
<div class="ttc" id="anamespacenlohmann_1_1detail_xhtml_a58117f225f43d03e3a0a4a6f3d77c9d9"><div class="ttname"><a href="../../dc/df0/namespacenlohmann_1_1detail.xhtml#a58117f225f43d03e3a0a4a6f3d77c9d9">nlohmann::detail::from_json</a></div><div class="ttdeci">void from_json(const BasicJsonType &amp;j, typename BasicJsonType::boolean_t &amp;b)</div><div class="ttdef"><b>Definition:</b> nlohmann_json.hpp:657</div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 2 2019 14:04:20 for JVM 8 SB 2019/2 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.16
</small></address>
</body>
</html>
