<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.16"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>JVM 8 SB 2019/2: include/instructions/instruction_set/misc.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">JVM 8 SB 2019/2
   </div>
   <div id="projectbrief">projeto que visa fazer uma implementação simples da JVM 8</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.16 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="../../dir_2843b2c750ff6b39dcfe98bf2554dba0.xhtml">instructions</a></li><li class="navelem"><a class="el" href="../../dir_7ef69e660d75507825e3f78a695283fd.xhtml">instruction_set</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">misc.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d4/d08/misc_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#ifndef INCLUDE_INSTRUCTIONS_INSTRUCTION_SET_MISC_H_</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#define INCLUDE_INSTRUCTIONS_INSTRUCTION_SET_MISC_H_</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d3/d5a/base_8h.xhtml">instructions/instruction_set/base.h</a>&quot;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d3/de6/opcodes_8h.xhtml">instructions/opcodes.h</a>&quot;</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../da/d66/string_8h.xhtml">utils/string.h</a>&quot;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160; </div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">namespace </span><a class="code" href="../../da/d11/namespace_instructions.xhtml">Instructions</a> {</div>
<div class="line"><a name="l00013"></a><span class="lineno"><a class="line" href="../../d4/d42/namespace_instructions_1_1_misc.xhtml">   13</a></span>&#160;<span class="keyword">namespace </span>Misc {</div>
<div class="line"><a name="l00014"></a><span class="lineno"><a class="line" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">   14</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml#a50d947ef412d7bd72ff4ba92a8fbe8d1">   16</a></span>&#160;  <span class="keyword">explicit</span> <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml#a50d947ef412d7bd72ff4ba92a8fbe8d1">BaseMisc</a>(<span class="keyword">const</span> <a class="code" href="../../d0/d94/namespace_utils_1_1_types.xhtml#a987afa1d65d5f43c5e379d4cdafacd44">Utils::Types::u1</a> &amp;tag) : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(tag) {}</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml#a2a5eac96258afd4bcff239bb08380a94">   18</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml#a2a5eac96258afd4bcff239bb08380a94">toBytecode</a>(</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;  }</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml#a4e31eba8d46bcd409689595dbdf5a86a">   26</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml#a4e31eba8d46bcd409689595dbdf5a86a">toBytecode_json</a>(</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    ;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;  }</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;};</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="../../d3/dfa/class_instructions_1_1_misc_1_1_checkcast.xhtml">   34</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d3/dfa/class_instructions_1_1_misc_1_1_checkcast.xhtml">Checkcast</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="../../d3/dfa/class_instructions_1_1_misc_1_1_checkcast.xhtml#afb788c0933cb626287f6eea05d87f9fc">   36</a></span>&#160;  <a class="code" href="../../d3/dfa/class_instructions_1_1_misc_1_1_checkcast.xhtml#afb788c0933cb626287f6eea05d87f9fc">Checkcast</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a98b1a0a81a2e86856cc18ebac0249c0a">kCHECKCAST</a>) {}</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="../../d3/dfa/class_instructions_1_1_misc_1_1_checkcast.xhtml#adf1ef58116bd081ef0cf135d9595c305">   38</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d3/dfa/class_instructions_1_1_misc_1_1_checkcast.xhtml#adf1ef58116bd081ef0cf135d9595c305">toBytecode</a>(</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">auto</span> kpool_index = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; #&quot;</span> &lt;&lt; kpool_index &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">return</span> {kpool_index};</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  }</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="../../d3/dfa/class_instructions_1_1_misc_1_1_checkcast.xhtml#adb65c3d5d763b78bcd307308734911b7">   48</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d3/dfa/class_instructions_1_1_misc_1_1_checkcast.xhtml#adb65c3d5d763b78bcd307308734911b7">toBytecode_json</a>(</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    *ret = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  }</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d3/dfa/class_instructions_1_1_misc_1_1_checkcast.xhtml#a283fe16841ffd0f9a34a4f2872ea7367">execute</a>(</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;};</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="../../d6/df7/class_instructions_1_1_misc_1_1_dup.xhtml">   62</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d6/df7/class_instructions_1_1_misc_1_1_dup.xhtml">Dup</a> : <span class="keyword">public</span> <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a> {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="../../d6/df7/class_instructions_1_1_misc_1_1_dup.xhtml#a6ef666603527a57e5374c4901aa7426f">   64</a></span>&#160;  <a class="code" href="../../d6/df7/class_instructions_1_1_misc_1_1_dup.xhtml#a6ef666603527a57e5374c4901aa7426f">Dup</a>() : <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a1d7cfcb7e158c5ab5e3dc5e25cec27a4">kDUP</a>) {}</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d6/df7/class_instructions_1_1_misc_1_1_dup.xhtml#abfd93ef01b0353ca6e9498d8e59c07bb">execute</a>(</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;};</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="../../da/d11/class_instructions_1_1_misc_1_1_dup_x1.xhtml">   72</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../da/d11/class_instructions_1_1_misc_1_1_dup_x1.xhtml">DupX1</a> : <span class="keyword">public</span> <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a> {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="../../da/d11/class_instructions_1_1_misc_1_1_dup_x1.xhtml#afc7b25e9f064a294f0724d49f54bdd45">   74</a></span>&#160;  <a class="code" href="../../da/d11/class_instructions_1_1_misc_1_1_dup_x1.xhtml#afc7b25e9f064a294f0724d49f54bdd45">DupX1</a>() : <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a8772edd7fe05e3da65b33cc48f29e0e7">kDUP_X1</a>) {}</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../da/d11/class_instructions_1_1_misc_1_1_dup_x1.xhtml#a4c05fe2fa341ad18c149d6d9c0783379">execute</a>(</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;};</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="../../d1/d60/class_instructions_1_1_misc_1_1_dup_x2.xhtml">   82</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d1/d60/class_instructions_1_1_misc_1_1_dup_x2.xhtml">DupX2</a> : <span class="keyword">public</span> <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a> {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="../../d1/d60/class_instructions_1_1_misc_1_1_dup_x2.xhtml#a1d69a02e9f1b410ec966ec84093cc3b6">   84</a></span>&#160;  <a class="code" href="../../d1/d60/class_instructions_1_1_misc_1_1_dup_x2.xhtml#a1d69a02e9f1b410ec966ec84093cc3b6">DupX2</a>() : <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a17ec04e10d643fee76d6e8b7a57c57f2">kDUP_X2</a>) {}</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d1/d60/class_instructions_1_1_misc_1_1_dup_x2.xhtml#a841618512042ae88b878977fda2f457b">execute</a>(</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;};</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="../../d0/d1b/class_instructions_1_1_misc_1_1_dup2.xhtml">   92</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d0/d1b/class_instructions_1_1_misc_1_1_dup2.xhtml">Dup2</a> : <span class="keyword">public</span> <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a> {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="../../d0/d1b/class_instructions_1_1_misc_1_1_dup2.xhtml#af32f2d71f733db70803bf808b89894e3">   94</a></span>&#160;  <a class="code" href="../../d0/d1b/class_instructions_1_1_misc_1_1_dup2.xhtml#af32f2d71f733db70803bf808b89894e3">Dup2</a>() : <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a8cf0049d2364a846cf0d971791c8081d">kDUP2</a>) {}</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d0/d1b/class_instructions_1_1_misc_1_1_dup2.xhtml#a1fc0e76174c0999f06c4919e7c545e6f">execute</a>(</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;};</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="../../d9/db9/class_instructions_1_1_misc_1_1_dup2_x1.xhtml">  102</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d9/db9/class_instructions_1_1_misc_1_1_dup2_x1.xhtml">Dup2X1</a> : <span class="keyword">public</span> <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a> {</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="../../d9/db9/class_instructions_1_1_misc_1_1_dup2_x1.xhtml#a6269224fd639bbe623bde0bd73973e5e">  104</a></span>&#160;  <a class="code" href="../../d9/db9/class_instructions_1_1_misc_1_1_dup2_x1.xhtml#a6269224fd639bbe623bde0bd73973e5e">Dup2X1</a>() : <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37add0e2d2b0fd94d618544d3785e4789c9">kDUP2_X1</a>) {}</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d9/db9/class_instructions_1_1_misc_1_1_dup2_x1.xhtml#a97467624b3a974b5b715d85eb459f17e">execute</a>(</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;};</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="../../d7/d4f/class_instructions_1_1_misc_1_1_dup2_x2.xhtml">  112</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d7/d4f/class_instructions_1_1_misc_1_1_dup2_x2.xhtml">Dup2X2</a> : <span class="keyword">public</span> <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a> {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="../../d7/d4f/class_instructions_1_1_misc_1_1_dup2_x2.xhtml#a86111427805e1b397374f40eefacb785">  114</a></span>&#160;  <a class="code" href="../../d7/d4f/class_instructions_1_1_misc_1_1_dup2_x2.xhtml#a86111427805e1b397374f40eefacb785">Dup2X2</a>() : <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a498bbd76201e72ed18df253630473ae3">kDUP2_X2</a>) {}</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d7/d4f/class_instructions_1_1_misc_1_1_dup2_x2.xhtml#ac53f1082d9e057934fa82a54368fef6d">execute</a>(</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;};</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="../../d0/d9b/class_instructions_1_1_misc_1_1_get_field.xhtml">  122</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d0/d9b/class_instructions_1_1_misc_1_1_get_field.xhtml">GetField</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="../../d0/d9b/class_instructions_1_1_misc_1_1_get_field.xhtml#a5ff7d241b13bf08faba992805d756dff">  124</a></span>&#160;  <a class="code" href="../../d0/d9b/class_instructions_1_1_misc_1_1_get_field.xhtml#a5ff7d241b13bf08faba992805d756dff">GetField</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37af21a4a5368cddc1deb6e78e237651fd6">kGETFIELD</a>) {}</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="../../d0/d9b/class_instructions_1_1_misc_1_1_get_field.xhtml#a5d3d4b7ab5fcb33a0f803b11377346c6">  126</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d0/d9b/class_instructions_1_1_misc_1_1_get_field.xhtml#a5d3d4b7ab5fcb33a0f803b11377346c6">toBytecode</a>(</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keyword">auto</span> kpool_index = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; #&quot;</span> &lt;&lt; kpool_index &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">return</span> {kpool_index};</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno"><a class="line" href="../../d0/d9b/class_instructions_1_1_misc_1_1_get_field.xhtml#a1aa1a7927dd93bc2cb5534a9df202a7c">  136</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d0/d9b/class_instructions_1_1_misc_1_1_get_field.xhtml#a1aa1a7927dd93bc2cb5534a9df202a7c">toBytecode_json</a>(</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    *ret = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d0/d9b/class_instructions_1_1_misc_1_1_get_field.xhtml#a10ec159ab367f8f56eec5f42fc1edd21">execute</a>(</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;};</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="../../d3/de0/class_instructions_1_1_misc_1_1_get_static.xhtml">  150</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d3/de0/class_instructions_1_1_misc_1_1_get_static.xhtml">GetStatic</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="../../d3/de0/class_instructions_1_1_misc_1_1_get_static.xhtml#a6bfd349ca06dfe549933042f62737264">  152</a></span>&#160;  <a class="code" href="../../d3/de0/class_instructions_1_1_misc_1_1_get_static.xhtml#a6bfd349ca06dfe549933042f62737264">GetStatic</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37aa47901cf01978a914e0bf77365912777">kGETSTATIC</a>) {}</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="../../d3/de0/class_instructions_1_1_misc_1_1_get_static.xhtml#a37897a610883bf721cc1d8f74ea56933">  154</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d3/de0/class_instructions_1_1_misc_1_1_get_static.xhtml#a37897a610883bf721cc1d8f74ea56933">toBytecode</a>(</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">auto</span> kpool_index = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; #&quot;</span> &lt;&lt; kpool_index &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">return</span> {kpool_index};</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  }</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="../../d3/de0/class_instructions_1_1_misc_1_1_get_static.xhtml#a61fa526d0ac64fadb894c1d4d00ddded">  164</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d3/de0/class_instructions_1_1_misc_1_1_get_static.xhtml#a61fa526d0ac64fadb894c1d4d00ddded">toBytecode_json</a>(</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    *ret = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  }</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d3/de0/class_instructions_1_1_misc_1_1_get_static.xhtml#a4ab38dc44258caef6cb5b2ba99c21942">execute</a>(</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;};</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="../../d9/da0/class_instructions_1_1_misc_1_1_goto.xhtml">  178</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d9/da0/class_instructions_1_1_misc_1_1_goto.xhtml">Goto</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00180"></a><span class="lineno"><a class="line" href="../../d9/da0/class_instructions_1_1_misc_1_1_goto.xhtml#a1ac6fd8d8ebad347a5b77f042af19356">  180</a></span>&#160;  <a class="code" href="../../d9/da0/class_instructions_1_1_misc_1_1_goto.xhtml#a1ac6fd8d8ebad347a5b77f042af19356">Goto</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a97a9545f8ccb2d4419a262e75ce4ce4f">kGOTO</a>) {}</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno"><a class="line" href="../../d9/da0/class_instructions_1_1_misc_1_1_goto.xhtml#a4febcdf064509f9905e401f3b21f18ae">  182</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d9/da0/class_instructions_1_1_misc_1_1_goto.xhtml#a4febcdf064509f9905e401f3b21f18ae">toBytecode</a>(</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    int16_t offset = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;          &lt;&lt; (static_cast&lt;int16_t&gt;(*pc) + offset) &lt;&lt; <span class="stringliteral">&quot; (&quot;</span> &lt;&lt; std::showpos</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;          &lt;&lt; offset &lt;&lt; <span class="stringliteral">&quot;)\n&quot;</span>;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno"><a class="line" href="../../d9/da0/class_instructions_1_1_misc_1_1_goto.xhtml#afa9d244746b52683a1289bc43146fbc1">  194</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d9/da0/class_instructions_1_1_misc_1_1_goto.xhtml#afa9d244746b52683a1289bc43146fbc1">toBytecode_json</a>(</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    int16_t offset = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">return</span> {<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(offset)};</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  }</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d9/da0/class_instructions_1_1_misc_1_1_goto.xhtml#aac1e20cf82648372ae73c48bd4a0925c">execute</a>(</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;};</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno"><a class="line" href="../../d5/d81/class_instructions_1_1_misc_1_1_goto_wide.xhtml">  208</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d5/d81/class_instructions_1_1_misc_1_1_goto_wide.xhtml">GotoWide</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00210"></a><span class="lineno"><a class="line" href="../../d5/d81/class_instructions_1_1_misc_1_1_goto_wide.xhtml#a13a542415b87f575fa38b201b9db1425">  210</a></span>&#160;  <a class="code" href="../../d5/d81/class_instructions_1_1_misc_1_1_goto_wide.xhtml#a13a542415b87f575fa38b201b9db1425">GotoWide</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a998f3a9af577307f5fd5a6786097427f">kGOTO_W</a>) {}</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno"><a class="line" href="../../d5/d81/class_instructions_1_1_misc_1_1_goto_wide.xhtml#ac9fcbfd285240eac5d8942298babaef5">  212</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d5/d81/class_instructions_1_1_misc_1_1_goto_wide.xhtml#ac9fcbfd285240eac5d8942298babaef5">toBytecode</a>(</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keyword">auto</span> offset = (*++*code_it &lt;&lt; 24) | (*++*code_it &lt;&lt; 16) |</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                  (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; *pc + offset &lt;&lt; <span class="stringliteral">&quot; (&quot;</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;          &lt;&lt; std::showpos &lt;&lt; offset &lt;&lt; <span class="stringliteral">&quot;)\n&quot;</span>;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    *delta_code = 4;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  }</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; </div>
<div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="../../d5/d81/class_instructions_1_1_misc_1_1_goto_wide.xhtml#af07c3295d6731e79c52e2a458efd0c4a">  224</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d5/d81/class_instructions_1_1_misc_1_1_goto_wide.xhtml#af07c3295d6731e79c52e2a458efd0c4a">toBytecode_json</a>(</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keyword">auto</span> offset = (*++*code_it &lt;&lt; 24) | (*++*code_it &lt;&lt; 16) |</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                  (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    *delta_code = 4;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordflow">return</span> {<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(offset)};</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d5/d81/class_instructions_1_1_misc_1_1_goto_wide.xhtml#ac0b894b1ea89f9bee8912ccf08bf542f">execute</a>(</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;};</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160; </div>
<div class="line"><a name="l00239"></a><span class="lineno"><a class="line" href="../../d1/de6/class_instructions_1_1_misc_1_1_instance_of.xhtml">  239</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d1/de6/class_instructions_1_1_misc_1_1_instance_of.xhtml">InstanceOf</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="../../d1/de6/class_instructions_1_1_misc_1_1_instance_of.xhtml#a2efb5feea4c3c4ac1140fd4dac47b14f">  241</a></span>&#160;  <a class="code" href="../../d1/de6/class_instructions_1_1_misc_1_1_instance_of.xhtml#a2efb5feea4c3c4ac1140fd4dac47b14f">InstanceOf</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37aa17b6567b452ab7bb9b409830a7eddfe">kINSTANCEOF</a>) {}</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno"><a class="line" href="../../d1/de6/class_instructions_1_1_misc_1_1_instance_of.xhtml#a94cc9dbc37f21634cb8e89869495ebfe">  243</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d1/de6/class_instructions_1_1_misc_1_1_instance_of.xhtml#a94cc9dbc37f21634cb8e89869495ebfe">toBytecode</a>(</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">auto</span> kpool_index = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; #&quot;</span> &lt;&lt; kpool_index &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">return</span> {kpool_index};</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  }</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno"><a class="line" href="../../d1/de6/class_instructions_1_1_misc_1_1_instance_of.xhtml#af59ee6a7a0fe25ed8e2c205d0cdbe033">  253</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d1/de6/class_instructions_1_1_misc_1_1_instance_of.xhtml#af59ee6a7a0fe25ed8e2c205d0cdbe033">toBytecode_json</a>(</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    *ret = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160; </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d1/de6/class_instructions_1_1_misc_1_1_instance_of.xhtml#ade1f78f37fa197b05355825ae7997302">execute</a>(</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;};</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; </div>
<div class="line"><a name="l00267"></a><span class="lineno"><a class="line" href="../../d6/ddc/class_instructions_1_1_misc_1_1_lookup_switch.xhtml">  267</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d6/ddc/class_instructions_1_1_misc_1_1_lookup_switch.xhtml">LookupSwitch</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00269"></a><span class="lineno"><a class="line" href="../../d6/ddc/class_instructions_1_1_misc_1_1_lookup_switch.xhtml#a3b31bd3ffac2749cfceb95a9b3fffa93">  269</a></span>&#160;  <a class="code" href="../../d6/ddc/class_instructions_1_1_misc_1_1_lookup_switch.xhtml#a3b31bd3ffac2749cfceb95a9b3fffa93">LookupSwitch</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a25ffbcc1ce137b36231243ea258ea29f">kLOOKUPSWITCH</a>) {}</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno"><a class="line" href="../../d6/ddc/class_instructions_1_1_misc_1_1_lookup_switch.xhtml#a047938871f72f8398828d2c401a667e2">  271</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d6/ddc/class_instructions_1_1_misc_1_1_lookup_switch.xhtml#a047938871f72f8398828d2c401a667e2">toBytecode</a>(</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    ++*code_it;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keyword">auto</span> getAlinhamento = [](<span class="keywordtype">int</span> a) -&gt; <span class="keywordtype">int</span> { <span class="keywordflow">return</span> a ? (4 - a) : 0; };</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keyword">auto</span> alinhamento = (*pc + 1) % 4;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    *code_it += getAlinhamento(alinhamento) - 1;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keyword">auto</span> getU4 = [](std::vector&lt;Utils::Types::u1&gt;::iterator *code_it) -&gt; <span class="keywordtype">int</span> {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;      <span class="keyword">auto</span> offset = (*++*code_it &lt;&lt; 24) | (*++*code_it &lt;&lt; 16) |</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                    (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160; </div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;      <span class="keywordflow">return</span> offset;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    };</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160; </div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keyword">auto</span> default_bytes = getU4(code_it);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keyword">auto</span> npairs = getU4(code_it);</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    (*ss) &lt;&lt; npairs &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160; </div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keyword">auto</span> oldFlags = ss-&gt;flags();</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; npairs; ++i) {</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;      <span class="keyword">auto</span> match = static_cast&lt;int&gt;(getU4(code_it));</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;      <span class="keyword">auto</span> offset = static_cast&lt;int&gt;(getU4(code_it));</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160; </div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;      (*ss) &lt;&lt; std::string(delta_tab, <span class="charliteral">&#39;\t&#39;</span>) &lt;&lt; match &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; (*pc + offset)</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; (&quot;</span>;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;      (*ss) &lt;&lt; std::showpos &lt;&lt; offset &lt;&lt; <span class="stringliteral">&quot;)\n&quot;</span>;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;      ss-&gt;flags(oldFlags);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    }</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    (*ss) &lt;&lt; std::string(delta_tab, <span class="charliteral">&#39;\t&#39;</span>)</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;          &lt;&lt; <span class="stringliteral">&quot;default: &quot;</span> &lt;&lt; (*pc + default_bytes) &lt;&lt; <span class="stringliteral">&quot; (&quot;</span> &lt;&lt; std::showpos</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;          &lt;&lt; default_bytes &lt;&lt; <span class="stringliteral">&quot;)&quot;</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;          &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    *delta_code = getAlinhamento(alinhamento) + 4 + 4 + 8 * npairs;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  }</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160; </div>
<div class="line"><a name="l00312"></a><span class="lineno"><a class="line" href="../../d6/ddc/class_instructions_1_1_misc_1_1_lookup_switch.xhtml#ae5d37274cfc43d30131adfd202e58b39">  312</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d6/ddc/class_instructions_1_1_misc_1_1_lookup_switch.xhtml#ae5d37274cfc43d30131adfd202e58b39">toBytecode_json</a>(</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    ++*code_it;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    std::vector&lt;std::string&gt; args;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keyword">auto</span> getAlinhamento = [](<span class="keywordtype">int</span> a) -&gt; <span class="keywordtype">int</span> { <span class="keywordflow">return</span> a ? (4 - a) : 0; };</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160; </div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keyword">auto</span> alinhamento = (*pc + 1) % 4;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    *code_it += getAlinhamento(alinhamento) - 1;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    args.push_back(<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(alinhamento - 1));</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160; </div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keyword">auto</span> getU4 = [](std::vector&lt;Utils::Types::u1&gt;::iterator *code_it) -&gt; <span class="keywordtype">int</span> {</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;      <span class="keyword">auto</span> offset = (*++*code_it &lt;&lt; 24) | (*++*code_it &lt;&lt; 16) |</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                    (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160; </div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;      <span class="keywordflow">return</span> offset;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    };</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160; </div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="keyword">auto</span> default_bytes = getU4(code_it);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    args.push_back(<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(default_bytes));</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keyword">auto</span> npairs = getU4(code_it);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    args.push_back(<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(npairs));</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    std::vector&lt;int&gt; match_offset_pairs;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; npairs; ++i) {</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;      <span class="keyword">auto</span> match = static_cast&lt;int&gt;(getU4(code_it));</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;      <span class="keyword">auto</span> offset = static_cast&lt;int&gt;(getU4(code_it));</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160; </div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;      args.push_back(<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(match));</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;      args.push_back(<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(offset));</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    }</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    *delta_code = getAlinhamento(alinhamento) + 4 + 4 + 8 * npairs;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160; </div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keywordflow">return</span> args;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  }</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d6/ddc/class_instructions_1_1_misc_1_1_lookup_switch.xhtml#aed81b134d541b77291b437697df98a97">execute</a>(</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;};</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160; </div>
<div class="line"><a name="l00353"></a><span class="lineno"><a class="line" href="../../df/de0/class_instructions_1_1_misc_1_1_multi_dim_array.xhtml">  353</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../df/de0/class_instructions_1_1_misc_1_1_multi_dim_array.xhtml">MultiDimArray</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00355"></a><span class="lineno"><a class="line" href="../../df/de0/class_instructions_1_1_misc_1_1_multi_dim_array.xhtml#a5fc62eed001bf9eb65e3cdb8e1a0b368">  355</a></span>&#160;  <a class="code" href="../../df/de0/class_instructions_1_1_misc_1_1_multi_dim_array.xhtml#a5fc62eed001bf9eb65e3cdb8e1a0b368">MultiDimArray</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a51f762183f071662d5a13a4855fe5bd1">kMULTIANEWARRAY</a>) {}</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160; </div>
<div class="line"><a name="l00357"></a><span class="lineno"><a class="line" href="../../df/de0/class_instructions_1_1_misc_1_1_multi_dim_array.xhtml#af1d3f9f5d388e19b807ac12f9f2aa87c">  357</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../df/de0/class_instructions_1_1_misc_1_1_multi_dim_array.xhtml#af1d3f9f5d388e19b807ac12f9f2aa87c">toBytecode</a>(</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="keyword">auto</span> kpool_index = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> dims = *++*code_it;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; #&quot;</span> &lt;&lt; kpool_index &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    *delta_code = 3;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keywordflow">return</span> {kpool_index, <span class="keywordtype">int</span>{dims}};</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  }</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160; </div>
<div class="line"><a name="l00368"></a><span class="lineno"><a class="line" href="../../df/de0/class_instructions_1_1_misc_1_1_multi_dim_array.xhtml#a4b482239676e8e7d07f32b5983045815">  368</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../df/de0/class_instructions_1_1_misc_1_1_multi_dim_array.xhtml#a4b482239676e8e7d07f32b5983045815">toBytecode_json</a>(</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    *ret = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    *delta_code = 3;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="keywordflow">return</span> {<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(+(*++*code_it))};</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  }</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160; </div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../df/de0/class_instructions_1_1_misc_1_1_multi_dim_array.xhtml#a30d0fb1639984d064c173f3c7d44d2cb">execute</a>(</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;};</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160; </div>
<div class="line"><a name="l00382"></a><span class="lineno"><a class="line" href="../../d2/da4/class_instructions_1_1_misc_1_1_new.xhtml">  382</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d2/da4/class_instructions_1_1_misc_1_1_new.xhtml">New</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00384"></a><span class="lineno"><a class="line" href="../../d2/da4/class_instructions_1_1_misc_1_1_new.xhtml#abacde8c6f2b5baeeeee5ad991483b767">  384</a></span>&#160;  <a class="code" href="../../d2/da4/class_instructions_1_1_misc_1_1_new.xhtml#abacde8c6f2b5baeeeee5ad991483b767">New</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a37185c1397d756415d442a6c157e718f">kNEW</a>) {}</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160; </div>
<div class="line"><a name="l00386"></a><span class="lineno"><a class="line" href="../../d2/da4/class_instructions_1_1_misc_1_1_new.xhtml#a2087103af39f64239fc3154507eb7276">  386</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d2/da4/class_instructions_1_1_misc_1_1_new.xhtml#a2087103af39f64239fc3154507eb7276">toBytecode</a>(</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="keyword">auto</span> kpool_index = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; #&quot;</span> &lt;&lt; kpool_index &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keywordflow">return</span> {kpool_index};</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;  }</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160; </div>
<div class="line"><a name="l00396"></a><span class="lineno"><a class="line" href="../../d2/da4/class_instructions_1_1_misc_1_1_new.xhtml#a4c020df32669dbff250b46ae3677e78e">  396</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d2/da4/class_instructions_1_1_misc_1_1_new.xhtml#a4c020df32669dbff250b46ae3677e78e">toBytecode_json</a>(</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    *ret = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;  }</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160; </div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d2/da4/class_instructions_1_1_misc_1_1_new.xhtml#afd866845b57395d12c48c49aa864b126">execute</a>(</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;};</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160; </div>
<div class="line"><a name="l00410"></a><span class="lineno"><a class="line" href="../../d7/d61/class_instructions_1_1_misc_1_1_new_array.xhtml">  410</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d7/d61/class_instructions_1_1_misc_1_1_new_array.xhtml">NewArray</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00412"></a><span class="lineno"><a class="line" href="../../d7/d61/class_instructions_1_1_misc_1_1_new_array.xhtml#ae1bffd543346d857b9c2b895f4048d27">  412</a></span>&#160;  <a class="code" href="../../d7/d61/class_instructions_1_1_misc_1_1_new_array.xhtml#ae1bffd543346d857b9c2b895f4048d27">NewArray</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a8f4d972a54b57abfcca63ab7ffd3f34a">kNEWARRAY</a>) {}</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160; </div>
<div class="line"><a name="l00414"></a><span class="lineno"><a class="line" href="../../d7/d61/class_instructions_1_1_misc_1_1_new_array.xhtml#a77bdb80dc8b0c27c60e53988ae4be873">  414</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d7/d61/class_instructions_1_1_misc_1_1_new_array.xhtml#a77bdb80dc8b0c27c60e53988ae4be873">toBytecode</a>(</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> atype = *++*code_it;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; atype &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;          &lt;&lt; this-&gt;getType(atype);</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    *delta_code = 1;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;  }</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160; </div>
<div class="line"><a name="l00425"></a><span class="lineno"><a class="line" href="../../d7/d61/class_instructions_1_1_misc_1_1_new_array.xhtml#a14e7dc289150cc0e854fda9ec9b78a7d">  425</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d7/d61/class_instructions_1_1_misc_1_1_new_array.xhtml#a14e7dc289150cc0e854fda9ec9b78a7d">toBytecode_json</a>(</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> atype = *++*code_it;</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    *delta_code = 1;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordflow">return</span> {<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(<span class="keywordtype">int</span>{atype})};</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;  }</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160; </div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d7/d61/class_instructions_1_1_misc_1_1_new_array.xhtml#af287982b8dbc8e492323f4d7cd580936">execute</a>(</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160; </div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160; <span class="keyword">private</span>:</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;  std::string getType(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;<a class="code" href="../../db/d0a/classstd_1_1conditional_1_1type.xhtml">type</a>) {</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="../../db/d0a/classstd_1_1conditional_1_1type.xhtml">type</a>) {</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;      <span class="keywordflow">case</span> kT_BOOLEAN:</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;(boolean)\n&quot;</span>;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;      <span class="keywordflow">case</span> kT_CHAR:</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;(char)\n&quot;</span>;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;      <span class="keywordflow">case</span> kT_FLOAT:</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;(float)\n&quot;</span>;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;      <span class="keywordflow">case</span> kT_DOUBLE:</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;(double)\n&quot;</span>;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;      <span class="keywordflow">case</span> kT_BYTE:</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;(byte)\n&quot;</span>;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;      <span class="keywordflow">case</span> kT_SHORT:</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;(short)\n&quot;</span>;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;      <span class="keywordflow">case</span> kT_INT:</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;(int)\n&quot;</span>;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;      <span class="keywordflow">case</span> kT_LONG:</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;(long)\n&quot;</span>;</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    }</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;\0&quot;</span>;</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;  }</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160; </div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;  <span class="keyword">enum</span> Types {</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    kT_BOOLEAN = 4,</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    kT_CHAR = 5,</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    kT_FLOAT = 6,</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    kT_DOUBLE = 7,</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    kT_BYTE = 8,</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    kT_SHORT = 9,</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    kT_INT = 10,</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    kT_LONG = 11</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;  };</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;};</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160; </div>
<div class="line"><a name="l00473"></a><span class="lineno"><a class="line" href="../../d6/dc9/class_instructions_1_1_misc_1_1_nop.xhtml">  473</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d6/dc9/class_instructions_1_1_misc_1_1_nop.xhtml">Nop</a> : <span class="keyword">public</span> <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a> {</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00475"></a><span class="lineno"><a class="line" href="../../d6/dc9/class_instructions_1_1_misc_1_1_nop.xhtml#a00a831eab90765dfde9646a707389229">  475</a></span>&#160;  <a class="code" href="../../d6/dc9/class_instructions_1_1_misc_1_1_nop.xhtml#a00a831eab90765dfde9646a707389229">Nop</a>() : <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a95be7dc9a1b2a1fc202d2e853042fe86">kNOP</a>) {}</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160; </div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d6/dc9/class_instructions_1_1_misc_1_1_nop.xhtml#aa976b4e6803b52e6fd72d9fafef984a0">execute</a>(</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;};</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160; </div>
<div class="line"><a name="l00483"></a><span class="lineno"><a class="line" href="../../d1/dff/class_instructions_1_1_misc_1_1_pop.xhtml">  483</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d1/dff/class_instructions_1_1_misc_1_1_pop.xhtml">Pop</a> : <span class="keyword">public</span> <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a> {</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00485"></a><span class="lineno"><a class="line" href="../../d1/dff/class_instructions_1_1_misc_1_1_pop.xhtml#a6536965b1aa83de7377c63322e9d5eb0">  485</a></span>&#160;  <a class="code" href="../../d1/dff/class_instructions_1_1_misc_1_1_pop.xhtml#a6536965b1aa83de7377c63322e9d5eb0">Pop</a>() : <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37ad3b1c109b7180f2a452a67fd89f23fc6">kPOP</a>) {}</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160; </div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d1/dff/class_instructions_1_1_misc_1_1_pop.xhtml#a77f62439856dbebb46963d093f568f53">execute</a>(</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;};</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160; </div>
<div class="line"><a name="l00493"></a><span class="lineno"><a class="line" href="../../df/d6d/class_instructions_1_1_misc_1_1_pop2.xhtml">  493</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../df/d6d/class_instructions_1_1_misc_1_1_pop2.xhtml">Pop2</a> : <span class="keyword">public</span> <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a> {</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00495"></a><span class="lineno"><a class="line" href="../../df/d6d/class_instructions_1_1_misc_1_1_pop2.xhtml#a0eeb5a3c0166d9299f4fbe4096d69118">  495</a></span>&#160;  <a class="code" href="../../df/d6d/class_instructions_1_1_misc_1_1_pop2.xhtml#a0eeb5a3c0166d9299f4fbe4096d69118">Pop2</a>() : <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a02fe2c805b438ed4468f53c3f9e28dee">kPOP2</a>) {}</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160; </div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../df/d6d/class_instructions_1_1_misc_1_1_pop2.xhtml#a0a0c4abd00515b9f76b77d5023759de4">execute</a>(</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;};</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160; </div>
<div class="line"><a name="l00503"></a><span class="lineno"><a class="line" href="../../d0/d83/class_instructions_1_1_misc_1_1_put_field.xhtml">  503</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d0/d83/class_instructions_1_1_misc_1_1_put_field.xhtml">PutField</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00505"></a><span class="lineno"><a class="line" href="../../d0/d83/class_instructions_1_1_misc_1_1_put_field.xhtml#a741d7d16258f378747878aa8bef2c6d5">  505</a></span>&#160;  <a class="code" href="../../d0/d83/class_instructions_1_1_misc_1_1_put_field.xhtml#a741d7d16258f378747878aa8bef2c6d5">PutField</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a70599b8c97fc5e4a73b854f0377a7e10">kPUTFIELD</a>) {}</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160; </div>
<div class="line"><a name="l00507"></a><span class="lineno"><a class="line" href="../../d0/d83/class_instructions_1_1_misc_1_1_put_field.xhtml#a27ef5fb941e0533d5bb4d1e1bea94de3">  507</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d0/d83/class_instructions_1_1_misc_1_1_put_field.xhtml#a27ef5fb941e0533d5bb4d1e1bea94de3">toBytecode</a>(</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="keyword">auto</span> kpool_index = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; #&quot;</span> &lt;&lt; kpool_index &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="keywordflow">return</span> {kpool_index};</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;  }</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160; </div>
<div class="line"><a name="l00517"></a><span class="lineno"><a class="line" href="../../d0/d83/class_instructions_1_1_misc_1_1_put_field.xhtml#a00b7ae6d0a1873a81c6a489780f6975e">  517</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d0/d83/class_instructions_1_1_misc_1_1_put_field.xhtml#a00b7ae6d0a1873a81c6a489780f6975e">toBytecode_json</a>(</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    *ret = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;  }</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160; </div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d0/d83/class_instructions_1_1_misc_1_1_put_field.xhtml#a2a1478ef16945038fab16fa9aaabbb24">execute</a>(</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;};</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160; </div>
<div class="line"><a name="l00531"></a><span class="lineno"><a class="line" href="../../d5/d99/class_instructions_1_1_misc_1_1_put_static.xhtml">  531</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d5/d99/class_instructions_1_1_misc_1_1_put_static.xhtml">PutStatic</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00533"></a><span class="lineno"><a class="line" href="../../d5/d99/class_instructions_1_1_misc_1_1_put_static.xhtml#ae9e8d8d1ab019576a6bad628249cdb2b">  533</a></span>&#160;  <a class="code" href="../../d5/d99/class_instructions_1_1_misc_1_1_put_static.xhtml#ae9e8d8d1ab019576a6bad628249cdb2b">PutStatic</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37abc9f57df3c6d8846b493a29eb3b48827">kPUTSTATIC</a>) {}</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160; </div>
<div class="line"><a name="l00535"></a><span class="lineno"><a class="line" href="../../d5/d99/class_instructions_1_1_misc_1_1_put_static.xhtml#aa71832a79fc8385a91576cbe2335a398">  535</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d5/d99/class_instructions_1_1_misc_1_1_put_static.xhtml#aa71832a79fc8385a91576cbe2335a398">toBytecode</a>(</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="keyword">auto</span> kpool_index = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; #&quot;</span> &lt;&lt; kpool_index &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="keywordflow">return</span> {kpool_index};</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;  }</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160; </div>
<div class="line"><a name="l00545"></a><span class="lineno"><a class="line" href="../../d5/d99/class_instructions_1_1_misc_1_1_put_static.xhtml#ae2f10580c953c9d4adccb494e75a7f22">  545</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d5/d99/class_instructions_1_1_misc_1_1_put_static.xhtml#ae2f10580c953c9d4adccb494e75a7f22">toBytecode_json</a>(</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    *ret = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    *delta_code = 2;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;  }</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160; </div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d5/d99/class_instructions_1_1_misc_1_1_put_static.xhtml#a7a2ed1776d25829ec667fb3687bba57f">execute</a>(</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;};</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160; </div>
<div class="line"><a name="l00559"></a><span class="lineno"><a class="line" href="../../db/d2e/class_instructions_1_1_misc_1_1_ret.xhtml">  559</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../db/d2e/class_instructions_1_1_misc_1_1_ret.xhtml">Ret</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00561"></a><span class="lineno"><a class="line" href="../../db/d2e/class_instructions_1_1_misc_1_1_ret.xhtml#aad8fb6eb5a83d9c6a76d94aa1e3c602b">  561</a></span>&#160;  <a class="code" href="../../db/d2e/class_instructions_1_1_misc_1_1_ret.xhtml#aad8fb6eb5a83d9c6a76d94aa1e3c602b">Ret</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a8327b5613ed5937de7e35d62b7bdbd82">kRET</a>) {}</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160; </div>
<div class="line"><a name="l00563"></a><span class="lineno"><a class="line" href="../../db/d2e/class_instructions_1_1_misc_1_1_ret.xhtml#a3810b2bc66284d325517b41ae4ee3fb6">  563</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../db/d2e/class_instructions_1_1_misc_1_1_ret.xhtml#a3810b2bc66284d325517b41ae4ee3fb6">toBytecode</a>(</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <span class="keywordflow">if</span> (wide) {</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;      int16_t index = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;      (*ss) &lt;&lt; index;</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;      *delta_code = 2;</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> index = *++*code_it;</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;      (*ss) &lt;&lt; <span class="keywordtype">int</span>{index};</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;      *delta_code = 1;</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    }</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    (*ss) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;  }</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160; </div>
<div class="line"><a name="l00581"></a><span class="lineno"><a class="line" href="../../db/d2e/class_instructions_1_1_misc_1_1_ret.xhtml#a8eba3c872a2e267dfcba90a10531879c">  581</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../db/d2e/class_instructions_1_1_misc_1_1_ret.xhtml#a8eba3c872a2e267dfcba90a10531879c">toBytecode_json</a>(</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    <span class="keywordflow">if</span> (wide) {</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;      int16_t index = (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;      *delta_code = 2;</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;      <span class="keywordflow">return</span> {<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(index)};</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    }</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> index = *++*code_it;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    *delta_code = 1;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="keywordflow">return</span> {<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(<span class="keywordtype">int</span>{index})};</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;  }</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160; </div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../db/d2e/class_instructions_1_1_misc_1_1_ret.xhtml#adb5406161f7401e016fae244e5d1a2d4">execute</a>(</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;};</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160; </div>
<div class="line"><a name="l00600"></a><span class="lineno"><a class="line" href="../../d6/d05/class_instructions_1_1_misc_1_1_return.xhtml">  600</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d6/d05/class_instructions_1_1_misc_1_1_return.xhtml">Return</a> : <span class="keyword">public</span> <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a> {</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00602"></a><span class="lineno"><a class="line" href="../../d6/d05/class_instructions_1_1_misc_1_1_return.xhtml#a491a4806a7d34cde786802851349c945">  602</a></span>&#160;  <a class="code" href="../../d6/d05/class_instructions_1_1_misc_1_1_return.xhtml#a491a4806a7d34cde786802851349c945">Return</a>() : <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a3d73d5a2c903ea3cff6e823a888b1ae6">kRETURN</a>) {}</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160; </div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d6/d05/class_instructions_1_1_misc_1_1_return.xhtml#ac876b4c346edb9676530c57908e21fa2">execute</a>(</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;};</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160; </div>
<div class="line"><a name="l00610"></a><span class="lineno"><a class="line" href="../../da/df5/class_instructions_1_1_misc_1_1_swap.xhtml">  610</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../da/df5/class_instructions_1_1_misc_1_1_swap.xhtml">Swap</a> : <span class="keyword">public</span> <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a> {</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00612"></a><span class="lineno"><a class="line" href="../../da/df5/class_instructions_1_1_misc_1_1_swap.xhtml#a78ad606bfb53bea030e6ff8e4ee7a343">  612</a></span>&#160;  <a class="code" href="../../da/df5/class_instructions_1_1_misc_1_1_swap.xhtml#a78ad606bfb53bea030e6ff8e4ee7a343">Swap</a>() : <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a4a1703c0266fcb3407149b44a355e946">kSWAP</a>) {}</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160; </div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../da/df5/class_instructions_1_1_misc_1_1_swap.xhtml#ad0e882e25bb19a4650df492f7f8787e4">execute</a>(</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;};</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160; </div>
<div class="line"><a name="l00620"></a><span class="lineno"><a class="line" href="../../d6/dbf/class_instructions_1_1_misc_1_1_table_switch.xhtml">  620</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d6/dbf/class_instructions_1_1_misc_1_1_table_switch.xhtml">TableSwitch</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00622"></a><span class="lineno"><a class="line" href="../../d6/dbf/class_instructions_1_1_misc_1_1_table_switch.xhtml#a67595104cb09cdbdd96402dd53eef3e5">  622</a></span>&#160;  <a class="code" href="../../d6/dbf/class_instructions_1_1_misc_1_1_table_switch.xhtml#a67595104cb09cdbdd96402dd53eef3e5">TableSwitch</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37adba31a6dcc2689621e2414594252a7fd">kTABLESWITCH</a>) {}</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160; </div>
<div class="line"><a name="l00624"></a><span class="lineno"><a class="line" href="../../d6/dbf/class_instructions_1_1_misc_1_1_table_switch.xhtml#af5e621bdaf4696c9e8eae34bb619edd3">  624</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d6/dbf/class_instructions_1_1_misc_1_1_table_switch.xhtml#af5e621bdaf4696c9e8eae34bb619edd3">toBytecode</a>(</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    ++*code_it;</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <span class="keyword">auto</span> getAlinhamento = [](<span class="keywordtype">int</span> a) -&gt; <span class="keywordtype">int</span> { <span class="keywordflow">return</span> a ? (4 - a) : 0; };</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160; </div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="keyword">auto</span> alinhamento = (*pc + 1) % 4;</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    *code_it += getAlinhamento(alinhamento) - 1;</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160; </div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="keyword">auto</span> getU4 = [](std::vector&lt;Utils::Types::u1&gt;::iterator *code_it) -&gt; <span class="keywordtype">int</span> {</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;      <span class="keyword">auto</span> offset = (*++*code_it &lt;&lt; 24) | (*++*code_it &lt;&lt; 16) |</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                    (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160; </div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;      <span class="keywordflow">return</span> offset;</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    };</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160; </div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    <span class="keyword">auto</span> default_bytes = getU4(code_it);</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <span class="keyword">auto</span> low = getU4(code_it);</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <span class="keyword">auto</span> high = getU4(code_it);</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keyword">auto</span> qtd_entries = high - low + 1;</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    (*ss) &lt;&lt; low &lt;&lt; <span class="stringliteral">&quot; to &quot;</span> &lt;&lt; high &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    <span class="keyword">auto</span> oldFlags = ss-&gt;flags();</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = low; i &lt; high + 1; ++i) {</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;      <span class="keyword">auto</span> offset = static_cast&lt;int&gt;(getU4(code_it));</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;      (*ss) &lt;&lt; std::string(delta_tab, <span class="charliteral">&#39;\t&#39;</span>) &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; (*pc + offset)</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; (&quot;</span>;</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;      (*ss) &lt;&lt; std::showpos &lt;&lt; offset &lt;&lt; <span class="stringliteral">&quot;)\n&quot;</span>;</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;      ss-&gt;flags(oldFlags);</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    }</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    (*ss) &lt;&lt; std::string(delta_tab, <span class="charliteral">&#39;\t&#39;</span>)</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;          &lt;&lt; <span class="stringliteral">&quot;default: &quot;</span> &lt;&lt; (*pc + default_bytes) &lt;&lt; <span class="stringliteral">&quot; (&quot;</span> &lt;&lt; std::showpos</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;          &lt;&lt; default_bytes &lt;&lt; <span class="stringliteral">&quot;)&quot;</span></div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;          &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    *delta_code = getAlinhamento(alinhamento) + 4 + 4 + 4 + 4 * qtd_entries;</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;  }</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160; </div>
<div class="line"><a name="l00663"></a><span class="lineno"><a class="line" href="../../d6/dbf/class_instructions_1_1_misc_1_1_table_switch.xhtml#a4036d40cc38477a5f0c6996b82e5d31c">  663</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d6/dbf/class_instructions_1_1_misc_1_1_table_switch.xhtml#a4036d40cc38477a5f0c6996b82e5d31c">toBytecode_json</a>(</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    ++*code_it;</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    std::vector&lt;std::string&gt; args;</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <span class="keyword">auto</span> getAlinhamento = [](<span class="keywordtype">int</span> a) -&gt; <span class="keywordtype">int</span> { <span class="keywordflow">return</span> a ? (4 - a) : 0; };</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160; </div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    <span class="keyword">auto</span> alinhamento = (*pc + 1) % 4;</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    *code_it += getAlinhamento(alinhamento) - 1;</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    args.push_back(<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(alinhamento - 1));</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160; </div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <span class="keyword">auto</span> getU4 = [](std::vector&lt;Utils::Types::u1&gt;::iterator *code_it) -&gt; <span class="keywordtype">int</span> {</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;      <span class="keyword">auto</span> offset = (*++*code_it &lt;&lt; 24) | (*++*code_it &lt;&lt; 16) |</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                    (*++*code_it &lt;&lt; 8) | *++*code_it;</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160; </div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;      <span class="keywordflow">return</span> offset;</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    };</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160; </div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="keyword">auto</span> default_bytes = getU4(code_it);</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    args.push_back(<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(default_bytes));</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    <span class="keyword">auto</span> low = getU4(code_it);</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    args.push_back(<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(low));</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    <span class="keyword">auto</span> high = getU4(code_it);</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    args.push_back(<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(high));</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <span class="keyword">auto</span> qtd_entries = high - low + 1;</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160; </div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = low; i &lt; high + 1; ++i) {</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;      <span class="keyword">auto</span> offset = static_cast&lt;int&gt;(getU4(code_it));</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;      args.push_back(<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(offset));</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    }</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    *delta_code = getAlinhamento(alinhamento) + 4 + 4 + 4 + 4 * qtd_entries;</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160; </div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="keywordflow">return</span> args;</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;  }</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160; </div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d6/dbf/class_instructions_1_1_misc_1_1_table_switch.xhtml#a868c6e38d022950005b2a23e07b38fb1">execute</a>(</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;};</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160; </div>
<div class="line"><a name="l00707"></a><span class="lineno"><a class="line" href="../../dd/d79/class_instructions_1_1_misc_1_1_wide.xhtml">  707</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../dd/d79/class_instructions_1_1_misc_1_1_wide.xhtml">Wide</a> : <span class="keyword">public</span> <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a> {</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00709"></a><span class="lineno"><a class="line" href="../../dd/d79/class_instructions_1_1_misc_1_1_wide.xhtml#a1f56e32f08990e869e1931d4353e6ba0">  709</a></span>&#160;  <a class="code" href="../../dd/d79/class_instructions_1_1_misc_1_1_wide.xhtml#a1f56e32f08990e869e1931d4353e6ba0">Wide</a>() : <a class="code" href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">BaseMisc</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37afea463938417a05670845b5a72a3a86f">kWIDE</a>) {}</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160; </div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../dd/d79/class_instructions_1_1_misc_1_1_wide.xhtml#a0e689b9909f295dcb3c3288a2862fc98">execute</a>(</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;};</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;}  <span class="comment">// namespace Misc</span></div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;}  <span class="comment">// namespace Instructions</span></div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160; </div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;<span class="preprocessor">#endif  // INCLUDE_INSTRUCTIONS_INSTRUCTION_SET_MISC_H_</span></div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_return_xhtml"><div class="ttname"><a href="../../d6/d05/class_instructions_1_1_misc_1_1_return.xhtml">Instructions::Misc::Return</a></div><div class="ttdef"><b>Definition:</b> misc.h:600</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37adba31a6dcc2689621e2414594252a7fd"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37adba31a6dcc2689621e2414594252a7fd">Instructions::Opcodes::kTABLESWITCH</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:214</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a4a1703c0266fcb3407149b44a355e946"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a4a1703c0266fcb3407149b44a355e946">Instructions::Opcodes::kSWAP</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:213</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_dup_xhtml_a6ef666603527a57e5374c4901aa7426f"><div class="ttname"><a href="../../d6/df7/class_instructions_1_1_misc_1_1_dup.xhtml#a6ef666603527a57e5374c4901aa7426f">Instructions::Misc::Dup::Dup</a></div><div class="ttdeci">Dup()</div><div class="ttdef"><b>Definition:</b> misc.h:64</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_get_field_xhtml_a10ec159ab367f8f56eec5f42fc1edd21"><div class="ttname"><a href="../../d0/d9b/class_instructions_1_1_misc_1_1_get_field.xhtml#a10ec159ab367f8f56eec5f42fc1edd21">Instructions::Misc::GetField::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_base_misc_xhtml_a2a5eac96258afd4bcff239bb08380a94"><div class="ttname"><a href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml#a2a5eac96258afd4bcff239bb08380a94">Instructions::Misc::BaseMisc::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> misc.h:18</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_dup_x2_xhtml"><div class="ttname"><a href="../../d1/d60/class_instructions_1_1_misc_1_1_dup_x2.xhtml">Instructions::Misc::DupX2</a></div><div class="ttdef"><b>Definition:</b> misc.h:82</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a17ec04e10d643fee76d6e8b7a57c57f2"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a17ec04e10d643fee76d6e8b7a57c57f2">Instructions::Opcodes::kDUP_X2</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:63</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_table_switch_xhtml_a4036d40cc38477a5f0c6996b82e5d31c"><div class="ttname"><a href="../../d6/dbf/class_instructions_1_1_misc_1_1_table_switch.xhtml#a4036d40cc38477a5f0c6996b82e5d31c">Instructions::Misc::TableSwitch::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> misc.h:663</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_pop2_xhtml"><div class="ttname"><a href="../../df/d6d/class_instructions_1_1_misc_1_1_pop2.xhtml">Instructions::Misc::Pop2</a></div><div class="ttdef"><b>Definition:</b> misc.h:493</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_checkcast_xhtml_adb65c3d5d763b78bcd307308734911b7"><div class="ttname"><a href="../../d3/dfa/class_instructions_1_1_misc_1_1_checkcast.xhtml#adb65c3d5d763b78bcd307308734911b7">Instructions::Misc::Checkcast::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> misc.h:48</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_goto_xhtml_aac1e20cf82648372ae73c48bd4a0925c"><div class="ttname"><a href="../../d9/da0/class_instructions_1_1_misc_1_1_goto.xhtml#aac1e20cf82648372ae73c48bd4a0925c">Instructions::Misc::Goto::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_get_field_xhtml"><div class="ttname"><a href="../../d0/d9b/class_instructions_1_1_misc_1_1_get_field.xhtml">Instructions::Misc::GetField</a></div><div class="ttdef"><b>Definition:</b> misc.h:122</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a8f4d972a54b57abfcca63ab7ffd3f34a"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a8f4d972a54b57abfcca63ab7ffd3f34a">Instructions::Opcodes::kNEWARRAY</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:202</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_instance_of_xhtml"><div class="ttname"><a href="../../d1/de6/class_instructions_1_1_misc_1_1_instance_of.xhtml">Instructions::Misc::InstanceOf</a></div><div class="ttdef"><b>Definition:</b> misc.h:239</div></div>
<div class="ttc" id="aclass_instructions_1_1_instruction_xhtml"><div class="ttname"><a href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instructions::Instruction</a></div><div class="ttdef"><b>Definition:</b> base.h:15</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_checkcast_xhtml"><div class="ttname"><a href="../../d3/dfa/class_instructions_1_1_misc_1_1_checkcast.xhtml">Instructions::Misc::Checkcast</a></div><div class="ttdef"><b>Definition:</b> misc.h:34</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_new_array_xhtml_af287982b8dbc8e492323f4d7cd580936"><div class="ttname"><a href="../../d7/d61/class_instructions_1_1_misc_1_1_new_array.xhtml#af287982b8dbc8e492323f4d7cd580936">Instructions::Misc::NewArray::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_dup_x1_xhtml_a4c05fe2fa341ad18c149d6d9c0783379"><div class="ttname"><a href="../../da/d11/class_instructions_1_1_misc_1_1_dup_x1.xhtml#a4c05fe2fa341ad18c149d6d9c0783379">Instructions::Misc::DupX1::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37af21a4a5368cddc1deb6e78e237651fd6"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37af21a4a5368cddc1deb6e78e237651fd6">Instructions::Opcodes::kGETFIELD</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:94</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_put_field_xhtml_a741d7d16258f378747878aa8bef2c6d5"><div class="ttname"><a href="../../d0/d83/class_instructions_1_1_misc_1_1_put_field.xhtml#a741d7d16258f378747878aa8bef2c6d5">Instructions::Misc::PutField::PutField</a></div><div class="ttdeci">PutField()</div><div class="ttdef"><b>Definition:</b> misc.h:505</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a37185c1397d756415d442a6c157e718f"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a37185c1397d756415d442a6c157e718f">Instructions::Opcodes::kNEW</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:201</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_put_static_xhtml_aa71832a79fc8385a91576cbe2335a398"><div class="ttname"><a href="../../d5/d99/class_instructions_1_1_misc_1_1_put_static.xhtml#aa71832a79fc8385a91576cbe2335a398">Instructions::Misc::PutStatic::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> misc.h:535</div></div>
<div class="ttc" id="aclassstd_1_1conditional_1_1type_xhtml"><div class="ttname"><a href="../../db/d0a/classstd_1_1conditional_1_1type.xhtml">type</a></div></div>
<div class="ttc" id="abase_8h_xhtml"><div class="ttname"><a href="../../d3/d5a/base_8h.xhtml">base.h</a></div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_nop_xhtml_a00a831eab90765dfde9646a707389229"><div class="ttname"><a href="../../d6/dc9/class_instructions_1_1_misc_1_1_nop.xhtml#a00a831eab90765dfde9646a707389229">Instructions::Misc::Nop::Nop</a></div><div class="ttdeci">Nop()</div><div class="ttdef"><b>Definition:</b> misc.h:475</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_dup2_x2_xhtml"><div class="ttname"><a href="../../d7/d4f/class_instructions_1_1_misc_1_1_dup2_x2.xhtml">Instructions::Misc::Dup2X2</a></div><div class="ttdef"><b>Definition:</b> misc.h:112</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_return_xhtml_ac876b4c346edb9676530c57908e21fa2"><div class="ttname"><a href="../../d6/d05/class_instructions_1_1_misc_1_1_return.xhtml#ac876b4c346edb9676530c57908e21fa2">Instructions::Misc::Return::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_goto_xhtml_a1ac6fd8d8ebad347a5b77f042af19356"><div class="ttname"><a href="../../d9/da0/class_instructions_1_1_misc_1_1_goto.xhtml#a1ac6fd8d8ebad347a5b77f042af19356">Instructions::Misc::Goto::Goto</a></div><div class="ttdeci">Goto()</div><div class="ttdef"><b>Definition:</b> misc.h:180</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_instance_of_xhtml_a2efb5feea4c3c4ac1140fd4dac47b14f"><div class="ttname"><a href="../../d1/de6/class_instructions_1_1_misc_1_1_instance_of.xhtml#a2efb5feea4c3c4ac1140fd4dac47b14f">Instructions::Misc::InstanceOf::InstanceOf</a></div><div class="ttdeci">InstanceOf()</div><div class="ttdef"><b>Definition:</b> misc.h:241</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37ad3b1c109b7180f2a452a67fd89f23fc6"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37ad3b1c109b7180f2a452a67fd89f23fc6">Instructions::Opcodes::kPOP</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:204</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_put_static_xhtml_ae9e8d8d1ab019576a6bad628249cdb2b"><div class="ttname"><a href="../../d5/d99/class_instructions_1_1_misc_1_1_put_static.xhtml#ae9e8d8d1ab019576a6bad628249cdb2b">Instructions::Misc::PutStatic::PutStatic</a></div><div class="ttdeci">PutStatic()</div><div class="ttdef"><b>Definition:</b> misc.h:533</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_base_misc_xhtml_a4e31eba8d46bcd409689595dbdf5a86a"><div class="ttname"><a href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml#a4e31eba8d46bcd409689595dbdf5a86a">Instructions::Misc::BaseMisc::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> misc.h:26</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a8772edd7fe05e3da65b33cc48f29e0e7"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a8772edd7fe05e3da65b33cc48f29e0e7">Instructions::Opcodes::kDUP_X1</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:62</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_get_field_xhtml_a5ff7d241b13bf08faba992805d756dff"><div class="ttname"><a href="../../d0/d9b/class_instructions_1_1_misc_1_1_get_field.xhtml#a5ff7d241b13bf08faba992805d756dff">Instructions::Misc::GetField::GetField</a></div><div class="ttdeci">GetField()</div><div class="ttdef"><b>Definition:</b> misc.h:124</div></div>
<div class="ttc" id="astring_8h_xhtml"><div class="ttname"><a href="../../da/d66/string_8h.xhtml">string.h</a></div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_dup_xhtml"><div class="ttname"><a href="../../d6/df7/class_instructions_1_1_misc_1_1_dup.xhtml">Instructions::Misc::Dup</a></div><div class="ttdef"><b>Definition:</b> misc.h:62</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_dup_x2_xhtml_a841618512042ae88b878977fda2f457b"><div class="ttname"><a href="../../d1/d60/class_instructions_1_1_misc_1_1_dup_x2.xhtml#a841618512042ae88b878977fda2f457b">Instructions::Misc::DupX2::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_multi_dim_array_xhtml_af1d3f9f5d388e19b807ac12f9f2aa87c"><div class="ttname"><a href="../../df/de0/class_instructions_1_1_misc_1_1_multi_dim_array.xhtml#af1d3f9f5d388e19b807ac12f9f2aa87c">Instructions::Misc::MultiDimArray::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> misc.h:357</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_put_field_xhtml_a27ef5fb941e0533d5bb4d1e1bea94de3"><div class="ttname"><a href="../../d0/d83/class_instructions_1_1_misc_1_1_put_field.xhtml#a27ef5fb941e0533d5bb4d1e1bea94de3">Instructions::Misc::PutField::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> misc.h:507</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a8327b5613ed5937de7e35d62b7bdbd82"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a8327b5613ed5937de7e35d62b7bdbd82">Instructions::Opcodes::kRET</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:208</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_lookup_switch_xhtml_a3b31bd3ffac2749cfceb95a9b3fffa93"><div class="ttname"><a href="../../d6/ddc/class_instructions_1_1_misc_1_1_lookup_switch.xhtml#a3b31bd3ffac2749cfceb95a9b3fffa93">Instructions::Misc::LookupSwitch::LookupSwitch</a></div><div class="ttdeci">LookupSwitch()</div><div class="ttdef"><b>Definition:</b> misc.h:269</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_pop_xhtml"><div class="ttname"><a href="../../d1/dff/class_instructions_1_1_misc_1_1_pop.xhtml">Instructions::Misc::Pop</a></div><div class="ttdef"><b>Definition:</b> misc.h:483</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_checkcast_xhtml_afb788c0933cb626287f6eea05d87f9fc"><div class="ttname"><a href="../../d3/dfa/class_instructions_1_1_misc_1_1_checkcast.xhtml#afb788c0933cb626287f6eea05d87f9fc">Instructions::Misc::Checkcast::Checkcast</a></div><div class="ttdeci">Checkcast()</div><div class="ttdef"><b>Definition:</b> misc.h:36</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_dup2_x2_xhtml_ac53f1082d9e057934fa82a54368fef6d"><div class="ttname"><a href="../../d7/d4f/class_instructions_1_1_misc_1_1_dup2_x2.xhtml#ac53f1082d9e057934fa82a54368fef6d">Instructions::Misc::Dup2X2::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_put_field_xhtml_a2a1478ef16945038fab16fa9aaabbb24"><div class="ttname"><a href="../../d0/d83/class_instructions_1_1_misc_1_1_put_field.xhtml#a2a1478ef16945038fab16fa9aaabbb24">Instructions::Misc::PutField::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37abc9f57df3c6d8846b493a29eb3b48827"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37abc9f57df3c6d8846b493a29eb3b48827">Instructions::Opcodes::kPUTSTATIC</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:207</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_swap_xhtml"><div class="ttname"><a href="../../da/df5/class_instructions_1_1_misc_1_1_swap.xhtml">Instructions::Misc::Swap</a></div><div class="ttdef"><b>Definition:</b> misc.h:610</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_ret_xhtml"><div class="ttname"><a href="../../db/d2e/class_instructions_1_1_misc_1_1_ret.xhtml">Instructions::Misc::Ret</a></div><div class="ttdef"><b>Definition:</b> misc.h:559</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_goto_wide_xhtml"><div class="ttname"><a href="../../d5/d81/class_instructions_1_1_misc_1_1_goto_wide.xhtml">Instructions::Misc::GotoWide</a></div><div class="ttdef"><b>Definition:</b> misc.h:208</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_ret_xhtml_aad8fb6eb5a83d9c6a76d94aa1e3c602b"><div class="ttname"><a href="../../db/d2e/class_instructions_1_1_misc_1_1_ret.xhtml#aad8fb6eb5a83d9c6a76d94aa1e3c602b">Instructions::Misc::Ret::Ret</a></div><div class="ttdeci">Ret()</div><div class="ttdef"><b>Definition:</b> misc.h:561</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_dup2_xhtml"><div class="ttname"><a href="../../d0/d1b/class_instructions_1_1_misc_1_1_dup2.xhtml">Instructions::Misc::Dup2</a></div><div class="ttdef"><b>Definition:</b> misc.h:92</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_goto_xhtml_afa9d244746b52683a1289bc43146fbc1"><div class="ttname"><a href="../../d9/da0/class_instructions_1_1_misc_1_1_goto.xhtml#afa9d244746b52683a1289bc43146fbc1">Instructions::Misc::Goto::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> misc.h:194</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37aa47901cf01978a914e0bf77365912777"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37aa47901cf01978a914e0bf77365912777">Instructions::Opcodes::kGETSTATIC</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:95</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_pop_xhtml_a6536965b1aa83de7377c63322e9d5eb0"><div class="ttname"><a href="../../d1/dff/class_instructions_1_1_misc_1_1_pop.xhtml#a6536965b1aa83de7377c63322e9d5eb0">Instructions::Misc::Pop::Pop</a></div><div class="ttdeci">Pop()</div><div class="ttdef"><b>Definition:</b> misc.h:485</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_table_switch_xhtml_a868c6e38d022950005b2a23e07b38fb1"><div class="ttname"><a href="../../d6/dbf/class_instructions_1_1_misc_1_1_table_switch.xhtml#a868c6e38d022950005b2a23e07b38fb1">Instructions::Misc::TableSwitch::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_new_xhtml_abacde8c6f2b5baeeeee5ad991483b767"><div class="ttname"><a href="../../d2/da4/class_instructions_1_1_misc_1_1_new.xhtml#abacde8c6f2b5baeeeee5ad991483b767">Instructions::Misc::New::New</a></div><div class="ttdeci">New()</div><div class="ttdef"><b>Definition:</b> misc.h:384</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_ab765ddcb61c4d60f2647154d87f97ae2"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Instructions::Opcodes::getMnemonic</a></div><div class="ttdeci">std::string getMnemonic(const Utils::Types::u1 &amp;opcode)</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a98b1a0a81a2e86856cc18ebac0249c0a"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a98b1a0a81a2e86856cc18ebac0249c0a">Instructions::Opcodes::kCHECKCAST</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:34</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a8cf0049d2364a846cf0d971791c8081d"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a8cf0049d2364a846cf0d971791c8081d">Instructions::Opcodes::kDUP2</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:64</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_put_static_xhtml"><div class="ttname"><a href="../../d5/d99/class_instructions_1_1_misc_1_1_put_static.xhtml">Instructions::Misc::PutStatic</a></div><div class="ttdef"><b>Definition:</b> misc.h:531</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a3d73d5a2c903ea3cff6e823a888b1ae6"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a3d73d5a2c903ea3cff6e823a888b1ae6">Instructions::Opcodes::kRETURN</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:209</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_lookup_switch_xhtml"><div class="ttname"><a href="../../d6/ddc/class_instructions_1_1_misc_1_1_lookup_switch.xhtml">Instructions::Misc::LookupSwitch</a></div><div class="ttdef"><b>Definition:</b> misc.h:267</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_put_static_xhtml_a7a2ed1776d25829ec667fb3687bba57f"><div class="ttname"><a href="../../d5/d99/class_instructions_1_1_misc_1_1_put_static.xhtml#a7a2ed1776d25829ec667fb3687bba57f">Instructions::Misc::PutStatic::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_dup2_x1_xhtml_a97467624b3a974b5b715d85eb459f17e"><div class="ttname"><a href="../../d9/db9/class_instructions_1_1_misc_1_1_dup2_x1.xhtml#a97467624b3a974b5b715d85eb459f17e">Instructions::Misc::Dup2X1::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_lookup_switch_xhtml_aed81b134d541b77291b437697df98a97"><div class="ttname"><a href="../../d6/ddc/class_instructions_1_1_misc_1_1_lookup_switch.xhtml#aed81b134d541b77291b437697df98a97">Instructions::Misc::LookupSwitch::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_dup_xhtml_abfd93ef01b0353ca6e9498d8e59c07bb"><div class="ttname"><a href="../../d6/df7/class_instructions_1_1_misc_1_1_dup.xhtml#abfd93ef01b0353ca6e9498d8e59c07bb">Instructions::Misc::Dup::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_new_xhtml_a4c020df32669dbff250b46ae3677e78e"><div class="ttname"><a href="../../d2/da4/class_instructions_1_1_misc_1_1_new.xhtml#a4c020df32669dbff250b46ae3677e78e">Instructions::Misc::New::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> misc.h:396</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_dup2_x2_xhtml_a86111427805e1b397374f40eefacb785"><div class="ttname"><a href="../../d7/d4f/class_instructions_1_1_misc_1_1_dup2_x2.xhtml#a86111427805e1b397374f40eefacb785">Instructions::Misc::Dup2X2::Dup2X2</a></div><div class="ttdeci">Dup2X2()</div><div class="ttdef"><b>Definition:</b> misc.h:114</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_put_field_xhtml_a00b7ae6d0a1873a81c6a489780f6975e"><div class="ttname"><a href="../../d0/d83/class_instructions_1_1_misc_1_1_put_field.xhtml#a00b7ae6d0a1873a81c6a489780f6975e">Instructions::Misc::PutField::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> misc.h:517</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a70599b8c97fc5e4a73b854f0377a7e10"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a70599b8c97fc5e4a73b854f0377a7e10">Instructions::Opcodes::kPUTFIELD</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:206</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_wide_xhtml_a1f56e32f08990e869e1931d4353e6ba0"><div class="ttname"><a href="../../dd/d79/class_instructions_1_1_misc_1_1_wide.xhtml#a1f56e32f08990e869e1931d4353e6ba0">Instructions::Misc::Wide::Wide</a></div><div class="ttdeci">Wide()</div><div class="ttdef"><b>Definition:</b> misc.h:709</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a51f762183f071662d5a13a4855fe5bd1"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a51f762183f071662d5a13a4855fe5bd1">Instructions::Opcodes::kMULTIANEWARRAY</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:200</div></div>
<div class="ttc" id="aclass_instructions_1_1_instruction_xhtml_abce4218201520f9ca8880bda8ab78e40"><div class="ttname"><a href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">Instructions::Instruction::opcode</a></div><div class="ttdeci">const Utils::Types::u1 opcode</div><div class="ttdef"><b>Definition:</b> base.h:35</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_nop_xhtml_aa976b4e6803b52e6fd72d9fafef984a0"><div class="ttname"><a href="../../d6/dc9/class_instructions_1_1_misc_1_1_nop.xhtml#aa976b4e6803b52e6fd72d9fafef984a0">Instructions::Misc::Nop::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_new_xhtml_a2087103af39f64239fc3154507eb7276"><div class="ttname"><a href="../../d2/da4/class_instructions_1_1_misc_1_1_new.xhtml#a2087103af39f64239fc3154507eb7276">Instructions::Misc::New::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> misc.h:386</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_swap_xhtml_a78ad606bfb53bea030e6ff8e4ee7a343"><div class="ttname"><a href="../../da/df5/class_instructions_1_1_misc_1_1_swap.xhtml#a78ad606bfb53bea030e6ff8e4ee7a343">Instructions::Misc::Swap::Swap</a></div><div class="ttdeci">Swap()</div><div class="ttdef"><b>Definition:</b> misc.h:612</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_get_static_xhtml_a37897a610883bf721cc1d8f74ea56933"><div class="ttname"><a href="../../d3/de0/class_instructions_1_1_misc_1_1_get_static.xhtml#a37897a610883bf721cc1d8f74ea56933">Instructions::Misc::GetStatic::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> misc.h:154</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_dup_x1_xhtml"><div class="ttname"><a href="../../da/d11/class_instructions_1_1_misc_1_1_dup_x1.xhtml">Instructions::Misc::DupX1</a></div><div class="ttdef"><b>Definition:</b> misc.h:72</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_checkcast_xhtml_adf1ef58116bd081ef0cf135d9595c305"><div class="ttname"><a href="../../d3/dfa/class_instructions_1_1_misc_1_1_checkcast.xhtml#adf1ef58116bd081ef0cf135d9595c305">Instructions::Misc::Checkcast::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> misc.h:38</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_dup2_x1_xhtml_a6269224fd639bbe623bde0bd73973e5e"><div class="ttname"><a href="../../d9/db9/class_instructions_1_1_misc_1_1_dup2_x1.xhtml#a6269224fd639bbe623bde0bd73973e5e">Instructions::Misc::Dup2X1::Dup2X1</a></div><div class="ttdeci">Dup2X1()</div><div class="ttdef"><b>Definition:</b> misc.h:104</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_dup2_xhtml_a1fc0e76174c0999f06c4919e7c545e6f"><div class="ttname"><a href="../../d0/d1b/class_instructions_1_1_misc_1_1_dup2.xhtml#a1fc0e76174c0999f06c4919e7c545e6f">Instructions::Misc::Dup2::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_table_switch_xhtml_af5e621bdaf4696c9e8eae34bb619edd3"><div class="ttname"><a href="../../d6/dbf/class_instructions_1_1_misc_1_1_table_switch.xhtml#af5e621bdaf4696c9e8eae34bb619edd3">Instructions::Misc::TableSwitch::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> misc.h:624</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37add0e2d2b0fd94d618544d3785e4789c9"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37add0e2d2b0fd94d618544d3785e4789c9">Instructions::Opcodes::kDUP2_X1</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:65</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_multi_dim_array_xhtml_a30d0fb1639984d064c173f3c7d44d2cb"><div class="ttname"><a href="../../df/de0/class_instructions_1_1_misc_1_1_multi_dim_array.xhtml#a30d0fb1639984d064c173f3c7d44d2cb">Instructions::Misc::MultiDimArray::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_pop_xhtml_a77f62439856dbebb46963d093f568f53"><div class="ttname"><a href="../../d1/dff/class_instructions_1_1_misc_1_1_pop.xhtml#a77f62439856dbebb46963d093f568f53">Instructions::Misc::Pop::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a1d7cfcb7e158c5ab5e3dc5e25cec27a4"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a1d7cfcb7e158c5ab5e3dc5e25cec27a4">Instructions::Opcodes::kDUP</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:61</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_get_field_xhtml_a1aa1a7927dd93bc2cb5534a9df202a7c"><div class="ttname"><a href="../../d0/d9b/class_instructions_1_1_misc_1_1_get_field.xhtml#a1aa1a7927dd93bc2cb5534a9df202a7c">Instructions::Misc::GetField::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> misc.h:136</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_instance_of_xhtml_a94cc9dbc37f21634cb8e89869495ebfe"><div class="ttname"><a href="../../d1/de6/class_instructions_1_1_misc_1_1_instance_of.xhtml#a94cc9dbc37f21634cb8e89869495ebfe">Instructions::Misc::InstanceOf::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> misc.h:243</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_goto_wide_xhtml_a13a542415b87f575fa38b201b9db1425"><div class="ttname"><a href="../../d5/d81/class_instructions_1_1_misc_1_1_goto_wide.xhtml#a13a542415b87f575fa38b201b9db1425">Instructions::Misc::GotoWide::GotoWide</a></div><div class="ttdeci">GotoWide()</div><div class="ttdef"><b>Definition:</b> misc.h:210</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_get_field_xhtml_a5d3d4b7ab5fcb33a0f803b11377346c6"><div class="ttname"><a href="../../d0/d9b/class_instructions_1_1_misc_1_1_get_field.xhtml#a5d3d4b7ab5fcb33a0f803b11377346c6">Instructions::Misc::GetField::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> misc.h:126</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_wide_xhtml_a0e689b9909f295dcb3c3288a2862fc98"><div class="ttname"><a href="../../dd/d79/class_instructions_1_1_misc_1_1_wide.xhtml#a0e689b9909f295dcb3c3288a2862fc98">Instructions::Misc::Wide::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_dup2_x1_xhtml"><div class="ttname"><a href="../../d9/db9/class_instructions_1_1_misc_1_1_dup2_x1.xhtml">Instructions::Misc::Dup2X1</a></div><div class="ttdef"><b>Definition:</b> misc.h:102</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a97a9545f8ccb2d4419a262e75ce4ce4f"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a97a9545f8ccb2d4419a262e75ce4ce4f">Instructions::Opcodes::kGOTO</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:96</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_multi_dim_array_xhtml_a4b482239676e8e7d07f32b5983045815"><div class="ttname"><a href="../../df/de0/class_instructions_1_1_misc_1_1_multi_dim_array.xhtml#a4b482239676e8e7d07f32b5983045815">Instructions::Misc::MultiDimArray::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> misc.h:368</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_new_array_xhtml_a77bdb80dc8b0c27c60e53988ae4be873"><div class="ttname"><a href="../../d7/d61/class_instructions_1_1_misc_1_1_new_array.xhtml#a77bdb80dc8b0c27c60e53988ae4be873">Instructions::Misc::NewArray::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> misc.h:414</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_return_xhtml_a491a4806a7d34cde786802851349c945"><div class="ttname"><a href="../../d6/d05/class_instructions_1_1_misc_1_1_return.xhtml#a491a4806a7d34cde786802851349c945">Instructions::Misc::Return::Return</a></div><div class="ttdeci">Return()</div><div class="ttdef"><b>Definition:</b> misc.h:602</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_put_static_xhtml_ae2f10580c953c9d4adccb494e75a7f22"><div class="ttname"><a href="../../d5/d99/class_instructions_1_1_misc_1_1_put_static.xhtml#ae2f10580c953c9d4adccb494e75a7f22">Instructions::Misc::PutStatic::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> misc.h:545</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_new_array_xhtml"><div class="ttname"><a href="../../d7/d61/class_instructions_1_1_misc_1_1_new_array.xhtml">Instructions::Misc::NewArray</a></div><div class="ttdef"><b>Definition:</b> misc.h:410</div></div>
<div class="ttc" id="aopcodes_8h_xhtml"><div class="ttname"><a href="../../d3/de6/opcodes_8h.xhtml">opcodes.h</a></div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_ret_xhtml_adb5406161f7401e016fae244e5d1a2d4"><div class="ttname"><a href="../../db/d2e/class_instructions_1_1_misc_1_1_ret.xhtml#adb5406161f7401e016fae244e5d1a2d4">Instructions::Misc::Ret::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_ret_xhtml_a3810b2bc66284d325517b41ae4ee3fb6"><div class="ttname"><a href="../../db/d2e/class_instructions_1_1_misc_1_1_ret.xhtml#a3810b2bc66284d325517b41ae4ee3fb6">Instructions::Misc::Ret::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> misc.h:563</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_table_switch_xhtml"><div class="ttname"><a href="../../d6/dbf/class_instructions_1_1_misc_1_1_table_switch.xhtml">Instructions::Misc::TableSwitch</a></div><div class="ttdef"><b>Definition:</b> misc.h:620</div></div>
<div class="ttc" id="anamespace_instructions_xhtml"><div class="ttname"><a href="../../da/d11/namespace_instructions.xhtml">Instructions</a></div><div class="ttdef"><b>Definition:</b> execution_engine.h:12</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37afea463938417a05670845b5a72a3a86f"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37afea463938417a05670845b5a72a3a86f">Instructions::Opcodes::kWIDE</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:215</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_ret_xhtml_a8eba3c872a2e267dfcba90a10531879c"><div class="ttname"><a href="../../db/d2e/class_instructions_1_1_misc_1_1_ret.xhtml#a8eba3c872a2e267dfcba90a10531879c">Instructions::Misc::Ret::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> misc.h:581</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a25ffbcc1ce137b36231243ea258ea29f"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a25ffbcc1ce137b36231243ea258ea29f">Instructions::Opcodes::kLOOKUPSWITCH</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:184</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_base_misc_xhtml"><div class="ttname"><a href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml">Instructions::Misc::BaseMisc</a></div><div class="ttdef"><b>Definition:</b> misc.h:14</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_lookup_switch_xhtml_a047938871f72f8398828d2c401a667e2"><div class="ttname"><a href="../../d6/ddc/class_instructions_1_1_misc_1_1_lookup_switch.xhtml#a047938871f72f8398828d2c401a667e2">Instructions::Misc::LookupSwitch::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> misc.h:271</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_lookup_switch_xhtml_ae5d37274cfc43d30131adfd202e58b39"><div class="ttname"><a href="../../d6/ddc/class_instructions_1_1_misc_1_1_lookup_switch.xhtml#ae5d37274cfc43d30131adfd202e58b39">Instructions::Misc::LookupSwitch::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> misc.h:312</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_get_static_xhtml_a61fa526d0ac64fadb894c1d4d00ddded"><div class="ttname"><a href="../../d3/de0/class_instructions_1_1_misc_1_1_get_static.xhtml#a61fa526d0ac64fadb894c1d4d00ddded">Instructions::Misc::GetStatic::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> misc.h:164</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_checkcast_xhtml_a283fe16841ffd0f9a34a4f2872ea7367"><div class="ttname"><a href="../../d3/dfa/class_instructions_1_1_misc_1_1_checkcast.xhtml#a283fe16841ffd0f9a34a4f2872ea7367">Instructions::Misc::Checkcast::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_get_static_xhtml"><div class="ttname"><a href="../../d3/de0/class_instructions_1_1_misc_1_1_get_static.xhtml">Instructions::Misc::GetStatic</a></div><div class="ttdef"><b>Definition:</b> misc.h:150</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a498bbd76201e72ed18df253630473ae3"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a498bbd76201e72ed18df253630473ae3">Instructions::Opcodes::kDUP2_X2</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:66</div></div>
<div class="ttc" id="anamespace_utils_1_1_types_xhtml_a987afa1d65d5f43c5e379d4cdafacd44"><div class="ttname"><a href="../../d0/d94/namespace_utils_1_1_types.xhtml#a987afa1d65d5f43c5e379d4cdafacd44">Utils::Types::u1</a></div><div class="ttdeci">std::uint8_t u1</div><div class="ttdef"><b>Definition:</b> types.h:8</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a95be7dc9a1b2a1fc202d2e853042fe86"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a95be7dc9a1b2a1fc202d2e853042fe86">Instructions::Opcodes::kNOP</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:203</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_swap_xhtml_ad0e882e25bb19a4650df492f7f8787e4"><div class="ttname"><a href="../../da/df5/class_instructions_1_1_misc_1_1_swap.xhtml#ad0e882e25bb19a4650df492f7f8787e4">Instructions::Misc::Swap::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_instance_of_xhtml_ade1f78f37fa197b05355825ae7997302"><div class="ttname"><a href="../../d1/de6/class_instructions_1_1_misc_1_1_instance_of.xhtml#ade1f78f37fa197b05355825ae7997302">Instructions::Misc::InstanceOf::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_instance_of_xhtml_af59ee6a7a0fe25ed8e2c205d0cdbe033"><div class="ttname"><a href="../../d1/de6/class_instructions_1_1_misc_1_1_instance_of.xhtml#af59ee6a7a0fe25ed8e2c205d0cdbe033">Instructions::Misc::InstanceOf::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> misc.h:253</div></div>
<div class="ttc" id="anamespace_utils_1_1_string_xhtml_aec9a3efb3bd837c1f21fec1ceba1eec9"><div class="ttname"><a href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a></div><div class="ttdeci">std::string toString(const T &amp;num)</div><div class="ttdef"><b>Definition:</b> string.h:21</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_multi_dim_array_xhtml_a5fc62eed001bf9eb65e3cdb8e1a0b368"><div class="ttname"><a href="../../df/de0/class_instructions_1_1_misc_1_1_multi_dim_array.xhtml#a5fc62eed001bf9eb65e3cdb8e1a0b368">Instructions::Misc::MultiDimArray::MultiDimArray</a></div><div class="ttdeci">MultiDimArray()</div><div class="ttdef"><b>Definition:</b> misc.h:355</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37aa17b6567b452ab7bb9b409830a7eddfe"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37aa17b6567b452ab7bb9b409830a7eddfe">Instructions::Opcodes::kINSTANCEOF</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:142</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_goto_wide_xhtml_af07c3295d6731e79c52e2a458efd0c4a"><div class="ttname"><a href="../../d5/d81/class_instructions_1_1_misc_1_1_goto_wide.xhtml#af07c3295d6731e79c52e2a458efd0c4a">Instructions::Misc::GotoWide::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> misc.h:224</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_table_switch_xhtml_a67595104cb09cdbdd96402dd53eef3e5"><div class="ttname"><a href="../../d6/dbf/class_instructions_1_1_misc_1_1_table_switch.xhtml#a67595104cb09cdbdd96402dd53eef3e5">Instructions::Misc::TableSwitch::TableSwitch</a></div><div class="ttdeci">TableSwitch()</div><div class="ttdef"><b>Definition:</b> misc.h:622</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_new_xhtml"><div class="ttname"><a href="../../d2/da4/class_instructions_1_1_misc_1_1_new.xhtml">Instructions::Misc::New</a></div><div class="ttdef"><b>Definition:</b> misc.h:382</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_goto_xhtml_a4febcdf064509f9905e401f3b21f18ae"><div class="ttname"><a href="../../d9/da0/class_instructions_1_1_misc_1_1_goto.xhtml#a4febcdf064509f9905e401f3b21f18ae">Instructions::Misc::Goto::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> misc.h:182</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_dup_x2_xhtml_a1d69a02e9f1b410ec966ec84093cc3b6"><div class="ttname"><a href="../../d1/d60/class_instructions_1_1_misc_1_1_dup_x2.xhtml#a1d69a02e9f1b410ec966ec84093cc3b6">Instructions::Misc::DupX2::DupX2</a></div><div class="ttdeci">DupX2()</div><div class="ttdef"><b>Definition:</b> misc.h:84</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_base_misc_xhtml_a50d947ef412d7bd72ff4ba92a8fbe8d1"><div class="ttname"><a href="../../d5/d28/class_instructions_1_1_misc_1_1_base_misc.xhtml#a50d947ef412d7bd72ff4ba92a8fbe8d1">Instructions::Misc::BaseMisc::BaseMisc</a></div><div class="ttdeci">BaseMisc(const Utils::Types::u1 &amp;tag)</div><div class="ttdef"><b>Definition:</b> misc.h:16</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a02fe2c805b438ed4468f53c3f9e28dee"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a02fe2c805b438ed4468f53c3f9e28dee">Instructions::Opcodes::kPOP2</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:205</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_pop2_xhtml_a0eeb5a3c0166d9299f4fbe4096d69118"><div class="ttname"><a href="../../df/d6d/class_instructions_1_1_misc_1_1_pop2.xhtml#a0eeb5a3c0166d9299f4fbe4096d69118">Instructions::Misc::Pop2::Pop2</a></div><div class="ttdeci">Pop2()</div><div class="ttdef"><b>Definition:</b> misc.h:495</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_multi_dim_array_xhtml"><div class="ttname"><a href="../../df/de0/class_instructions_1_1_misc_1_1_multi_dim_array.xhtml">Instructions::Misc::MultiDimArray</a></div><div class="ttdef"><b>Definition:</b> misc.h:353</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_new_array_xhtml_a14e7dc289150cc0e854fda9ec9b78a7d"><div class="ttname"><a href="../../d7/d61/class_instructions_1_1_misc_1_1_new_array.xhtml#a14e7dc289150cc0e854fda9ec9b78a7d">Instructions::Misc::NewArray::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> misc.h:425</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_goto_wide_xhtml_ac0b894b1ea89f9bee8912ccf08bf542f"><div class="ttname"><a href="../../d5/d81/class_instructions_1_1_misc_1_1_goto_wide.xhtml#ac0b894b1ea89f9bee8912ccf08bf542f">Instructions::Misc::GotoWide::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_dup_x1_xhtml_afc7b25e9f064a294f0724d49f54bdd45"><div class="ttname"><a href="../../da/d11/class_instructions_1_1_misc_1_1_dup_x1.xhtml#afc7b25e9f064a294f0724d49f54bdd45">Instructions::Misc::DupX1::DupX1</a></div><div class="ttdeci">DupX1()</div><div class="ttdef"><b>Definition:</b> misc.h:74</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_nop_xhtml"><div class="ttname"><a href="../../d6/dc9/class_instructions_1_1_misc_1_1_nop.xhtml">Instructions::Misc::Nop</a></div><div class="ttdef"><b>Definition:</b> misc.h:473</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_pop2_xhtml_a0a0c4abd00515b9f76b77d5023759de4"><div class="ttname"><a href="../../df/d6d/class_instructions_1_1_misc_1_1_pop2.xhtml#a0a0c4abd00515b9f76b77d5023759de4">Instructions::Misc::Pop2::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_new_array_xhtml_ae1bffd543346d857b9c2b895f4048d27"><div class="ttname"><a href="../../d7/d61/class_instructions_1_1_misc_1_1_new_array.xhtml#ae1bffd543346d857b9c2b895f4048d27">Instructions::Misc::NewArray::NewArray</a></div><div class="ttdeci">NewArray()</div><div class="ttdef"><b>Definition:</b> misc.h:412</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_wide_xhtml"><div class="ttname"><a href="../../dd/d79/class_instructions_1_1_misc_1_1_wide.xhtml">Instructions::Misc::Wide</a></div><div class="ttdef"><b>Definition:</b> misc.h:707</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_get_static_xhtml_a6bfd349ca06dfe549933042f62737264"><div class="ttname"><a href="../../d3/de0/class_instructions_1_1_misc_1_1_get_static.xhtml#a6bfd349ca06dfe549933042f62737264">Instructions::Misc::GetStatic::GetStatic</a></div><div class="ttdeci">GetStatic()</div><div class="ttdef"><b>Definition:</b> misc.h:152</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_goto_xhtml"><div class="ttname"><a href="../../d9/da0/class_instructions_1_1_misc_1_1_goto.xhtml">Instructions::Misc::Goto</a></div><div class="ttdef"><b>Definition:</b> misc.h:178</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a998f3a9af577307f5fd5a6786097427f"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a998f3a9af577307f5fd5a6786097427f">Instructions::Opcodes::kGOTO_W</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:97</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_put_field_xhtml"><div class="ttname"><a href="../../d0/d83/class_instructions_1_1_misc_1_1_put_field.xhtml">Instructions::Misc::PutField</a></div><div class="ttdef"><b>Definition:</b> misc.h:503</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_new_xhtml_afd866845b57395d12c48c49aa864b126"><div class="ttname"><a href="../../d2/da4/class_instructions_1_1_misc_1_1_new.xhtml#afd866845b57395d12c48c49aa864b126">Instructions::Misc::New::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_goto_wide_xhtml_ac9fcbfd285240eac5d8942298babaef5"><div class="ttname"><a href="../../d5/d81/class_instructions_1_1_misc_1_1_goto_wide.xhtml#ac9fcbfd285240eac5d8942298babaef5">Instructions::Misc::GotoWide::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> misc.h:212</div></div>
<div class="ttc" id="aclass_memory_areas_1_1_thread_xhtml"><div class="ttname"><a href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a></div><div class="ttdef"><b>Definition:</b> thread.h:11</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_dup2_xhtml_af32f2d71f733db70803bf808b89894e3"><div class="ttname"><a href="../../d0/d1b/class_instructions_1_1_misc_1_1_dup2.xhtml#af32f2d71f733db70803bf808b89894e3">Instructions::Misc::Dup2::Dup2</a></div><div class="ttdeci">Dup2()</div><div class="ttdef"><b>Definition:</b> misc.h:94</div></div>
<div class="ttc" id="aclass_instructions_1_1_misc_1_1_get_static_xhtml_a4ab38dc44258caef6cb5b2ba99c21942"><div class="ttname"><a href="../../d3/de0/class_instructions_1_1_misc_1_1_get_static.xhtml#a4ab38dc44258caef6cb5b2ba99c21942">Instructions::Misc::GetStatic::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 2 2019 03:56:32 for JVM 8 SB 2019/2 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.16
</small></address>
</body>
</html>
