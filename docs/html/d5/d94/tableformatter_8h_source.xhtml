<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.16"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>JVM 8 SB 2019/2: include/utils/external/tableformatter.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">JVM 8 SB 2019/2
   </div>
   <div id="projectbrief">projeto que visa fazer uma implementação simples da JVM 8</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.16 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="../../dir_821002d4f10779a80d4fb17bc32f21f1.xhtml">utils</a></li><li class="navelem"><a class="el" href="../../dir_b25c1feb59ff708db6e0b9f30ee13dca.xhtml">external</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">tableformatter.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d5/d94/tableformatter_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#ifndef INCLUDE_UTILS_EXTERNAL_TABLEFORMATTER_H_</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#define INCLUDE_UTILS_EXTERNAL_TABLEFORMATTER_H_</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">// https://github.com/ToniBig/cpp-tableformatter</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160; </div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">// --- Standard Includes ---</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;iomanip&gt;</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;iterator&gt;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="../../d4/daa/namespacetableformatter.xhtml">   17</a></span>&#160;<span class="keyword">namespace </span><a class="code" href="../../d4/daa/namespacetableformatter.xhtml">tableformatter</a> {</div>
<div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">   18</a></span>&#160;<span class="keyword">typedef</span> std::vector&lt;std::string&gt; <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">StringVector</a>;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="../../d8/d47/namespacetableformatter_1_1internal.xhtml">   20</a></span>&#160;<span class="keyword">namespace </span>internal {</div>
<div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="../../d8/d47/namespacetableformatter_1_1internal.xhtml#a9cc9ecca9058a213f571603b349bc8e5">   21</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d8/d47/namespacetableformatter_1_1internal.xhtml#a9cc9ecca9058a213f571603b349bc8e5">_assert</a>(<span class="keywordtype">bool</span> statement, <span class="keyword">const</span> std::string&amp; message) {</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  <span class="keywordflow">if</span> (!statement) {</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordflow">throw</span> std::runtime_error(message);</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;  }</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;}</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="../../d8/d47/namespacetableformatter_1_1internal.xhtml#ab3cdbd7dc86aa22ae490211504278e43">   27</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">StringVector</a> <a class="code" href="../../d8/d47/namespacetableformatter_1_1internal.xhtml#ab3cdbd7dc86aa22ae490211504278e43">splitAtLineBreaks</a>(<span class="keyword">const</span> std::string&amp; cellString) {</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  std::istringstream cellStream(cellString);</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">StringVector</a> lines;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  <span class="keywordflow">for</span> (std::string line; std::getline(cellStream, line);) {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    lines.push_back(line);</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  }  <span class="comment">// end of line-loop</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keywordflow">return</span> lines;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}  <span class="comment">// namespace internal</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="../../d4/daa/namespacetableformatter.xhtml#a68215e282c345ca1fc719f76255671b7">   41</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a68215e282c345ca1fc719f76255671b7">HORIZONTAL</a> { <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a68215e282c345ca1fc719f76255671b7a684d325a7303f52e64011467ff5c5758">LEFT</a>, <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a68215e282c345ca1fc719f76255671b7ac397289ee45877be0cd49811fe245b4e">CENTER</a>, <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a68215e282c345ca1fc719f76255671b7a21507b40c80068eda19865706fdc2403">RIGHT</a> };</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="../../d4/daa/namespacetableformatter.xhtml#a5088d2721e9031a03849660470e09d58">   43</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a5088d2721e9031a03849660470e09d58">VERTICAL</a> { <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a5088d2721e9031a03849660470e09d58a6705777b712ee811e76fb07162081d63">TOP</a>, <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a5088d2721e9031a03849660470e09d58a43eedd8685eb86592022f8da962e3474">MIDDLE</a>, <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a5088d2721e9031a03849660470e09d58a1fabf63de5c96c78e2a40805bcdeb73b">BOTTOM</a> };</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml">   45</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml">CellFormatter</a> {</div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a58d94a2791d74555cd887581a66ba7d4">   46</a></span>&#160;  <span class="keywordtype">size_t</span> <a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a58d94a2791d74555cd887581a66ba7d4">width</a>;</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a96bce3b95ee288e8d184c0817499b3aa">   47</a></span>&#160;  <span class="keywordtype">char</span> <a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a96bce3b95ee288e8d184c0817499b3aa">paddingCharacter</a> = <span class="charliteral">&#39; &#39;</span>;</div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a26cfc81a4458983ca66bd51220ed8c9f">   48</a></span>&#160;  <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a68215e282c345ca1fc719f76255671b7">HORIZONTAL</a> <a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a26cfc81a4458983ca66bd51220ed8c9f">horizontalAlignment</a> = <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a68215e282c345ca1fc719f76255671b7a684d325a7303f52e64011467ff5c5758">HORIZONTAL::LEFT</a>;</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a498c6be4c71e8c6221d97e1687e76b86">   49</a></span>&#160;  <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a5088d2721e9031a03849660470e09d58">VERTICAL</a> <a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a498c6be4c71e8c6221d97e1687e76b86">verticalAlignment</a> = <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a5088d2721e9031a03849660470e09d58a6705777b712ee811e76fb07162081d63">VERTICAL::TOP</a>;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a3dd5e918446d36903b7930cdb669ba78">CellFormatter</a>(<span class="keywordtype">size_t</span> _width);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">StringVector</a> <a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a21ba0a03c6ca19097efaa3f5957df4d2">formatCellContent</a>(<span class="keyword">const</span> <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">StringVector</a>&amp; unformattedCellChunks,</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                                 <span class="keywordtype">size_t</span> maximumNumberOfRows);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;};</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="../../d4/daa/namespacetableformatter.xhtml#a78c0f4035a4613de7e43ebd0e5ef81b5">   57</a></span>&#160;<span class="keyword">typedef</span> std::vector&lt;CellFormatter&gt; <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a78c0f4035a4613de7e43ebd0e5ef81b5">CellFormatterVector</a>;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U, <span class="keyword">typename</span>... Ts&gt;</div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="../../d8/db0/structtableformatter_1_1is__any__of.xhtml">   60</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d8/db0/structtableformatter_1_1is__any__of.xhtml">is_any_of</a> : <a class="code" href="../../d8/db0/structtableformatter_1_1is__any__of.xhtml">is_any_of</a>&lt;T, Ts...&gt; {};</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Ts&gt;</div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="../../d8/dc4/structtableformatter_1_1is__any__of_3_01_t_00_01_t_00_01_ts_8_8_8_01_4.xhtml">   63</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d8/db0/structtableformatter_1_1is__any__of.xhtml">is_any_of</a>&lt;T, T, Ts...&gt; : std::true_type {};</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</div>
<div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="../../d5/d0f/structtableformatter_1_1is__any__of_3_01_t_00_01_u_01_4.xhtml">   66</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d8/db0/structtableformatter_1_1is__any__of.xhtml">is_any_of</a>&lt;T, U&gt; : std::false_type {};</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="../../d4/def/structtableformatter_1_1is__any__of_3_01_t_00_01_t_01_4.xhtml">   69</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d8/db0/structtableformatter_1_1is__any__of.xhtml">is_any_of</a>&lt;T, T&gt; : std::true_type {};</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml">   71</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml">StreamReset</a> {</div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#a7cdee59c5f359eb3a062ee2303763833">   72</a></span>&#160;  std::ios_base::fmtflags <a class="code" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#a7cdee59c5f359eb3a062ee2303763833">saveflags</a>;</div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#adc8317a14ffdf0ffbbe68298f2b288e1">   73</a></span>&#160;  std::streamsize <a class="code" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#adc8317a14ffdf0ffbbe68298f2b288e1">prec</a>;</div>
<div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#aa4a053a016de93133bcf472fa48304ec">   74</a></span>&#160;  std::streamsize <a class="code" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#aa4a053a016de93133bcf472fa48304ec">width</a>;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#a316f8fa32ec9c4070c8c9e66b059eed7">   76</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#a316f8fa32ec9c4070c8c9e66b059eed7">getState</a>(std::stringstream&amp; stream) {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#a7cdee59c5f359eb3a062ee2303763833">saveflags</a> = stream.flags();</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#adc8317a14ffdf0ffbbe68298f2b288e1">prec</a> = stream.precision();</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#aa4a053a016de93133bcf472fa48304ec">width</a> = stream.width();</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#ae7cb8e51a307f59678155e7585667931">   82</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#ae7cb8e51a307f59678155e7585667931">setState</a>(std::stringstream&amp; stream) {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    stream.precision(<a class="code" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#adc8317a14ffdf0ffbbe68298f2b288e1">prec</a>);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    stream.width(<a class="code" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#aa4a053a016de93133bcf472fa48304ec">width</a>);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    stream.unsetf(std::ios_base::dec);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    stream.unsetf(std::ios_base::oct);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    stream.unsetf(std::ios_base::hex);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    stream.unsetf(std::ios_base::basefield);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    stream.unsetf(std::ios_base::left);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    stream.unsetf(std::ios_base::right);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    stream.unsetf(std::ios_base::internal);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    stream.unsetf(std::ios_base::adjustfield);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    stream.unsetf(std::ios_base::boolalpha);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    stream.unsetf(std::ios_base::showbase);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    stream.unsetf(std::ios_base::showpoint);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    stream.unsetf(std::ios_base::showpos);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    stream.unsetf(std::ios_base::skipws);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    stream.unsetf(std::ios_base::unitbuf);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    stream.unsetf(std::ios_base::uppercase);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;};</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml">  104</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml">RowStream</a> {</div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#a41464ec59fc1ea6a88e26b18005d598d">  105</a></span>&#160;  <a class="code" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#a41464ec59fc1ea6a88e26b18005d598d">RowStream</a>() { reset.<a class="code" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#a316f8fa32ec9c4070c8c9e66b059eed7">getState</a>(stream); }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#ab4d0e771135da1955e39ce58ce4553bc">  107</a></span>&#160;  <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">StringVector</a> <a class="code" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#ab4d0e771135da1955e39ce58ce4553bc">getData</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> cells; }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#aae1c96a7110df14fe00f1d6c0ed2ebaf">  109</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#aae1c96a7110df14fe00f1d6c0ed2ebaf">clear</a>() {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    cells.clear();</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    stream.str(std::string());</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    stream.clear();</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#a6f83cd107785fd8c1751e6147c22a450">  115</a></span>&#160;  <span class="keywordtype">size_t</span> <a class="code" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#a6f83cd107785fd8c1751e6147c22a450">getNumberOfColumns</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> cells.size(); }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#afcddb3c6476aba81578397b9fd6fd2a9">  118</a></span>&#160;  <a class="code" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml">RowStream</a>&amp; <a class="code" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#afcddb3c6476aba81578397b9fd6fd2a9">operator&lt;&lt;</a>(T input) {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    stream &lt;&lt; input;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">// Check if none of the following structs have been passed</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">if</span> (not <a class="code" href="../../d8/db0/structtableformatter_1_1is__any__of.xhtml">is_any_of</a>&lt;T, std::_Setfill&lt;char&gt;, std::_Setiosflags,</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                      std::_Resetiosflags, std::_Setbase, std::_Setprecision,</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                      std::_Setw&gt;::value) {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;      cells.push_back(stream.str());</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;      stream.clear();</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;      stream.str(std::string());</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;      reset.<a class="code" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#ae7cb8e51a307f59678155e7585667931">setState</a>(stream);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#aaa6b33376b70ea6ad606036d69ac1181">  134</a></span>&#160;  <a class="code" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml">RowStream</a>&amp; <a class="code" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#aaa6b33376b70ea6ad606036d69ac1181">operator&lt;&lt;</a>(std::ios_base&amp; (*func)(std::ios_base&amp;)) {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    func(stream);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CharT, <span class="keyword">typename</span> Traits&gt;</div>
<div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#adf7f082d2fcfc9a9c681fef99e3f8759">  141</a></span>&#160;  <a class="code" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml">RowStream</a>&amp; <a class="code" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#adf7f082d2fcfc9a9c681fef99e3f8759">operator&lt;&lt;</a>(</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;      std::basic_ios&lt;CharT, Traits&gt;&amp; (*func)(std::basic_ios&lt;CharT, Traits&gt;&amp;)) {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    func(stream);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  }</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CharT, <span class="keyword">typename</span> Traits&gt;</div>
<div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#a9f11b56b716b0233c3759fef49a916c1">  149</a></span>&#160;  <a class="code" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml">RowStream</a>&amp; <a class="code" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#a9f11b56b716b0233c3759fef49a916c1">operator&lt;&lt;</a>(std::basic_ostream&lt;CharT, Traits&gt;&amp; (*func)(</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;      std::basic_ostream&lt;CharT, Traits&gt;&amp;)) {</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    func(stream);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; <span class="keyword">private</span>:</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  std::vector&lt;std::string&gt; cells;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  std::stringstream stream;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  <a class="code" href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml">StreamReset</a> reset;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;};</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml">  162</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml">TableFormatter</a> {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a7ee41a17e55618b4e64c0fca10196821">TableFormatter</a>(<span class="keywordtype">size_t</span> _numberOfColumns, <span class="keywordtype">size_t</span> _columnWidth);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a7ee41a17e55618b4e64c0fca10196821">TableFormatter</a>(<span class="keyword">const</span> <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a78c0f4035a4613de7e43ebd0e5ef81b5">CellFormatterVector</a>&amp; CellFormatters);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a743ee03b2cea529164d33fcf8b900923">setCellFormatter</a>(<span class="keyword">const</span> <a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml">CellFormatter</a>&amp; cellFormatter, <span class="keywordtype">size_t</span> column);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a51db4e929686f4428fe5ba6136d32b01">setColumnDelimiter</a>(<span class="keyword">const</span> std::string&amp; delimiter, <span class="keywordtype">size_t</span> columnBoundary);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a55ef8d33af180b980b728c8148f4d272">addRow</a>(<span class="keyword">const</span> <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">StringVector</a>&amp; row);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">StringVector</a> <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a96b6d465d998a9e0b86b9a06d109a183">createChunks</a>(std::string cellString, <span class="keywordtype">size_t</span> columnWidth);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  std::string <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#ab7c758f9b065084df9f6eaa27142ae6e">toString</a>(<span class="keyword">const</span> <span class="keywordtype">int</span>&amp; tab_shift = 0);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  <span class="keywordtype">size_t</span> <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#ae674e6e293906f0e1463b542d361c9db">getTableWidth</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a7402d14edef597bec438b8b06f06e0d9">clearData</a>();</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a2d4aa43bcc9e2906e897ad87c219c368">addHorizontalLine</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>&amp; <a class="code" href="../../d0/d94/namespace_utils_1_1_types.xhtml#ad813396da6574dcbdf28cd81787b7693">character</a> = <span class="charliteral">&#39;-&#39;</span>);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  <a class="code" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml">RowStream</a>&amp; <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a2e64403f9879c97a725d47ef8c492047">operator&lt;&lt;</a>(<span class="keyword">const</span> T&amp; input);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; <span class="keyword">private</span>:</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a7ee41a17e55618b4e64c0fca10196821">TableFormatter</a>(<span class="keyword">const</span> <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml">TableFormatter</a>&amp;);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml">TableFormatter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml">TableFormatter</a>&amp;);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  <span class="keywordtype">void</span> digestRowStream();</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <span class="keywordtype">size_t</span> numberOfColumns;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a78c0f4035a4613de7e43ebd0e5ef81b5">CellFormatterVector</a> cellFormatters;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  std::vector&lt;StringVector&gt; data;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">StringVector</a> columnDelimiters;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <a class="code" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml">RowStream</a> rowStream;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;};</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a3dd5e918446d36903b7930cdb669ba78">  199</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a3dd5e918446d36903b7930cdb669ba78">CellFormatter::CellFormatter</a>(<span class="keywordtype">size_t</span> _width) : width(_width) {}</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a21ba0a03c6ca19097efaa3f5957df4d2">  201</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">StringVector</a> <a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a21ba0a03c6ca19097efaa3f5957df4d2">CellFormatter::formatCellContent</a>(</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keyword">const</span> <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">StringVector</a>&amp; unformattedCellChunks, <span class="keywordtype">size_t</span> maximumNumberOfRows) {</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  <span class="keywordtype">size_t</span> numberOfFilledRows = unformattedCellChunks.size();</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  <span class="keywordtype">size_t</span> numberOfEmptyRows = maximumNumberOfRows - unformattedCellChunks.size();</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  <span class="keyword">auto</span> formattedContent =</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;      <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">StringVector</a>(maximumNumberOfRows, std::string(<a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a58d94a2791d74555cd887581a66ba7d4">width</a>, <a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a96bce3b95ee288e8d184c0817499b3aa">paddingCharacter</a>));</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  <span class="keywordtype">size_t</span> currentIndex = 0;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a498c6be4c71e8c6221d97e1687e76b86">verticalAlignment</a> == <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a5088d2721e9031a03849660470e09d58a6705777b712ee811e76fb07162081d63">VERTICAL::TOP</a>) {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a498c6be4c71e8c6221d97e1687e76b86">verticalAlignment</a> == <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a5088d2721e9031a03849660470e09d58a43eedd8685eb86592022f8da962e3474">VERTICAL::MIDDLE</a>) {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    currentIndex = (maximumNumberOfRows - numberOfFilledRows) / 2;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a498c6be4c71e8c6221d97e1687e76b86">verticalAlignment</a> == <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a5088d2721e9031a03849660470e09d58a1fabf63de5c96c78e2a40805bcdeb73b">VERTICAL::BOTTOM</a>) {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    currentIndex = numberOfEmptyRows;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; line : unformattedCellChunks) {</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <a class="code" href="../../d8/d47/namespacetableformatter_1_1internal.xhtml#a9cc9ecca9058a213f571603b349bc8e5">internal::_assert</a>(line.size() &lt;= <a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a58d94a2791d74555cd887581a66ba7d4">width</a>, <span class="stringliteral">&quot;Line is longer the width!&quot;</span>);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    std::string formattedLine;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; </div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordtype">size_t</span> paddingWidth = <a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a58d94a2791d74555cd887581a66ba7d4">width</a> - line.size();</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a26cfc81a4458983ca66bd51220ed8c9f">horizontalAlignment</a> == <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a68215e282c345ca1fc719f76255671b7a684d325a7303f52e64011467ff5c5758">HORIZONTAL::LEFT</a>) {</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;      formattedLine = line + std::string(paddingWidth, <a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a96bce3b95ee288e8d184c0817499b3aa">paddingCharacter</a>);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a26cfc81a4458983ca66bd51220ed8c9f">horizontalAlignment</a> == <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a68215e282c345ca1fc719f76255671b7a21507b40c80068eda19865706fdc2403">HORIZONTAL::RIGHT</a>) {</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;      formattedLine = std::string(paddingWidth, <a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a96bce3b95ee288e8d184c0817499b3aa">paddingCharacter</a>) + line;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;      int16_t leftWidth = paddingWidth / 2;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;      int16_t rightWidth = paddingWidth - leftWidth;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;      formattedLine = std::string(leftWidth, <a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a96bce3b95ee288e8d184c0817499b3aa">paddingCharacter</a>) + line +</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                      std::string(rightWidth, <a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a96bce3b95ee288e8d184c0817499b3aa">paddingCharacter</a>);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    }</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    formattedContent[currentIndex] = formattedLine;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    currentIndex++;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  }</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  <span class="keywordflow">return</span> formattedContent;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;}</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno"><a class="line" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a7ee41a17e55618b4e64c0fca10196821">  244</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a7ee41a17e55618b4e64c0fca10196821">TableFormatter::TableFormatter</a>(<span class="keywordtype">size_t</span> _numberOfColumns,</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                      <span class="keywordtype">size_t</span> _columnWidth)</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    : numberOfColumns(_numberOfColumns),</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;      cellFormatters(numberOfColumns, _columnWidth),</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;      columnDelimiters(numberOfColumns + 1, <span class="stringliteral">&quot;|&quot;</span>) {}</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno"><a class="line" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a861064275226dccc5a2859e3a2ce09ae">  250</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a7ee41a17e55618b4e64c0fca10196821">TableFormatter::TableFormatter</a>(<span class="keyword">const</span> <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a78c0f4035a4613de7e43ebd0e5ef81b5">CellFormatterVector</a>&amp; CellFormatters)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    : numberOfColumns(CellFormatters.size()),</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;      cellFormatters(CellFormatters),</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;      columnDelimiters(CellFormatters.size() + 1, <span class="stringliteral">&quot;|&quot;</span>) {}</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a743ee03b2cea529164d33fcf8b900923">  255</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a743ee03b2cea529164d33fcf8b900923">TableFormatter::setCellFormatter</a>(<span class="keyword">const</span> <a class="code" href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml">CellFormatter</a>&amp; cellFormatter,</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                                             <span class="keywordtype">size_t</span> column) {</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  cellFormatters.at(column) = cellFormatter;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;}</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160; </div>
<div class="line"><a name="l00260"></a><span class="lineno"><a class="line" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a51db4e929686f4428fe5ba6136d32b01">  260</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a51db4e929686f4428fe5ba6136d32b01">TableFormatter::setColumnDelimiter</a>(<span class="keyword">const</span> std::string&amp; delimiter,</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                                               <span class="keywordtype">size_t</span> columnBoundary) {</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  columnDelimiters.at(columnBoundary) = delimiter;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;}</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> TableFormatter::digestRowStream() {</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  <span class="keyword">auto</span> rowData = rowStream.<a class="code" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#ab4d0e771135da1955e39ce58ce4553bc">getData</a>();</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  rowStream.<a class="code" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#aae1c96a7110df14fe00f1d6c0ed2ebaf">clear</a>();</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  <span class="keywordflow">if</span> (not rowData.empty()) {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordtype">size_t</span> numberOfRows =</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        std::ceil(static_cast&lt;double&gt;(rowData.size()) / numberOfColumns);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; </div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keyword">auto</span> start = rowData.begin();</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160; </div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numberOfRows; ++i) {</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;      <span class="keyword">auto</span> offset =</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;          std::min(numberOfColumns,</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                   static_cast&lt;size_t&gt;(std::distance(start, rowData.end())));</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;      <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">StringVector</a> currentRow(start, start + offset);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;      <span class="keyword">auto</span> gap = numberOfColumns - offset;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;      <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; gap; ++j) {</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        currentRow.push_back(<span class="stringliteral">&quot;&quot;</span>);</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;      }  <span class="comment">// end of j-loop</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160; </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;      this-&gt;<a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a55ef8d33af180b980b728c8148f4d272">addRow</a>(currentRow);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;      start += numberOfColumns;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    }  <span class="comment">// end of i-loop</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  }</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;}</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160; </div>
<div class="line"><a name="l00293"></a><span class="lineno"><a class="line" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a55ef8d33af180b980b728c8148f4d272">  293</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a55ef8d33af180b980b728c8148f4d272">TableFormatter::addRow</a>(<span class="keyword">const</span> <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">StringVector</a>&amp; row) {</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  this-&gt;digestRowStream();</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160; </div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;  <span class="keywordflow">if</span> (row.size() != numberOfColumns) {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Number of columns does not match!&quot;</span>);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  }</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160; </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  data.push_back(row);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;}</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160; </div>
<div class="line"><a name="l00305"></a><span class="lineno"><a class="line" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a96b6d465d998a9e0b86b9a06d109a183">  305</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">StringVector</a> <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a96b6d465d998a9e0b86b9a06d109a183">TableFormatter::createChunks</a>(std::string cellString,</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                                                 <span class="keywordtype">size_t</span> columnWidth) {</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;  <span class="keyword">auto</span> bothAreSpaces = [](<span class="keywordtype">char</span> lhs, <span class="keywordtype">char</span> rhs) {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keywordflow">return</span> (lhs == rhs) &amp;&amp; (lhs == <span class="charliteral">&#39; &#39;</span>);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  };</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160; </div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;  <span class="keyword">auto</span> new_end =</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;      std::unique(cellString.begin(), cellString.end(), bothAreSpaces);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;  cellString.erase(new_end, cellString.end());</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160; </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  <span class="keyword">auto</span> splitStrings = <a class="code" href="../../d8/d47/namespacetableformatter_1_1internal.xhtml#ab3cdbd7dc86aa22ae490211504278e43">internal::splitAtLineBreaks</a>(cellString);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160; </div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">StringVector</a> lines;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160; </div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; splitString : splitStrings) {</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keyword">auto</span> length = splitString.size();</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160; </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordtype">bool</span> beginning = (splitString[0] == <span class="charliteral">&#39; &#39;</span>);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordtype">bool</span> end = (splitString[splitString.size() - 1] == <span class="charliteral">&#39; &#39;</span>);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keywordflow">if</span> (beginning || end) {</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;      <span class="keywordtype">size_t</span> start = beginning ? 1 : 0;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;      length = start ? length - 1 : length;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;      length = end ? length - 1 : length;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;      splitString = splitString.substr(start, length);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    }</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160; </div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">while</span> (splitString.size() &gt; columnWidth) {</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;      <span class="keywordtype">size_t</span> spaceAt = 0;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160; </div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;      <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; splitString.size(); ++i) {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keyword">auto</span>&amp; <a class="code" href="../../d0/d94/namespace_utils_1_1_types.xhtml#ad813396da6574dcbdf28cd81787b7693">character</a> = splitString[i];</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="../../d0/d94/namespace_utils_1_1_types.xhtml#ad813396da6574dcbdf28cd81787b7693">character</a> == <span class="charliteral">&#39; &#39;</span>) {</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;          <span class="keywordflow">if</span> (i &gt;= columnWidth) {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;          } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            spaceAt = i;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;          }</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        }</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;      }  <span class="comment">// end of i-loop</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160; </div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;      <span class="keywordflow">if</span> (spaceAt) {</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        lines.push_back(splitString.substr(0, spaceAt));</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        length = splitString.size() - spaceAt;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        splitString = splitString.substr(spaceAt + 1, length);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;      } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        lines.push_back(splitString.substr(0, columnWidth));</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        length = splitString.size() - columnWidth;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        splitString = splitString.substr(columnWidth, length);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;      }</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;      splitString = splitString.substr(0, length);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    }</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160; </div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    lines.push_back(splitString);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;  }</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160; </div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  <span class="keywordflow">return</span> lines;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;}</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160; </div>
<div class="line"><a name="l00369"></a><span class="lineno"><a class="line" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#ab7c758f9b065084df9f6eaa27142ae6e">  369</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#ab7c758f9b065084df9f6eaa27142ae6e">TableFormatter::toString</a>(<span class="keyword">const</span> <span class="keywordtype">int</span>&amp; tab_shift) {</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  this-&gt;digestRowStream();</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160; </div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  std::stringstream result;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160; </div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> iRow = 0; iRow &lt; data.size(); ++iRow) {</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keyword">auto</span>&amp; row = data[iRow];</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160; </div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    std::vector&lt;StringVector&gt; unformattedRowChunks;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    unformattedRowChunks.reserve(numberOfColumns);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keywordtype">size_t</span> maximumNumberOfRows = 0;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160; </div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> iCell = 0; iCell &lt; numberOfColumns; ++iCell) {</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;      <span class="keyword">auto</span>&amp; cellString = row[iCell];</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;      <span class="keyword">auto</span>&amp; cellFormatter = cellFormatters[iCell];</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160; </div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;      <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">StringVector</a> cellChunks = <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a96b6d465d998a9e0b86b9a06d109a183">createChunks</a>(cellString, cellFormatter.width);</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160; </div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;      maximumNumberOfRows = std::max(maximumNumberOfRows, cellChunks.size());</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;      unformattedRowChunks.push_back(cellChunks);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    }  <span class="comment">// end of iCell-loop</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160; </div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    std::vector&lt;StringVector&gt; formattedRowChunks;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    formattedRowChunks.reserve(numberOfColumns);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160; </div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> iCell = 0; iCell &lt; numberOfColumns; ++iCell) {</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;      <span class="keyword">auto</span>&amp; unformattedCellChunks = unformattedRowChunks[iCell];</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;      <span class="keyword">auto</span>&amp; cellFormatter = cellFormatters[iCell];</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;      <span class="keyword">auto</span> formattedCellChunks = cellFormatter.formatCellContent(</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;          unformattedCellChunks, maximumNumberOfRows);</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160; </div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;      formattedRowChunks.push_back(formattedCellChunks);</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    }  <span class="comment">// end of iCell-loop</span></div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160; </div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> iCellRow = 0; iCellRow &lt; maximumNumberOfRows; ++iCellRow) {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;      result &lt;&lt; std::string(tab_shift, <span class="charliteral">&#39;\t&#39;</span>) &lt;&lt; columnDelimiters.front();</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160; </div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;      <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> iCell = 0; iCell &lt; numberOfColumns; ++iCell) {</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        <span class="keyword">auto</span>&amp; cellRow = formattedRowChunks[iCell][iCellRow];</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160; </div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        result &lt;&lt; cellRow &lt;&lt; columnDelimiters[iCell + 1];</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;      }  <span class="comment">// end of iCell-loop</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160; </div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;      result &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    }  <span class="comment">// end of iCellRow-loop</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;  }    <span class="comment">// end of iRow-loop</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160; </div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;  <span class="keywordflow">return</span> result.str();</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;}</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160; </div>
<div class="line"><a name="l00429"></a><span class="lineno"><a class="line" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#ae674e6e293906f0e1463b542d361c9db">  429</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">size_t</span> <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#ae674e6e293906f0e1463b542d361c9db">TableFormatter::getTableWidth</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;  <span class="keywordtype">size_t</span> width = 0;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160; </div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; delimiter : columnDelimiters) {</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    width += delimiter.size();</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;  }</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160; </div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; formatter : cellFormatters) {</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    width += formatter.width;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;  }</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160; </div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;  <span class="keywordflow">return</span> width;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;}</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160; </div>
<div class="line"><a name="l00443"></a><span class="lineno"><a class="line" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a7402d14edef597bec438b8b06f06e0d9">  443</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a7402d14edef597bec438b8b06f06e0d9">TableFormatter::clearData</a>() { data.clear(); }</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160; </div>
<div class="line"><a name="l00445"></a><span class="lineno"><a class="line" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a2d4aa43bcc9e2906e897ad87c219c368">  445</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a2d4aa43bcc9e2906e897ad87c219c368">TableFormatter::addHorizontalLine</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>&amp; <a class="code" href="../../d0/d94/namespace_utils_1_1_types.xhtml#ad813396da6574dcbdf28cd81787b7693">character</a>) {</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;  <a class="code" href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">StringVector</a> delimiterRow;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160; </div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; formatter : cellFormatters) {</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    delimiterRow.push_back(std::string(formatter.width, <a class="code" href="../../d0/d94/namespace_utils_1_1_types.xhtml#ad813396da6574dcbdf28cd81787b7693">character</a>));</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;  }</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160; </div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;  this-&gt;<a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a55ef8d33af180b980b728c8148f4d272">addRow</a>(delimiterRow);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;}</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160; </div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00456"></a><span class="lineno"><a class="line" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a2e64403f9879c97a725d47ef8c492047">  456</a></span>&#160;<a class="code" href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml">RowStream</a>&amp; <a class="code" href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a2e64403f9879c97a725d47ef8c492047">TableFormatter::operator&lt;&lt;</a>(<span class="keyword">const</span> T&amp; input) {</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;  rowStream &lt;&lt; input;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;  <span class="keywordflow">return</span> rowStream;</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;}</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160; </div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;}  <span class="comment">// namespace tableformatter</span></div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160; </div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="preprocessor">#endif  // INCLUDE_UTILS_EXTERNAL_TABLEFORMATTER_H_</span></div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="astructtableformatter_1_1_stream_reset_xhtml_a316f8fa32ec9c4070c8c9e66b059eed7"><div class="ttname"><a href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#a316f8fa32ec9c4070c8c9e66b059eed7">tableformatter::StreamReset::getState</a></div><div class="ttdeci">void getState(std::stringstream &amp;stream)</div><div class="ttdef"><b>Definition:</b> tableformatter.h:76</div></div>
<div class="ttc" id="anamespacetableformatter_xhtml_a7fc483cf4b95b34ca43cb94ef9205b6e"><div class="ttname"><a href="../../d4/daa/namespacetableformatter.xhtml#a7fc483cf4b95b34ca43cb94ef9205b6e">tableformatter::StringVector</a></div><div class="ttdeci">std::vector&lt; std::string &gt; StringVector</div><div class="ttdef"><b>Definition:</b> tableformatter.h:18</div></div>
<div class="ttc" id="astructtableformatter_1_1_stream_reset_xhtml"><div class="ttname"><a href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml">tableformatter::StreamReset</a></div><div class="ttdef"><b>Definition:</b> tableformatter.h:71</div></div>
<div class="ttc" id="aclasstableformatter_1_1_table_formatter_xhtml"><div class="ttname"><a href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml">tableformatter::TableFormatter</a></div><div class="ttdef"><b>Definition:</b> tableformatter.h:162</div></div>
<div class="ttc" id="astructtableformatter_1_1_stream_reset_xhtml_adc8317a14ffdf0ffbbe68298f2b288e1"><div class="ttname"><a href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#adc8317a14ffdf0ffbbe68298f2b288e1">tableformatter::StreamReset::prec</a></div><div class="ttdeci">std::streamsize prec</div><div class="ttdef"><b>Definition:</b> tableformatter.h:73</div></div>
<div class="ttc" id="astructtableformatter_1_1_cell_formatter_xhtml"><div class="ttname"><a href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml">tableformatter::CellFormatter</a></div><div class="ttdef"><b>Definition:</b> tableformatter.h:45</div></div>
<div class="ttc" id="aclasstableformatter_1_1_table_formatter_xhtml_a743ee03b2cea529164d33fcf8b900923"><div class="ttname"><a href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a743ee03b2cea529164d33fcf8b900923">tableformatter::TableFormatter::setCellFormatter</a></div><div class="ttdeci">void setCellFormatter(const CellFormatter &amp;cellFormatter, size_t column)</div><div class="ttdef"><b>Definition:</b> tableformatter.h:255</div></div>
<div class="ttc" id="astructtableformatter_1_1_row_stream_xhtml_aaa6b33376b70ea6ad606036d69ac1181"><div class="ttname"><a href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#aaa6b33376b70ea6ad606036d69ac1181">tableformatter::RowStream::operator&lt;&lt;</a></div><div class="ttdeci">RowStream &amp; operator&lt;&lt;(std::ios_base &amp;(*func)(std::ios_base &amp;))</div><div class="ttdef"><b>Definition:</b> tableformatter.h:134</div></div>
<div class="ttc" id="astructtableformatter_1_1_row_stream_xhtml_adf7f082d2fcfc9a9c681fef99e3f8759"><div class="ttname"><a href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#adf7f082d2fcfc9a9c681fef99e3f8759">tableformatter::RowStream::operator&lt;&lt;</a></div><div class="ttdeci">RowStream &amp; operator&lt;&lt;(std::basic_ios&lt; CharT, Traits &gt; &amp;(*func)(std::basic_ios&lt; CharT, Traits &gt; &amp;))</div><div class="ttdef"><b>Definition:</b> tableformatter.h:141</div></div>
<div class="ttc" id="astructtableformatter_1_1_cell_formatter_xhtml_a58d94a2791d74555cd887581a66ba7d4"><div class="ttname"><a href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a58d94a2791d74555cd887581a66ba7d4">tableformatter::CellFormatter::width</a></div><div class="ttdeci">size_t width</div><div class="ttdef"><b>Definition:</b> tableformatter.h:46</div></div>
<div class="ttc" id="astructtableformatter_1_1_stream_reset_xhtml_ae7cb8e51a307f59678155e7585667931"><div class="ttname"><a href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#ae7cb8e51a307f59678155e7585667931">tableformatter::StreamReset::setState</a></div><div class="ttdeci">void setState(std::stringstream &amp;stream)</div><div class="ttdef"><b>Definition:</b> tableformatter.h:82</div></div>
<div class="ttc" id="astructtableformatter_1_1_stream_reset_xhtml_a7cdee59c5f359eb3a062ee2303763833"><div class="ttname"><a href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#a7cdee59c5f359eb3a062ee2303763833">tableformatter::StreamReset::saveflags</a></div><div class="ttdeci">std::ios_base::fmtflags saveflags</div><div class="ttdef"><b>Definition:</b> tableformatter.h:72</div></div>
<div class="ttc" id="aclasstableformatter_1_1_table_formatter_xhtml_a51db4e929686f4428fe5ba6136d32b01"><div class="ttname"><a href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a51db4e929686f4428fe5ba6136d32b01">tableformatter::TableFormatter::setColumnDelimiter</a></div><div class="ttdeci">void setColumnDelimiter(const std::string &amp;delimiter, size_t columnBoundary)</div><div class="ttdef"><b>Definition:</b> tableformatter.h:260</div></div>
<div class="ttc" id="astructtableformatter_1_1_row_stream_xhtml_aae1c96a7110df14fe00f1d6c0ed2ebaf"><div class="ttname"><a href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#aae1c96a7110df14fe00f1d6c0ed2ebaf">tableformatter::RowStream::clear</a></div><div class="ttdeci">void clear()</div><div class="ttdef"><b>Definition:</b> tableformatter.h:109</div></div>
<div class="ttc" id="anamespacetableformatter_xhtml_a5088d2721e9031a03849660470e09d58a6705777b712ee811e76fb07162081d63"><div class="ttname"><a href="../../d4/daa/namespacetableformatter.xhtml#a5088d2721e9031a03849660470e09d58a6705777b712ee811e76fb07162081d63">tableformatter::VERTICAL::TOP</a></div></div>
<div class="ttc" id="astructtableformatter_1_1_row_stream_xhtml_ab4d0e771135da1955e39ce58ce4553bc"><div class="ttname"><a href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#ab4d0e771135da1955e39ce58ce4553bc">tableformatter::RowStream::getData</a></div><div class="ttdeci">StringVector getData() const</div><div class="ttdef"><b>Definition:</b> tableformatter.h:107</div></div>
<div class="ttc" id="anamespacetableformatter_xhtml_a68215e282c345ca1fc719f76255671b7ac397289ee45877be0cd49811fe245b4e"><div class="ttname"><a href="../../d4/daa/namespacetableformatter.xhtml#a68215e282c345ca1fc719f76255671b7ac397289ee45877be0cd49811fe245b4e">tableformatter::HORIZONTAL::CENTER</a></div></div>
<div class="ttc" id="anamespacetableformatter_xhtml_a68215e282c345ca1fc719f76255671b7a684d325a7303f52e64011467ff5c5758"><div class="ttname"><a href="../../d4/daa/namespacetableformatter.xhtml#a68215e282c345ca1fc719f76255671b7a684d325a7303f52e64011467ff5c5758">tableformatter::HORIZONTAL::LEFT</a></div></div>
<div class="ttc" id="astructtableformatter_1_1_cell_formatter_xhtml_a498c6be4c71e8c6221d97e1687e76b86"><div class="ttname"><a href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a498c6be4c71e8c6221d97e1687e76b86">tableformatter::CellFormatter::verticalAlignment</a></div><div class="ttdeci">VERTICAL verticalAlignment</div><div class="ttdef"><b>Definition:</b> tableformatter.h:49</div></div>
<div class="ttc" id="aclasstableformatter_1_1_table_formatter_xhtml_ab7c758f9b065084df9f6eaa27142ae6e"><div class="ttname"><a href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#ab7c758f9b065084df9f6eaa27142ae6e">tableformatter::TableFormatter::toString</a></div><div class="ttdeci">std::string toString(const int &amp;tab_shift=0)</div><div class="ttdef"><b>Definition:</b> tableformatter.h:369</div></div>
<div class="ttc" id="astructtableformatter_1_1_stream_reset_xhtml_aa4a053a016de93133bcf472fa48304ec"><div class="ttname"><a href="../../d5/d12/structtableformatter_1_1_stream_reset.xhtml#aa4a053a016de93133bcf472fa48304ec">tableformatter::StreamReset::width</a></div><div class="ttdeci">std::streamsize width</div><div class="ttdef"><b>Definition:</b> tableformatter.h:74</div></div>
<div class="ttc" id="aclasstableformatter_1_1_table_formatter_xhtml_a2e64403f9879c97a725d47ef8c492047"><div class="ttname"><a href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a2e64403f9879c97a725d47ef8c492047">tableformatter::TableFormatter::operator&lt;&lt;</a></div><div class="ttdeci">RowStream &amp; operator&lt;&lt;(const T &amp;input)</div><div class="ttdef"><b>Definition:</b> tableformatter.h:456</div></div>
<div class="ttc" id="astructtableformatter_1_1_row_stream_xhtml_a9f11b56b716b0233c3759fef49a916c1"><div class="ttname"><a href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#a9f11b56b716b0233c3759fef49a916c1">tableformatter::RowStream::operator&lt;&lt;</a></div><div class="ttdeci">RowStream &amp; operator&lt;&lt;(std::basic_ostream&lt; CharT, Traits &gt; &amp;(*func)(std::basic_ostream&lt; CharT, Traits &gt; &amp;))</div><div class="ttdef"><b>Definition:</b> tableformatter.h:149</div></div>
<div class="ttc" id="aclasstableformatter_1_1_table_formatter_xhtml_a7ee41a17e55618b4e64c0fca10196821"><div class="ttname"><a href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a7ee41a17e55618b4e64c0fca10196821">tableformatter::TableFormatter::TableFormatter</a></div><div class="ttdeci">TableFormatter(size_t _numberOfColumns, size_t _columnWidth)</div><div class="ttdef"><b>Definition:</b> tableformatter.h:244</div></div>
<div class="ttc" id="anamespacetableformatter_1_1internal_xhtml_a9cc9ecca9058a213f571603b349bc8e5"><div class="ttname"><a href="../../d8/d47/namespacetableformatter_1_1internal.xhtml#a9cc9ecca9058a213f571603b349bc8e5">tableformatter::internal::_assert</a></div><div class="ttdeci">void _assert(bool statement, const std::string &amp;message)</div><div class="ttdef"><b>Definition:</b> tableformatter.h:21</div></div>
<div class="ttc" id="anamespace_utils_1_1_types_xhtml_ad813396da6574dcbdf28cd81787b7693"><div class="ttname"><a href="../../d0/d94/namespace_utils_1_1_types.xhtml#ad813396da6574dcbdf28cd81787b7693">Utils::Types::character</a></div><div class="ttdeci">std::uint8_t character</div><div class="ttdef"><b>Definition:</b> types.h:15</div></div>
<div class="ttc" id="anamespacetableformatter_xhtml"><div class="ttname"><a href="../../d4/daa/namespacetableformatter.xhtml">tableformatter</a></div><div class="ttdef"><b>Definition:</b> tableformatter.h:17</div></div>
<div class="ttc" id="astructtableformatter_1_1_cell_formatter_xhtml_a3dd5e918446d36903b7930cdb669ba78"><div class="ttname"><a href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a3dd5e918446d36903b7930cdb669ba78">tableformatter::CellFormatter::CellFormatter</a></div><div class="ttdeci">CellFormatter(size_t _width)</div><div class="ttdef"><b>Definition:</b> tableformatter.h:199</div></div>
<div class="ttc" id="anamespacetableformatter_1_1internal_xhtml_ab3cdbd7dc86aa22ae490211504278e43"><div class="ttname"><a href="../../d8/d47/namespacetableformatter_1_1internal.xhtml#ab3cdbd7dc86aa22ae490211504278e43">tableformatter::internal::splitAtLineBreaks</a></div><div class="ttdeci">StringVector splitAtLineBreaks(const std::string &amp;cellString)</div><div class="ttdef"><b>Definition:</b> tableformatter.h:27</div></div>
<div class="ttc" id="astructtableformatter_1_1_cell_formatter_xhtml_a21ba0a03c6ca19097efaa3f5957df4d2"><div class="ttname"><a href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a21ba0a03c6ca19097efaa3f5957df4d2">tableformatter::CellFormatter::formatCellContent</a></div><div class="ttdeci">StringVector formatCellContent(const StringVector &amp;unformattedCellChunks, size_t maximumNumberOfRows)</div><div class="ttdef"><b>Definition:</b> tableformatter.h:201</div></div>
<div class="ttc" id="astructtableformatter_1_1_cell_formatter_xhtml_a96bce3b95ee288e8d184c0817499b3aa"><div class="ttname"><a href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a96bce3b95ee288e8d184c0817499b3aa">tableformatter::CellFormatter::paddingCharacter</a></div><div class="ttdeci">char paddingCharacter</div><div class="ttdef"><b>Definition:</b> tableformatter.h:47</div></div>
<div class="ttc" id="astructtableformatter_1_1_cell_formatter_xhtml_a26cfc81a4458983ca66bd51220ed8c9f"><div class="ttname"><a href="../../d7/d6b/structtableformatter_1_1_cell_formatter.xhtml#a26cfc81a4458983ca66bd51220ed8c9f">tableformatter::CellFormatter::horizontalAlignment</a></div><div class="ttdeci">HORIZONTAL horizontalAlignment</div><div class="ttdef"><b>Definition:</b> tableformatter.h:48</div></div>
<div class="ttc" id="astructtableformatter_1_1_row_stream_xhtml"><div class="ttname"><a href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml">tableformatter::RowStream</a></div><div class="ttdef"><b>Definition:</b> tableformatter.h:104</div></div>
<div class="ttc" id="aclasstableformatter_1_1_table_formatter_xhtml_a96b6d465d998a9e0b86b9a06d109a183"><div class="ttname"><a href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a96b6d465d998a9e0b86b9a06d109a183">tableformatter::TableFormatter::createChunks</a></div><div class="ttdeci">StringVector createChunks(std::string cellString, size_t columnWidth)</div><div class="ttdef"><b>Definition:</b> tableformatter.h:305</div></div>
<div class="ttc" id="anamespacetableformatter_xhtml_a68215e282c345ca1fc719f76255671b7a21507b40c80068eda19865706fdc2403"><div class="ttname"><a href="../../d4/daa/namespacetableformatter.xhtml#a68215e282c345ca1fc719f76255671b7a21507b40c80068eda19865706fdc2403">tableformatter::HORIZONTAL::RIGHT</a></div></div>
<div class="ttc" id="anamespacetableformatter_xhtml_a78c0f4035a4613de7e43ebd0e5ef81b5"><div class="ttname"><a href="../../d4/daa/namespacetableformatter.xhtml#a78c0f4035a4613de7e43ebd0e5ef81b5">tableformatter::CellFormatterVector</a></div><div class="ttdeci">std::vector&lt; CellFormatter &gt; CellFormatterVector</div><div class="ttdef"><b>Definition:</b> tableformatter.h:57</div></div>
<div class="ttc" id="anamespacetableformatter_xhtml_a5088d2721e9031a03849660470e09d58a43eedd8685eb86592022f8da962e3474"><div class="ttname"><a href="../../d4/daa/namespacetableformatter.xhtml#a5088d2721e9031a03849660470e09d58a43eedd8685eb86592022f8da962e3474">tableformatter::VERTICAL::MIDDLE</a></div></div>
<div class="ttc" id="anamespacetableformatter_xhtml_a68215e282c345ca1fc719f76255671b7"><div class="ttname"><a href="../../d4/daa/namespacetableformatter.xhtml#a68215e282c345ca1fc719f76255671b7">tableformatter::HORIZONTAL</a></div><div class="ttdeci">HORIZONTAL</div><div class="ttdef"><b>Definition:</b> tableformatter.h:41</div></div>
<div class="ttc" id="astructtableformatter_1_1_row_stream_xhtml_afcddb3c6476aba81578397b9fd6fd2a9"><div class="ttname"><a href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#afcddb3c6476aba81578397b9fd6fd2a9">tableformatter::RowStream::operator&lt;&lt;</a></div><div class="ttdeci">RowStream &amp; operator&lt;&lt;(T input)</div><div class="ttdef"><b>Definition:</b> tableformatter.h:118</div></div>
<div class="ttc" id="aclasstableformatter_1_1_table_formatter_xhtml_a55ef8d33af180b980b728c8148f4d272"><div class="ttname"><a href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a55ef8d33af180b980b728c8148f4d272">tableformatter::TableFormatter::addRow</a></div><div class="ttdeci">void addRow(const StringVector &amp;row)</div><div class="ttdef"><b>Definition:</b> tableformatter.h:293</div></div>
<div class="ttc" id="aclasstableformatter_1_1_table_formatter_xhtml_a2d4aa43bcc9e2906e897ad87c219c368"><div class="ttname"><a href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a2d4aa43bcc9e2906e897ad87c219c368">tableformatter::TableFormatter::addHorizontalLine</a></div><div class="ttdeci">void addHorizontalLine(const char &amp;character='-')</div><div class="ttdef"><b>Definition:</b> tableformatter.h:445</div></div>
<div class="ttc" id="anamespacetableformatter_xhtml_a5088d2721e9031a03849660470e09d58a1fabf63de5c96c78e2a40805bcdeb73b"><div class="ttname"><a href="../../d4/daa/namespacetableformatter.xhtml#a5088d2721e9031a03849660470e09d58a1fabf63de5c96c78e2a40805bcdeb73b">tableformatter::VERTICAL::BOTTOM</a></div></div>
<div class="ttc" id="aclasstableformatter_1_1_table_formatter_xhtml_ae674e6e293906f0e1463b542d361c9db"><div class="ttname"><a href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#ae674e6e293906f0e1463b542d361c9db">tableformatter::TableFormatter::getTableWidth</a></div><div class="ttdeci">size_t getTableWidth() const</div><div class="ttdef"><b>Definition:</b> tableformatter.h:429</div></div>
<div class="ttc" id="astructtableformatter_1_1is__any__of_xhtml"><div class="ttname"><a href="../../d8/db0/structtableformatter_1_1is__any__of.xhtml">tableformatter::is_any_of</a></div><div class="ttdef"><b>Definition:</b> tableformatter.h:60</div></div>
<div class="ttc" id="anamespacetableformatter_xhtml_a5088d2721e9031a03849660470e09d58"><div class="ttname"><a href="../../d4/daa/namespacetableformatter.xhtml#a5088d2721e9031a03849660470e09d58">tableformatter::VERTICAL</a></div><div class="ttdeci">VERTICAL</div><div class="ttdef"><b>Definition:</b> tableformatter.h:43</div></div>
<div class="ttc" id="astructtableformatter_1_1_row_stream_xhtml_a6f83cd107785fd8c1751e6147c22a450"><div class="ttname"><a href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#a6f83cd107785fd8c1751e6147c22a450">tableformatter::RowStream::getNumberOfColumns</a></div><div class="ttdeci">size_t getNumberOfColumns() const</div><div class="ttdef"><b>Definition:</b> tableformatter.h:115</div></div>
<div class="ttc" id="aclasstableformatter_1_1_table_formatter_xhtml_a7402d14edef597bec438b8b06f06e0d9"><div class="ttname"><a href="../../d7/df4/classtableformatter_1_1_table_formatter.xhtml#a7402d14edef597bec438b8b06f06e0d9">tableformatter::TableFormatter::clearData</a></div><div class="ttdeci">void clearData()</div><div class="ttdef"><b>Definition:</b> tableformatter.h:443</div></div>
<div class="ttc" id="astructtableformatter_1_1_row_stream_xhtml_a41464ec59fc1ea6a88e26b18005d598d"><div class="ttname"><a href="../../d5/dba/structtableformatter_1_1_row_stream.xhtml#a41464ec59fc1ea6a88e26b18005d598d">tableformatter::RowStream::RowStream</a></div><div class="ttdeci">RowStream()</div><div class="ttdef"><b>Definition:</b> tableformatter.h:105</div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Nov 21 2019 16:45:46 for JVM 8 SB 2019/2 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.16
</small></address>
</body>
</html>
