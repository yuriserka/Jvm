<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.16"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>JVM 8 SB 2019/2: include/instructions/instruction_set/byte.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">JVM 8 SB 2019/2
   </div>
   <div id="projectbrief">projeto que visa fazer uma implementação simples da JVM 8</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.16 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="../../dir_2843b2c750ff6b39dcfe98bf2554dba0.xhtml">instructions</a></li><li class="navelem"><a class="el" href="../../dir_7ef69e660d75507825e3f78a695283fd.xhtml">instruction_set</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">byte.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d6/d00/byte_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#ifndef INCLUDE_INSTRUCTIONS_INSTRUCTION_SET_BYTE_H_</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#define INCLUDE_INSTRUCTIONS_INSTRUCTION_SET_BYTE_H_</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d3/d5a/base_8h.xhtml">instructions/instruction_set/base.h</a>&quot;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d3/de6/opcodes_8h.xhtml">instructions/opcodes.h</a>&quot;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../da/d66/string_8h.xhtml">utils/string.h</a>&quot;</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword">namespace </span><a class="code" href="../../da/d11/namespace_instructions.xhtml">Instructions</a> {</div>
<div class="line"><a name="l00012"></a><span class="lineno"><a class="line" href="../../dc/dd0/namespace_instructions_1_1_byte.xhtml">   12</a></span>&#160;<span class="keyword">namespace </span>Byte {</div>
<div class="line"><a name="l00013"></a><span class="lineno"><a class="line" href="../../d9/d66/class_instructions_1_1_byte_1_1_load_from_array.xhtml">   13</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d9/d66/class_instructions_1_1_byte_1_1_load_from_array.xhtml">LoadFromArray</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00015"></a><span class="lineno"><a class="line" href="../../d9/d66/class_instructions_1_1_byte_1_1_load_from_array.xhtml#a0855cbda97316eb724e278dfdc44f280">   15</a></span>&#160;  <a class="code" href="../../d9/d66/class_instructions_1_1_byte_1_1_load_from_array.xhtml#a0855cbda97316eb724e278dfdc44f280">LoadFromArray</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a8c926812626511a81a2e5222e55ecbd9">kBALOAD</a>) {}</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="../../d9/d66/class_instructions_1_1_byte_1_1_load_from_array.xhtml#a63f381eefa4a2f4b8ab413acb434cb20">   17</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d9/d66/class_instructions_1_1_byte_1_1_load_from_array.xhtml#a63f381eefa4a2f4b8ab413acb434cb20">toBytecode</a>(</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;  }</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="../../d9/d66/class_instructions_1_1_byte_1_1_load_from_array.xhtml#a53f82a4011b97fd156e2710ca36392b9">   25</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d9/d66/class_instructions_1_1_byte_1_1_load_from_array.xhtml#a53f82a4011b97fd156e2710ca36392b9">toBytecode_json</a>(</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  }</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d9/d66/class_instructions_1_1_byte_1_1_load_from_array.xhtml#aadf1008f276a05157687eb2d1c60ece7">execute</a>(</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;};</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="../../d1/dba/class_instructions_1_1_byte_1_1_store_into_array.xhtml">   46</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d1/dba/class_instructions_1_1_byte_1_1_store_into_array.xhtml">StoreIntoArray</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="../../d1/dba/class_instructions_1_1_byte_1_1_store_into_array.xhtml#adeccc6962ca7e2dcd1b690a7858a37f7">   48</a></span>&#160;  <a class="code" href="../../d1/dba/class_instructions_1_1_byte_1_1_store_into_array.xhtml#adeccc6962ca7e2dcd1b690a7858a37f7">StoreIntoArray</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37acefd33b266fb618a7ac62bfc8afc603f">kBASTORE</a>) {}</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="../../d1/dba/class_instructions_1_1_byte_1_1_store_into_array.xhtml#a961def260cb4eac0a899c438cc1408c2">   50</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d1/dba/class_instructions_1_1_byte_1_1_store_into_array.xhtml#a961def260cb4eac0a899c438cc1408c2">toBytecode</a>(</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  }</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="../../d1/dba/class_instructions_1_1_byte_1_1_store_into_array.xhtml#a13e39f54e80889d2455ed4d3badbf6ed">   58</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d1/dba/class_instructions_1_1_byte_1_1_store_into_array.xhtml#a13e39f54e80889d2455ed4d3badbf6ed">toBytecode_json</a>(</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d1/dba/class_instructions_1_1_byte_1_1_store_into_array.xhtml#a26c70da1290df56d21d8583affcd1f86">execute</a>(</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;};</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="../../d8/deb/class_instructions_1_1_byte_1_1_push.xhtml">   79</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d8/deb/class_instructions_1_1_byte_1_1_push.xhtml">Push</a> : <span class="keyword">public</span> <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a> {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; <span class="keyword">public</span>:</div>
<div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="../../d8/deb/class_instructions_1_1_byte_1_1_push.xhtml#a99fbee9e6fcd26158d3c84f8d58dc37e">   81</a></span>&#160;  <a class="code" href="../../d8/deb/class_instructions_1_1_byte_1_1_push.xhtml#a99fbee9e6fcd26158d3c84f8d58dc37e">Push</a>() : <a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instruction</a>(Opcodes::<a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37af7a10282bad97138c259d3100923b660">kBIPUSH</a>) {}</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="../../d8/deb/class_instructions_1_1_byte_1_1_push.xhtml#aeba5cc337ea7a7aa24816fbd11e33659">   83</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;int&gt; <a class="code" href="../../d8/deb/class_instructions_1_1_byte_1_1_push.xhtml#aeba5cc337ea7a7aa24816fbd11e33659">toBytecode</a>(</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      std::stringstream *ss, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc,</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;delta_tab)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordtype">signed</span> <span class="keywordtype">char</span> <span class="keywordtype">byte</span> = *++*code_it;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    (*ss) &lt;&lt; <a class="code" href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Opcodes::getMnemonic</a>(this-&gt;<a class="code" href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">opcode</a>) &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; <span class="keywordtype">int</span>{<span class="keywordtype">byte</span>} &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    *delta_code = 1;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="../../d8/deb/class_instructions_1_1_byte_1_1_push.xhtml#afb7661133a4a422576968cc5460cf161">   93</a></span>&#160;  <span class="keyword">inline</span> std::vector&lt;std::string&gt; <a class="code" href="../../d8/deb/class_instructions_1_1_byte_1_1_push.xhtml#afb7661133a4a422576968cc5460cf161">toBytecode_json</a>(</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_it, <span class="keywordtype">int</span> *delta_code,</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;      <span class="keywordtype">int</span> *ret, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide, <span class="keywordtype">int</span> *pc)<span class="keyword"> override </span>{</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordtype">signed</span> <span class="keywordtype">char</span> <span class="keywordtype">byte</span> = *++*code_it;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    *delta_code = 1;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">return</span> {<a class="code" href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a>(<span class="keywordtype">int</span>{<span class="keywordtype">byte</span>})};</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  std::vector&lt;int&gt; <a class="code" href="../../d8/deb/class_instructions_1_1_byte_1_1_push.xhtml#a2ff840781e6e04349766d1d573977c55">execute</a>(</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;      std::vector&lt;Utils::Types::u1&gt;::iterator *code_iterator,</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;      <a class="code" href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a> *th, <span class="keywordtype">int</span> *delta_code, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;wide,</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      <span class="keywordtype">int</span> *pc = <span class="keyword">nullptr</span>) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;};</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}  <span class="comment">// namespace Byte</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}  <span class="comment">// namespace Instructions</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor">#endif  // INCLUDE_INSTRUCTIONS_INSTRUCTION_SET_BYTE_H_</span></div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="aclass_instructions_1_1_byte_1_1_push_xhtml_a2ff840781e6e04349766d1d573977c55"><div class="ttname"><a href="../../d8/deb/class_instructions_1_1_byte_1_1_push.xhtml#a2ff840781e6e04349766d1d573977c55">Instructions::Byte::Push::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Push byte.</div></div>
<div class="ttc" id="aclass_instructions_1_1_byte_1_1_load_from_array_xhtml_a53f82a4011b97fd156e2710ca36392b9"><div class="ttname"><a href="../../d9/d66/class_instructions_1_1_byte_1_1_load_from_array.xhtml#a53f82a4011b97fd156e2710ca36392b9">Instructions::Byte::LoadFromArray::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> byte.h:25</div></div>
<div class="ttc" id="aclass_instructions_1_1_byte_1_1_store_into_array_xhtml_adeccc6962ca7e2dcd1b690a7858a37f7"><div class="ttname"><a href="../../d1/dba/class_instructions_1_1_byte_1_1_store_into_array.xhtml#adeccc6962ca7e2dcd1b690a7858a37f7">Instructions::Byte::StoreIntoArray::StoreIntoArray</a></div><div class="ttdeci">StoreIntoArray()</div><div class="ttdef"><b>Definition:</b> byte.h:48</div></div>
<div class="ttc" id="aclass_instructions_1_1_instruction_xhtml"><div class="ttname"><a href="../../d4/da8/class_instructions_1_1_instruction.xhtml">Instructions::Instruction</a></div><div class="ttdef"><b>Definition:</b> base.h:15</div></div>
<div class="ttc" id="aclass_instructions_1_1_byte_1_1_store_into_array_xhtml"><div class="ttname"><a href="../../d1/dba/class_instructions_1_1_byte_1_1_store_into_array.xhtml">Instructions::Byte::StoreIntoArray</a></div><div class="ttdef"><b>Definition:</b> byte.h:46</div></div>
<div class="ttc" id="abase_8h_xhtml"><div class="ttname"><a href="../../d3/d5a/base_8h.xhtml">base.h</a></div></div>
<div class="ttc" id="aclass_instructions_1_1_byte_1_1_load_from_array_xhtml_a0855cbda97316eb724e278dfdc44f280"><div class="ttname"><a href="../../d9/d66/class_instructions_1_1_byte_1_1_load_from_array.xhtml#a0855cbda97316eb724e278dfdc44f280">Instructions::Byte::LoadFromArray::LoadFromArray</a></div><div class="ttdeci">LoadFromArray()</div><div class="ttdef"><b>Definition:</b> byte.h:15</div></div>
<div class="ttc" id="aclass_instructions_1_1_byte_1_1_push_xhtml_a99fbee9e6fcd26158d3c84f8d58dc37e"><div class="ttname"><a href="../../d8/deb/class_instructions_1_1_byte_1_1_push.xhtml#a99fbee9e6fcd26158d3c84f8d58dc37e">Instructions::Byte::Push::Push</a></div><div class="ttdeci">Push()</div><div class="ttdef"><b>Definition:</b> byte.h:81</div></div>
<div class="ttc" id="aclass_instructions_1_1_byte_1_1_load_from_array_xhtml"><div class="ttname"><a href="../../d9/d66/class_instructions_1_1_byte_1_1_load_from_array.xhtml">Instructions::Byte::LoadFromArray</a></div><div class="ttdef"><b>Definition:</b> byte.h:13</div></div>
<div class="ttc" id="astring_8h_xhtml"><div class="ttname"><a href="../../da/d66/string_8h.xhtml">string.h</a></div></div>
<div class="ttc" id="aclass_instructions_1_1_byte_1_1_push_xhtml_afb7661133a4a422576968cc5460cf161"><div class="ttname"><a href="../../d8/deb/class_instructions_1_1_byte_1_1_push.xhtml#afb7661133a4a422576968cc5460cf161">Instructions::Byte::Push::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> byte.h:93</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_ab765ddcb61c4d60f2647154d87f97ae2"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#ab765ddcb61c4d60f2647154d87f97ae2">Instructions::Opcodes::getMnemonic</a></div><div class="ttdeci">std::string getMnemonic(const Utils::Types::u1 &amp;opcode)</div></div>
<div class="ttc" id="aclass_instructions_1_1_instruction_xhtml_abce4218201520f9ca8880bda8ab78e40"><div class="ttname"><a href="../../d4/da8/class_instructions_1_1_instruction.xhtml#abce4218201520f9ca8880bda8ab78e40">Instructions::Instruction::opcode</a></div><div class="ttdeci">const Utils::Types::u1 opcode</div><div class="ttdef"><b>Definition:</b> base.h:35</div></div>
<div class="ttc" id="aclass_instructions_1_1_byte_1_1_load_from_array_xhtml_a63f381eefa4a2f4b8ab413acb434cb20"><div class="ttname"><a href="../../d9/d66/class_instructions_1_1_byte_1_1_load_from_array.xhtml#a63f381eefa4a2f4b8ab413acb434cb20">Instructions::Byte::LoadFromArray::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> byte.h:17</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37af7a10282bad97138c259d3100923b660"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37af7a10282bad97138c259d3100923b660">Instructions::Opcodes::kBIPUSH</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:30</div></div>
<div class="ttc" id="aopcodes_8h_xhtml"><div class="ttname"><a href="../../d3/de6/opcodes_8h.xhtml">opcodes.h</a></div></div>
<div class="ttc" id="anamespace_instructions_xhtml"><div class="ttname"><a href="../../da/d11/namespace_instructions.xhtml">Instructions</a></div><div class="ttdef"><b>Definition:</b> execution_engine.h:12</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37a8c926812626511a81a2e5222e55ecbd9"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37a8c926812626511a81a2e5222e55ecbd9">Instructions::Opcodes::kBALOAD</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:28</div></div>
<div class="ttc" id="aclass_instructions_1_1_byte_1_1_store_into_array_xhtml_a961def260cb4eac0a899c438cc1408c2"><div class="ttname"><a href="../../d1/dba/class_instructions_1_1_byte_1_1_store_into_array.xhtml#a961def260cb4eac0a899c438cc1408c2">Instructions::Byte::StoreIntoArray::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> byte.h:50</div></div>
<div class="ttc" id="anamespace_utils_1_1_string_xhtml_aec9a3efb3bd837c1f21fec1ceba1eec9"><div class="ttname"><a href="../../d4/da9/namespace_utils_1_1_string.xhtml#aec9a3efb3bd837c1f21fec1ceba1eec9">Utils::String::toString</a></div><div class="ttdeci">std::string toString(const T &amp;num)</div><div class="ttdef"><b>Definition:</b> string.h:21</div></div>
<div class="ttc" id="aclass_instructions_1_1_byte_1_1_store_into_array_xhtml_a13e39f54e80889d2455ed4d3badbf6ed"><div class="ttname"><a href="../../d1/dba/class_instructions_1_1_byte_1_1_store_into_array.xhtml#a13e39f54e80889d2455ed4d3badbf6ed">Instructions::Byte::StoreIntoArray::toBytecode_json</a></div><div class="ttdeci">std::vector&lt; std::string &gt; toBytecode_json(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, int *ret, const bool &amp;wide, int *pc) override</div><div class="ttdef"><b>Definition:</b> byte.h:58</div></div>
<div class="ttc" id="aclass_instructions_1_1_byte_1_1_load_from_array_xhtml_aadf1008f276a05157687eb2d1c60ece7"><div class="ttname"><a href="../../d9/d66/class_instructions_1_1_byte_1_1_load_from_array.xhtml#aadf1008f276a05157687eb2d1c60ece7">Instructions::Byte::LoadFromArray::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Load byte or boolean from array.</div></div>
<div class="ttc" id="anamespace_instructions_1_1_opcodes_xhtml_a607beca4b045010261c680c1a1cd3c37acefd33b266fb618a7ac62bfc8afc603f"><div class="ttname"><a href="../../dd/d06/namespace_instructions_1_1_opcodes.xhtml#a607beca4b045010261c680c1a1cd3c37acefd33b266fb618a7ac62bfc8afc603f">Instructions::Opcodes::kBASTORE</a></div><div class="ttdef"><b>Definition:</b> opcodes.h:29</div></div>
<div class="ttc" id="aclass_instructions_1_1_byte_1_1_push_xhtml"><div class="ttname"><a href="../../d8/deb/class_instructions_1_1_byte_1_1_push.xhtml">Instructions::Byte::Push</a></div><div class="ttdef"><b>Definition:</b> byte.h:79</div></div>
<div class="ttc" id="aclass_instructions_1_1_byte_1_1_store_into_array_xhtml_a26c70da1290df56d21d8583affcd1f86"><div class="ttname"><a href="../../d1/dba/class_instructions_1_1_byte_1_1_store_into_array.xhtml#a26c70da1290df56d21d8583affcd1f86">Instructions::Byte::StoreIntoArray::execute</a></div><div class="ttdeci">std::vector&lt; int &gt; execute(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_iterator, MemoryAreas::Thread *th, int *delta_code, const bool &amp;wide, int *pc=nullptr) override</div><div class="ttdoc">Store into byte or boolean array.</div></div>
<div class="ttc" id="aclass_instructions_1_1_byte_1_1_push_xhtml_aeba5cc337ea7a7aa24816fbd11e33659"><div class="ttname"><a href="../../d8/deb/class_instructions_1_1_byte_1_1_push.xhtml#aeba5cc337ea7a7aa24816fbd11e33659">Instructions::Byte::Push::toBytecode</a></div><div class="ttdeci">std::vector&lt; int &gt; toBytecode(std::vector&lt; Utils::Types::u1 &gt;::iterator *code_it, int *delta_code, std::stringstream *ss, const bool &amp;wide, int *pc, const int &amp;delta_tab) override</div><div class="ttdef"><b>Definition:</b> byte.h:83</div></div>
<div class="ttc" id="aclass_memory_areas_1_1_thread_xhtml"><div class="ttname"><a href="../../d5/da2/class_memory_areas_1_1_thread.xhtml">MemoryAreas::Thread</a></div><div class="ttdef"><b>Definition:</b> thread.h:9</div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 2 2019 14:03:36 for JVM 8 SB 2019/2 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.16
</small></address>
</body>
</html>
